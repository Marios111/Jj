/*
 * Copyright (C) 2004-2020 L2J Server
 * This file is part of L2J Server.
 * L2J Server is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * L2J Server is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package com.l2jserver.gameserver.model.actor.instance;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.ReentrantLock;
import java.util.logging.Level;
import java.util.stream.Collectors;

import com.l2jserver.Config;
import com.l2jserver.L2DatabaseFactory;
import com.l2jserver.gameserver.GameTimeController;
import com.l2jserver.gameserver.GeoData;
import com.l2jserver.gameserver.ItemsAutoDestroy;
import com.l2jserver.gameserver.LoginServerThread;
import com.l2jserver.gameserver.RecipeController;
import com.l2jserver.gameserver.SevenSigns;
import com.l2jserver.gameserver.SevenSignsFestival;
import com.l2jserver.gameserver.ThreadPoolManager;
import com.l2jserver.gameserver.agathion.AgathionRepository;
import com.l2jserver.gameserver.agathion.AgathionRepository.Agathion;
import com.l2jserver.gameserver.ai.CtrlIntention;
import com.l2jserver.gameserver.ai.L2CharacterAI;
import com.l2jserver.gameserver.ai.L2PlayerAI;
import com.l2jserver.gameserver.ai.L2SummonAI;
import com.l2jserver.gameserver.cache.WarehouseCacheManager;
import com.l2jserver.gameserver.communitybbs.BB.Forum;
import com.l2jserver.gameserver.communitybbs.Manager.ForumsBBSManager;
import com.l2jserver.gameserver.data.sql.impl.CharNameTable;
import com.l2jserver.gameserver.data.sql.impl.CharSummonTable;
import com.l2jserver.gameserver.data.sql.impl.ClanTable;
import com.l2jserver.gameserver.data.xml.impl.AdminData;
import com.l2jserver.gameserver.data.xml.impl.ClassListData;
import com.l2jserver.gameserver.data.xml.impl.EnchantSkillGroupsData;
import com.l2jserver.gameserver.data.xml.impl.ExperienceData;
import com.l2jserver.gameserver.data.xml.impl.FishData;
import com.l2jserver.gameserver.data.xml.impl.HennaData;
import com.l2jserver.gameserver.data.xml.impl.NpcData;
import com.l2jserver.gameserver.data.xml.impl.PetDataTable;
import com.l2jserver.gameserver.data.xml.impl.PlayerTemplateData;
import com.l2jserver.gameserver.data.xml.impl.PlayerXpPercentLostData;
import com.l2jserver.gameserver.data.xml.impl.RecipeData;
import com.l2jserver.gameserver.data.xml.impl.SkillTreesData;
import com.l2jserver.gameserver.datatables.AntiFeedData;
import com.l2jserver.gameserver.datatables.DailyMissionData;
import com.l2jserver.gameserver.datatables.FactionData;
import com.l2jserver.gameserver.datatables.FakeStoreData;
import com.l2jserver.gameserver.datatables.ItemTable;
import com.l2jserver.gameserver.datatables.KillingSpreeData;
import com.l2jserver.gameserver.datatables.ProfilData;
import com.l2jserver.gameserver.datatables.SkillData;
import com.l2jserver.gameserver.enums.CounterType;
import com.l2jserver.gameserver.enums.DuelState;
import com.l2jserver.gameserver.enums.FactionActionType;
import com.l2jserver.gameserver.enums.HideAccessoryType;
import com.l2jserver.gameserver.enums.HtmlActionScope;
import com.l2jserver.gameserver.enums.IllegalActionPunishmentType;
import com.l2jserver.gameserver.enums.InstanceType;
import com.l2jserver.gameserver.enums.MountType;
import com.l2jserver.gameserver.enums.PartyDistributionType;
import com.l2jserver.gameserver.enums.PlayerAction;
import com.l2jserver.gameserver.enums.PrivateStoreType;
import com.l2jserver.gameserver.enums.Race;
import com.l2jserver.gameserver.enums.ServiceType;
import com.l2jserver.gameserver.enums.Sex;
import com.l2jserver.gameserver.enums.ShortcutType;
import com.l2jserver.gameserver.enums.ShotType;
import com.l2jserver.gameserver.enums.Team;
import com.l2jserver.gameserver.enums.audio.Music;
import com.l2jserver.gameserver.eventengine.EventContainer;
import com.l2jserver.gameserver.eventengine.EventInterface;
import com.l2jserver.gameserver.handler.IItemHandler;
import com.l2jserver.gameserver.handler.ItemHandler;
import com.l2jserver.gameserver.idfactory.IdFactory;
import com.l2jserver.gameserver.instancemanager.AntiFeedManager;
import com.l2jserver.gameserver.instancemanager.CastleManager;
import com.l2jserver.gameserver.instancemanager.CoupleManager;
import com.l2jserver.gameserver.instancemanager.CursedWeaponsManager;
import com.l2jserver.gameserver.instancemanager.DimensionalRiftManager;
import com.l2jserver.gameserver.instancemanager.DuelManager;
import com.l2jserver.gameserver.instancemanager.FortManager;
import com.l2jserver.gameserver.instancemanager.FortSiegeManager;
import com.l2jserver.gameserver.instancemanager.GrandBossManager;
import com.l2jserver.gameserver.instancemanager.HandysBlockCheckerManager;
import com.l2jserver.gameserver.instancemanager.InstanceManager;
import com.l2jserver.gameserver.instancemanager.ItemsOnGroundManager;
import com.l2jserver.gameserver.instancemanager.PunishmentManager;
import com.l2jserver.gameserver.instancemanager.QuestManager;
import com.l2jserver.gameserver.instancemanager.SiegeManager;
import com.l2jserver.gameserver.instancemanager.TerritoryWarManager;
import com.l2jserver.gameserver.instancemanager.ZoneManager;
import com.l2jserver.gameserver.model.AbstractService;
import com.l2jserver.gameserver.model.Achievement;
import com.l2jserver.gameserver.model.BlockList;
import com.l2jserver.gameserver.model.ClanPrivilege;
import com.l2jserver.gameserver.model.Donate;
import com.l2jserver.gameserver.model.FactionPlayer;
import com.l2jserver.gameserver.model.FakeStore;
import com.l2jserver.gameserver.model.Farm;
import com.l2jserver.gameserver.model.L2AccessLevel;
import com.l2jserver.gameserver.model.L2Clan;
import com.l2jserver.gameserver.model.L2ClanMember;
import com.l2jserver.gameserver.model.L2ContactList;
import com.l2jserver.gameserver.model.L2EnchantSkillLearn;
import com.l2jserver.gameserver.model.L2ManufactureItem;
import com.l2jserver.gameserver.model.L2Object;
import com.l2jserver.gameserver.model.L2Party;
import com.l2jserver.gameserver.model.L2Party.MessageType;
import com.l2jserver.gameserver.model.L2PetData;
import com.l2jserver.gameserver.model.L2PetLevelData;
import com.l2jserver.gameserver.model.L2PremiumItem;
import com.l2jserver.gameserver.model.L2Radar;
import com.l2jserver.gameserver.model.L2RecipeList;
import com.l2jserver.gameserver.model.L2Request;
import com.l2jserver.gameserver.model.L2SkillLearn;
import com.l2jserver.gameserver.model.L2World;
import com.l2jserver.gameserver.model.L2WorldRegion;
import com.l2jserver.gameserver.model.Location;
import com.l2jserver.gameserver.model.Macro;
import com.l2jserver.gameserver.model.MacroList;
import com.l2jserver.gameserver.model.PartyMatchRoom;
import com.l2jserver.gameserver.model.PartyMatchRoomList;
import com.l2jserver.gameserver.model.PartyMatchWaitingList;
import com.l2jserver.gameserver.model.PcCondOverride;
import com.l2jserver.gameserver.model.PlayerCounter;
import com.l2jserver.gameserver.model.PlayerMission;
import com.l2jserver.gameserver.model.Profil;
import com.l2jserver.gameserver.model.Scheme;
import com.l2jserver.gameserver.model.Service;
import com.l2jserver.gameserver.model.ShortCuts;
import com.l2jserver.gameserver.model.Shortcut;
import com.l2jserver.gameserver.model.TeleportBookmark;
import com.l2jserver.gameserver.model.TeleportWhereType;
import com.l2jserver.gameserver.model.TerritoryWard;
import com.l2jserver.gameserver.model.TimeStamp;
import com.l2jserver.gameserver.model.TradeList;
import com.l2jserver.gameserver.model.UIKeysSettings;
import com.l2jserver.gameserver.model.Versus;
import com.l2jserver.gameserver.model.Visual;
import com.l2jserver.gameserver.model.actor.L2Attackable;
import com.l2jserver.gameserver.model.actor.L2Character;
import com.l2jserver.gameserver.model.actor.L2Decoy;
import com.l2jserver.gameserver.model.actor.L2Npc;
import com.l2jserver.gameserver.model.actor.L2Playable;
import com.l2jserver.gameserver.model.actor.L2Summon;
import com.l2jserver.gameserver.model.actor.L2Vehicle;
import com.l2jserver.gameserver.model.actor.appearance.PcAppearance;
import com.l2jserver.gameserver.model.actor.knownlist.PcKnownList;
import com.l2jserver.gameserver.model.actor.stat.PcStat;
import com.l2jserver.gameserver.model.actor.status.PcStatus;
import com.l2jserver.gameserver.model.actor.tasks.player.DismountTask;
import com.l2jserver.gameserver.model.actor.tasks.player.FameTask;
import com.l2jserver.gameserver.model.actor.tasks.player.GameGuardCheckTask;
import com.l2jserver.gameserver.model.actor.tasks.player.InventoryEnableTask;
import com.l2jserver.gameserver.model.actor.tasks.player.LookingForFishTask;
import com.l2jserver.gameserver.model.actor.tasks.player.PetFeedTask;
import com.l2jserver.gameserver.model.actor.tasks.player.PvPFlagTask;
import com.l2jserver.gameserver.model.actor.tasks.player.RecoBonusTaskEnd;
import com.l2jserver.gameserver.model.actor.tasks.player.RecoGiveTask;
import com.l2jserver.gameserver.model.actor.tasks.player.RentPetTask;
import com.l2jserver.gameserver.model.actor.tasks.player.ResetChargesTask;
import com.l2jserver.gameserver.model.actor.tasks.player.ResetSoulsTask;
import com.l2jserver.gameserver.model.actor.tasks.player.SitDownTask;
import com.l2jserver.gameserver.model.actor.tasks.player.StandUpTask;
import com.l2jserver.gameserver.model.actor.tasks.player.TeleportWatchdogTask;
import com.l2jserver.gameserver.model.actor.tasks.player.VitalityTask;
import com.l2jserver.gameserver.model.actor.tasks.player.WarnUserTakeBreakTask;
import com.l2jserver.gameserver.model.actor.tasks.player.WaterTask;
import com.l2jserver.gameserver.model.actor.templates.L2PcTemplate;
import com.l2jserver.gameserver.model.actor.transform.Transform;
import com.l2jserver.gameserver.model.base.ClassId;
import com.l2jserver.gameserver.model.base.ClassLevel;
import com.l2jserver.gameserver.model.base.PlayerClass;
import com.l2jserver.gameserver.model.base.SubClass;
import com.l2jserver.gameserver.model.effects.EffectFlag;
import com.l2jserver.gameserver.model.effects.L2EffectType;
import com.l2jserver.gameserver.model.entity.BuffStore;
import com.l2jserver.gameserver.model.entity.Castle;
import com.l2jserver.gameserver.model.entity.Duel;
import com.l2jserver.gameserver.model.entity.Faction;
import com.l2jserver.gameserver.model.entity.Fort;
import com.l2jserver.gameserver.model.entity.Hero;
import com.l2jserver.gameserver.model.entity.Instance;
import com.l2jserver.gameserver.model.entity.NevitAdvent;
import com.l2jserver.gameserver.model.entity.Siege;
import com.l2jserver.gameserver.model.entity.Tournament;
import com.l2jserver.gameserver.model.events.Containers;
import com.l2jserver.gameserver.model.events.EventDispatcher;
import com.l2jserver.gameserver.model.events.impl.character.player.OnPlayerEquipItem;
import com.l2jserver.gameserver.model.events.impl.character.player.OnPlayerFameChanged;
import com.l2jserver.gameserver.model.events.impl.character.player.OnPlayerHennaRemove;
import com.l2jserver.gameserver.model.events.impl.character.player.OnPlayerKarmaChanged;
import com.l2jserver.gameserver.model.events.impl.character.player.OnPlayerLogin;
import com.l2jserver.gameserver.model.events.impl.character.player.OnPlayerLogout;
import com.l2jserver.gameserver.model.events.impl.character.player.OnPlayerObserverJoin;
import com.l2jserver.gameserver.model.events.impl.character.player.OnPlayerObserverLeave;
import com.l2jserver.gameserver.model.events.impl.character.player.OnPlayerPKChanged;
import com.l2jserver.gameserver.model.events.impl.character.player.OnPlayerProfessionCancel;
import com.l2jserver.gameserver.model.events.impl.character.player.OnPlayerProfessionChange;
import com.l2jserver.gameserver.model.events.impl.character.player.OnPlayerPvPChanged;
import com.l2jserver.gameserver.model.events.impl.character.player.OnPlayerPvPKill;
import com.l2jserver.gameserver.model.events.impl.character.player.OnPlayerSit;
import com.l2jserver.gameserver.model.events.impl.character.player.OnPlayerStand;
import com.l2jserver.gameserver.model.events.impl.character.player.OnPlayerTransform;
import com.l2jserver.gameserver.model.events.returns.TerminateReturn;
import com.l2jserver.gameserver.model.fishing.L2Fish;
import com.l2jserver.gameserver.model.fishing.L2Fishing;
import com.l2jserver.gameserver.model.holders.AdditionalSkillHolder;
import com.l2jserver.gameserver.model.holders.ArenaParticipantsHolder;
import com.l2jserver.gameserver.model.holders.ItemHolder;
import com.l2jserver.gameserver.model.holders.SkillHolder;
import com.l2jserver.gameserver.model.holders.SkillUseHolder;
import com.l2jserver.gameserver.model.interfaces.ILocational;
import com.l2jserver.gameserver.model.itemcontainer.Inventory;
import com.l2jserver.gameserver.model.itemcontainer.ItemContainer;
import com.l2jserver.gameserver.model.itemcontainer.PcFreight;
import com.l2jserver.gameserver.model.itemcontainer.PcInventory;
import com.l2jserver.gameserver.model.itemcontainer.PcRefund;
import com.l2jserver.gameserver.model.itemcontainer.PcWarehouse;
import com.l2jserver.gameserver.model.itemcontainer.PetInventory;
import com.l2jserver.gameserver.model.items.L2Armor;
import com.l2jserver.gameserver.model.items.L2EtcItem;
import com.l2jserver.gameserver.model.items.L2Henna;
import com.l2jserver.gameserver.model.items.L2Item;
import com.l2jserver.gameserver.model.items.L2Weapon;
import com.l2jserver.gameserver.model.items.instance.L2ItemInstance;
import com.l2jserver.gameserver.model.items.type.ActionType;
import com.l2jserver.gameserver.model.items.type.ArmorType;
import com.l2jserver.gameserver.model.items.type.EtcItemType;
import com.l2jserver.gameserver.model.items.type.WeaponType;
import com.l2jserver.gameserver.model.missions.events.impl.character.player.OnMissionEventLogin;
import com.l2jserver.gameserver.model.missions.events.impl.character.player.OnMissionEventPlayerKill;
import com.l2jserver.gameserver.model.multisell.PreparedListContainer;
import com.l2jserver.gameserver.model.olympiad.OlympiadGameManager;
import com.l2jserver.gameserver.model.olympiad.OlympiadGameTask;
import com.l2jserver.gameserver.model.olympiad.OlympiadManager;
import com.l2jserver.gameserver.model.punishment.PunishmentAffect;
import com.l2jserver.gameserver.model.punishment.PunishmentType;
import com.l2jserver.gameserver.model.quest.Quest;
import com.l2jserver.gameserver.model.quest.QuestState;
import com.l2jserver.gameserver.model.skills.AbnormalType;
import com.l2jserver.gameserver.model.skills.BuffInfo;
import com.l2jserver.gameserver.model.skills.CommonSkill;
import com.l2jserver.gameserver.model.skills.Skill;
import com.l2jserver.gameserver.model.skills.targets.L2TargetType;
import com.l2jserver.gameserver.model.stats.Formulas;
import com.l2jserver.gameserver.model.stats.Stats;
import com.l2jserver.gameserver.model.variables.AccountVariables;
import com.l2jserver.gameserver.model.variables.PlayerVariables;
import com.l2jserver.gameserver.model.variables.PreferenceVariables;
import com.l2jserver.gameserver.model.zone.L2ZoneType;
import com.l2jserver.gameserver.model.zone.ZoneId;
import com.l2jserver.gameserver.model.zone.type.L2BossZone;
import com.l2jserver.gameserver.network.L2GameClient;
import com.l2jserver.gameserver.network.SystemMessageId;
import com.l2jserver.gameserver.network.serverpackets.AbstractHtmlPacket;
import com.l2jserver.gameserver.network.serverpackets.ActionFailed;
import com.l2jserver.gameserver.network.serverpackets.ChangeWaitType;
import com.l2jserver.gameserver.network.serverpackets.CharInfo;
import com.l2jserver.gameserver.network.serverpackets.ConfirmDlg;
import com.l2jserver.gameserver.network.serverpackets.EtcStatusUpdate;
import com.l2jserver.gameserver.network.serverpackets.ExAutoSoulShot;
import com.l2jserver.gameserver.network.serverpackets.ExBR_AgathionEnergyInfo;
import com.l2jserver.gameserver.network.serverpackets.ExBrExtraUserInfo;
import com.l2jserver.gameserver.network.serverpackets.ExDominionWarStart;
import com.l2jserver.gameserver.network.serverpackets.ExDuelUpdateUserInfo;
import com.l2jserver.gameserver.network.serverpackets.ExFishingEnd;
import com.l2jserver.gameserver.network.serverpackets.ExFishingStart;
import com.l2jserver.gameserver.network.serverpackets.ExGetBookMarkInfoPacket;
import com.l2jserver.gameserver.network.serverpackets.ExGetOnAirShip;
import com.l2jserver.gameserver.network.serverpackets.ExOlympiadMode;
import com.l2jserver.gameserver.network.serverpackets.ExPCCafePointInfo;
import com.l2jserver.gameserver.network.serverpackets.ExPrivateStoreSetWholeMsg;
import com.l2jserver.gameserver.network.serverpackets.ExSetCompassZoneCode;
import com.l2jserver.gameserver.network.serverpackets.ExStartScenePlayer;
import com.l2jserver.gameserver.network.serverpackets.ExStorageMaxCount;
import com.l2jserver.gameserver.network.serverpackets.ExUseSharedGroupItem;
import com.l2jserver.gameserver.network.serverpackets.ExVoteSystemInfo;
import com.l2jserver.gameserver.network.serverpackets.FlyToLocation.FlyType;
import com.l2jserver.gameserver.network.serverpackets.FriendStatusPacket;
import com.l2jserver.gameserver.network.serverpackets.GameGuardQuery;
import com.l2jserver.gameserver.network.serverpackets.GetOnVehicle;
import com.l2jserver.gameserver.network.serverpackets.HennaInfo;
import com.l2jserver.gameserver.network.serverpackets.InventoryUpdate;
import com.l2jserver.gameserver.network.serverpackets.ItemList;
import com.l2jserver.gameserver.network.serverpackets.L2GameServerPacket;
import com.l2jserver.gameserver.network.serverpackets.LeaveWorld;
import com.l2jserver.gameserver.network.serverpackets.MagicSkillUse;
import com.l2jserver.gameserver.network.serverpackets.MyTargetSelected;
import com.l2jserver.gameserver.network.serverpackets.NicknameChanged;
import com.l2jserver.gameserver.network.serverpackets.NpcHtmlMessage;
import com.l2jserver.gameserver.network.serverpackets.ObservationMode;
import com.l2jserver.gameserver.network.serverpackets.ObservationReturn;
import com.l2jserver.gameserver.network.serverpackets.PartySmallWindowUpdate;
import com.l2jserver.gameserver.network.serverpackets.PetInventoryUpdate;
import com.l2jserver.gameserver.network.serverpackets.PledgeShowMemberListDelete;
import com.l2jserver.gameserver.network.serverpackets.PledgeShowMemberListUpdate;
import com.l2jserver.gameserver.network.serverpackets.PrivateStoreListBuy;
import com.l2jserver.gameserver.network.serverpackets.PrivateStoreListSell;
import com.l2jserver.gameserver.network.serverpackets.PrivateStoreManageListBuy;
import com.l2jserver.gameserver.network.serverpackets.PrivateStoreManageListSell;
import com.l2jserver.gameserver.network.serverpackets.PrivateStoreMsgBuy;
import com.l2jserver.gameserver.network.serverpackets.PrivateStoreMsgSell;
import com.l2jserver.gameserver.network.serverpackets.RecipeShopMsg;
import com.l2jserver.gameserver.network.serverpackets.RecipeShopSellList;
import com.l2jserver.gameserver.network.serverpackets.RelationChanged;
import com.l2jserver.gameserver.network.serverpackets.Ride;
import com.l2jserver.gameserver.network.serverpackets.ServerClose;
import com.l2jserver.gameserver.network.serverpackets.SetupGauge;
import com.l2jserver.gameserver.network.serverpackets.ShortCutInit;
import com.l2jserver.gameserver.network.serverpackets.SkillCoolTime;
import com.l2jserver.gameserver.network.serverpackets.SkillList;
import com.l2jserver.gameserver.network.serverpackets.Snoop;
import com.l2jserver.gameserver.network.serverpackets.SocialAction;
import com.l2jserver.gameserver.network.serverpackets.StatusUpdate;
import com.l2jserver.gameserver.network.serverpackets.StopMove;
import com.l2jserver.gameserver.network.serverpackets.SystemMessage;
import com.l2jserver.gameserver.network.serverpackets.TargetSelected;
import com.l2jserver.gameserver.network.serverpackets.TargetUnselected;
import com.l2jserver.gameserver.network.serverpackets.TradeDone;
import com.l2jserver.gameserver.network.serverpackets.TradeOtherDone;
import com.l2jserver.gameserver.network.serverpackets.TradeStart;
import com.l2jserver.gameserver.network.serverpackets.UserInfo;
import com.l2jserver.gameserver.network.serverpackets.ValidateLocation;
import com.l2jserver.gameserver.particle.model.Particle;
import com.l2jserver.gameserver.taskmanager.AttackStanceTaskManager;
import com.l2jserver.gameserver.util.Broadcast;
import com.l2jserver.gameserver.util.FloodProtectors;
import com.l2jserver.gameserver.util.Util;
import com.l2jserver.util.EnumIntBitmask;
import com.l2jserver.util.Rnd;

/**
 * This class represents all player characters in the world.<br>
 * There is always a client-thread connected to this (except if a player-store is activated upon logout).
 */
public class L2PcInstance extends L2Playable
{
	// Character Skill SQL String Definitions:
	private static final String RESTORE_SKILLS_FOR_CHAR = "SELECT skill_id,skill_level FROM character_skills WHERE charId=? AND class_index=?";
	private static final String ADD_NEW_SKILL = "INSERT INTO character_skills (charId,skill_id,skill_level,class_index) VALUES (?,?,?,?)";
	private static final String UPDATE_CHARACTER_SKILL_LEVEL = "UPDATE character_skills SET skill_level=? WHERE skill_id=? AND charId=? AND class_index=?";
	private static final String ADD_NEW_SKILLS = "REPLACE INTO character_skills (charId,skill_id,skill_level,class_index) VALUES (?,?,?,?)";
	private static final String DELETE_SKILL_FROM_CHAR = "DELETE FROM character_skills WHERE skill_id=? AND charId=? AND class_index=?";
	private static final String DELETE_CHAR_SKILLS = "DELETE FROM character_skills WHERE charId=? AND class_index=?";

	// Character Skill Save SQL String Definitions:
	private static final String ADD_SKILL_SAVE = "INSERT INTO character_skills_save (charId,skill_id,skill_level,remaining_time,reuse_delay,systime,restore_type,class_index,buff_index) VALUES (?,?,?,?,?,?,?,?,?)";
	private static final String RESTORE_SKILL_SAVE = "SELECT skill_id,skill_level,remaining_time, reuse_delay, systime, restore_type FROM character_skills_save WHERE charId=? AND class_index=? ORDER BY buff_index ASC";
	private static final String DELETE_SKILL_SAVE = "DELETE FROM character_skills_save WHERE charId=? AND class_index=?";

	// Character Item Reuse Time String Definition:
	private static final String ADD_ITEM_REUSE_SAVE = "INSERT INTO character_item_reuse_save (charId,itemId,itemObjId,reuseDelay,systime) VALUES (?,?,?,?,?)";
	private static final String RESTORE_ITEM_REUSE_SAVE = "SELECT charId,itemId,itemObjId,reuseDelay,systime FROM character_item_reuse_save WHERE charId=?";
	private static final String DELETE_ITEM_REUSE_SAVE = "DELETE FROM character_item_reuse_save WHERE charId=?";

	// Character Character SQL String Definitions:
	private static final String INSERT_CHARACTER = "INSERT INTO characters (account_name,charId,char_name,level,maxHp,curHp,maxCp,curCp,maxMp,curMp,face,hairStyle,hairColor,sex,exp,sp,karma,fame,pvpkills,pkkills,clanid,race,classid,deletetime,cancraft,title,title_color,accesslevel,online,isin7sdungeon,clan_privs,wantspeace,base_class,newbie,nobless,power_grade,createDate) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	private static final String UPDATE_CHARACTER = "UPDATE characters SET level=?,maxHp=?,curHp=?,maxCp=?,curCp=?,maxMp=?,curMp=?,face=?,hairStyle=?,hairColor=?,sex=?,heading=?,x=?,y=?,z=?,exp=?,expBeforeDeath=?,sp=?,karma=?,fame=?,pvpkills=?,pkkills=?,clanid=?,race=?,classid=?,deletetime=?,title=?,title_color=?,accesslevel=?,online=?,isin7sdungeon=?,clan_privs=?,wantspeace=?,base_class=?,onlinetime=?,newbie=?,nobless=?,power_grade=?,subpledge=?,lvl_joined_academy=?,apprentice=?,sponsor=?,clan_join_expiry_time=?,clan_create_expiry_time=?,char_name=?,death_penalty_level=?,bookmarkslot=?,vitality_points=?,language=?,pc_points=?,prime_points=? WHERE charId=?";
	private static final String RESTORE_CHARACTER = "SELECT * FROM characters WHERE charId=?";

	// Character Teleport Bookmark:
	private static final String INSERT_TP_BOOKMARK = "INSERT INTO character_tpbookmark (charId,Id,x,y,z,icon,tag,name) values (?,?,?,?,?,?,?,?)";
	private static final String UPDATE_TP_BOOKMARK = "UPDATE character_tpbookmark SET icon=?,tag=?,name=? where charId=? AND Id=?";
	private static final String RESTORE_TP_BOOKMARK = "SELECT Id,x,y,z,icon,tag,name FROM character_tpbookmark WHERE charId=?";
	private static final String DELETE_TP_BOOKMARK = "DELETE FROM character_tpbookmark WHERE charId=? AND Id=?";

	// Character Subclass SQL String Definitions:
	private static final String RESTORE_CHAR_SUBCLASSES = "SELECT class_id,exp,sp,level,class_index FROM character_subclasses WHERE charId=? ORDER BY class_index ASC";
	private static final String ADD_CHAR_SUBCLASS = "INSERT INTO character_subclasses (charId,class_id,exp,sp,level,class_index) VALUES (?,?,?,?,?,?)";
	private static final String UPDATE_CHAR_SUBCLASS = "UPDATE character_subclasses SET exp=?,sp=?,level=?,class_id=? WHERE charId=? AND class_index =?";
	private static final String DELETE_CHAR_SUBCLASS = "DELETE FROM character_subclasses WHERE charId=? AND class_index=?";

	// Character Henna SQL String Definitions:
	private static final String RESTORE_CHAR_HENNAS = "SELECT slot,symbol_id FROM character_hennas WHERE charId=? AND class_index=?";
	private static final String ADD_CHAR_HENNA = "INSERT INTO character_hennas (charId,symbol_id,slot,class_index) VALUES (?,?,?,?)";
	private static final String DELETE_CHAR_HENNA = "DELETE FROM character_hennas WHERE charId=? AND slot=? AND class_index=?";
	private static final String DELETE_CHAR_HENNAS = "DELETE FROM character_hennas WHERE charId=? AND class_index=?";

	// Character Shortcut SQL String Definitions:
	private static final String DELETE_CHAR_SHORTCUTS = "DELETE FROM character_shortcuts WHERE charId=? AND class_index=?";

	// Character Recipe List Save
	private static final String DELETE_CHAR_RECIPE_SHOP = "DELETE FROM character_recipeshoplist WHERE charId=?";
	private static final String INSERT_CHAR_RECIPE_SHOP = "REPLACE INTO character_recipeshoplist (`charId`, `recipeId`, `price`, `index`) VALUES (?, ?, ?, ?)";
	private static final String RESTORE_CHAR_RECIPE_SHOP = "SELECT * FROM character_recipeshoplist WHERE charId=? ORDER BY `index`";

	private static final String COND_OVERRIDE_KEY = "cond_override";

	public static final String NEWBIE_KEY = "NEWBIE";

	public static final int ID_NONE = -1;

	public static final int REQUEST_TIMEOUT = 15;

	//@formatter:off
	private static final int[][] NEVIT_HOURGLASS_BONUS =
	{
		{25, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{16, 33, 50, 50, 50, 50, 50, 50, 50, 50},
		{12, 25, 37, 50, 50, 50, 50, 50, 50, 50},
		{10, 20, 30, 40, 50, 50, 50, 50, 50, 50},
		{8, 16, 25, 33, 41, 50, 50, 50, 50, 50},
		{7, 14, 21, 28, 35, 42, 50, 50, 50, 50},
		{6, 12, 18, 25, 31, 37, 43, 50, 50, 50},
		{5, 11, 16, 22, 27, 33, 38, 44, 50, 50},
		{5, 10, 15, 20, 25, 30, 35, 40, 45, 50},
	};
	//@formatter:on

	private static final int NEVIT_HOURGLASS_ACTIVE = 0;
	private static final int NEVIT_HOURGLASS_PAUSED = 1;
	private static final int NEVIT_HOURGLASS_MAINTAIN = 10;

	private L2GameClient _client;

	private final String _accountName;
	private long _deleteTimer;
	private Calendar _createDate = Calendar.getInstance();

	private String _lang = null;
	private String _htmlPrefix = null;

	private volatile boolean _isOnline = false;
	private long _onlineTime;
	private long _onlineBeginTime;
	private long _lastAccess;
	private long _uptime;

	private final ReentrantLock _subclassLock = new ReentrantLock();
	protected int _baseClass;
	protected int _activeClass;
	protected int _classIndex = 0;

	/** data for mounted pets */
	private int _controlItemId;
	private L2PetData _data;
	private L2PetLevelData _leveldata;
	private int _curFeed;
	protected Future<?> _mountFeedTask;
	private ScheduledFuture<?> _dismountTask;
	private boolean _petItems = false;

	/** The list of sub-classes this character has. */
	private Map<Integer, SubClass> _subClasses;

	private final PcAppearance _appearance;

	/** The Experience of the L2PcInstance before the last Death Penalty */
	private long _expBeforeDeath;

	/** The Karma of the L2PcInstance (if higher than 0, the name of the L2PcInstance appears in red) */
	private int _karma;

	/** The number of player killed during a PvP (the player killed was PvP Flagged) */
	private int _pvpKills;

	/** The PK counter of the L2PcInstance (= Number of non PvP Flagged player killed) */
	private int _pkKills;

	/** The PvP Flag state of the L2PcInstance (0=White, 1=Purple) */
	private byte _pvpFlag;

	/** The Fame of this L2PcInstance */
	private int _fame;
	private ScheduledFuture<?> _fameTask;

	/** Vitality recovery task */
	private ScheduledFuture<?> _vitalityTask;

	private volatile ScheduledFuture<?> _teleportWatchdog;

	/** The Siege state of the L2PcInstance */
	private byte _siegeState = 0;

	/** The id of castle/fort which the L2PcInstance is registered for siege */
	private int _siegeSide = 0;

	private int _curWeightPenalty = 0;

	private int _lastCompassZone; // the last compass zone update send to the client

	private boolean _isIn7sDungeon = false;

	private final L2ContactList _contactList = new L2ContactList(this);

	private int _bookmarkslot = 0; // The Teleport Bookmark Slot

	private final Map<Integer, TeleportBookmark> _tpbookmarks = new ConcurrentHashMap<>();

	private boolean _canFeed;
	private boolean _isInSiege;
	private boolean _isInHideoutSiege = false;

	/** Olympiad */
	private boolean _inOlympiadMode = false;
	private boolean _OlympiadStart = false;
	private int _olympiadGameId = -1;
	private int _olympiadSide = -1;

	/** Olympiad buff count. */
	private int _olyBuffsCount = 0;

	/** Duel */
	private DuelState _duelState = DuelState.NO_DUEL;
	private int _duelId = 0;

	/** Boat and AirShip */
	private L2Vehicle _vehicle = null;
	private Location _inVehiclePosition;

	public ScheduledFuture<?> _taskforfish;
	private MountType _mountType = MountType.NONE;

	private int _mountNpcId;
	private int _mountLevel;
	/** Store object used to summon the strider you are mounting **/
	private int _mountObjectID = 0;

	public int _telemode = 0;

	private boolean _inCrystallize;
	private boolean _inCraftMode;

	private long _offlineShopStart = 0;

	private Transform _transformation;
	private volatile Map<Integer, Skill> _transformSkills;

	/** The table containing all L2RecipeList of the L2PcInstance */
	private final Map<Integer, L2RecipeList> _dwarvenRecipeBook = new ConcurrentHashMap<>();
	private final Map<Integer, L2RecipeList> _commonRecipeBook = new ConcurrentHashMap<>();

	/** Auto Pot */
	private final Map<Integer, Future<?>> _autoPotion = new ConcurrentHashMap<>();

	/** Premium Items */
	private final Map<Integer, L2PremiumItem> _premiumItems = new ConcurrentHashMap<>();

	/** True if the L2PcInstance is sitting */
	private boolean _waitTypeSitting;

	/** Location before entering Observer Mode */
	private final Location _savedLocation = new Location(0, 0, 0);
	private boolean _observerMode = false;

	/** Stored from last ValidatePosition **/
	private final Location _lastServerPosition = new Location(0, 0, 0);

	/** The number of recommendation obtained by the L2PcInstance */
	private int _recomHave;
	/** The number of recommendation that the L2PcInstance can give */
	private int _recomLeft;
	/** Recommendation Bonus task **/
	private ScheduledFuture<?> _nevitHourglassTask;
	/** Recommendation task **/
	private ScheduledFuture<?> _recoGiveTask;
	/** Recommendation Two Hours bonus **/
	private boolean _recoTwoHoursGiven = false;
	private int _recomBonusTime = 3600;

	private final NevitAdvent _nevit = new NevitAdvent(this);

	private final PcInventory _inventory = new PcInventory(this);
	private final PcFreight _freight = new PcFreight(this);
	private PcWarehouse _warehouse;
	private PcRefund _refund;

	private PrivateStoreType _privateStoreType = PrivateStoreType.NONE;

	private TradeList _activeTradeList;
	private ItemContainer _activeWarehouse;
	private volatile Map<Integer, L2ManufactureItem> _manufactureItems;
	private String _storeName = "";
	private TradeList _sellList;
	private TradeList _buyList;

	private PreparedListContainer _currentMultiSell = null;

	/** Bitmask used to keep track of one-time/newbie quest rewards */
	private int _newbie;

	private boolean _noble = false;
	private boolean _hero = false;

	/** The L2FolkInstance corresponding to the last Folk which one the player talked. */
	private L2Npc _lastFolkNpc = null;

	/** Last NPC Id talked on a quest */
	private int _questNpcObject = 0;

	/** The table containing all Quests began by the L2PcInstance */
	private final Map<String, QuestState> _quests = new ConcurrentHashMap<>();

	/** The list containing all shortCuts of this player. */
	private final ShortCuts _shortCuts = new ShortCuts(this);

	/** The list containing all macros of this player. */
	private final MacroList _macros = new MacroList(this);

	private final Set<L2PcInstance> _snoopListener = ConcurrentHashMap.newKeySet(1);
	private final Set<L2PcInstance> _snoopedPlayer = ConcurrentHashMap.newKeySet(1);

	// hennas
	private final L2Henna[] _henna = new L2Henna[3];
	private int _hennaSTR;
	private int _hennaINT;
	private int _hennaDEX;
	private int _hennaMEN;
	private int _hennaWIT;
	private int _hennaCON;

	/** The L2Summon of the L2PcInstance */
	private L2Summon _summon = null;
	/** The L2Decoy of the L2PcInstance */
	private L2Decoy _decoy = null;
	/** The L2Trap of the L2PcInstance */
	private L2TrapInstance _trap = null;
	/** The L2Agathion of the L2PcInstance */
	private int _agathionId = 0;

	private volatile Set<L2TamedBeastInstance> _tamedBeasts = null;

	private boolean _minimapAllowed = false;

	private final L2Radar _radar;

	private int _partyroom = 0;

	// Clan related attributes
	/** The Clan Identifier of the L2PcInstance */
	private int _clanId;

	/** The Clan object of the L2PcInstance */
	private L2Clan _clan;

	/** Apprentice and Sponsor IDs */
	private int _apprentice = 0;
	private int _sponsor = 0;

	private long _clanJoinExpiryTime;
	private long _clanCreateExpiryTime;

	private int _powerGrade = 0;
	private volatile EnumIntBitmask<ClanPrivilege> _clanPrivileges = new EnumIntBitmask<>(ClanPrivilege.class, false);

	/** L2PcInstance's pledge class (knight, Baron, etc.) */
	private int _pledgeClass = 0;
	private int _pledgeType = 0;

	/** Level at which the player joined the clan as an academy member */
	private int _lvlJoinedAcademy = 0;

	private int _wantsPeace = 0;

	// Death Penalty Buff Level
	private int _deathPenaltyBuffLevel = 0;

	// charges
	private final AtomicInteger _charges = new AtomicInteger();
	private ScheduledFuture<?> _chargeTask = null;

	// Absorbed Souls
	private int _souls = 0;
	private ScheduledFuture<?> _soulTask = null;

	private Location _currentSkillWorldPosition;

	private L2AccessLevel _accessLevel;

	private boolean _messageRefusal = false; // message refusal mode

	private boolean _silenceMode = false; // silence mode
	private List<Integer> _silenceModeExcluded; // silence mode
	private boolean _dietMode = false; // ignore weight penalty
	private boolean _tradeRefusal = false; // Trade refusal
	private boolean _exchangeRefusal = false; // Exchange refusal

	private L2Party _party;
	private volatile Set<Integer> _friends;
	PartyDistributionType _partyDistributionType;

	private L2PcInstance _activeRequester;
	private long _requestExpireTime = 0;
	private final L2Request _request = new L2Request(this);
	private L2ItemInstance _arrowItem;
	private L2ItemInstance _boltItem;

	private long _protectEndTime = 0;

	private L2ItemInstance _lure = null;

	public boolean isSpawnProtected()
	{
		return _protectEndTime > GameTimeController.getInstance().getGameTicks();
	}

	private long _teleportProtectEndTime = 0;

	public boolean isTeleportProtected()
	{
		return _teleportProtectEndTime > GameTimeController.getInstance().getGameTicks();
	}

	private long _recentFakeDeathEndTime = 0;
	private boolean _isFakeDeath;

	/** The fists L2Weapon of the L2PcInstance (used when no weapon is equipped) */
	private L2Weapon _fistsWeaponItem;

	private final Map<Integer, String> _chars = new LinkedHashMap<>();

	private int _expertiseArmorPenalty = 0;
	private int _expertiseWeaponPenalty = 0;
	private int _expertisePenaltyBonus = 0;

	private boolean _isEnchanting = false;
	private int _activeEnchantItemId = ID_NONE;
	private int _activeEnchantSupportItemId = ID_NONE;
	private int _activeEnchantAttrItemId = ID_NONE;
	private long _activeEnchantTimestamp = 0;

	protected boolean _inventoryDisable = false;

	/** Player's cubics. */
	private final Map<Integer, L2CubicInstance> _cubics = new ConcurrentSkipListMap<>(); // TODO(Zoey76): This should be sorted in insert order.

	/** Active shots. */
	protected Set<Integer> _activeSoulShots = ConcurrentHashMap.newKeySet(1);

	public final ReentrantLock soulShotLock = new ReentrantLock();

	private byte _handysBlockCheckerEventArena = -1;

	/** new loto ticket **/
	private final int _loto[] = new int[5];

	/** new race ticket **/
	private final int _race[] = new int[2];

	private final BlockList _blockList = new BlockList(this);

	private L2Fishing _fishCombat;
	private boolean _fishing = false;
	private int _fishx = 0;
	private int _fishy = 0;
	private int _fishz = 0;

	private ScheduledFuture<?> _taskRentPet;
	private ScheduledFuture<?> _taskWater;

	/** Last Html Npcs, 0 = last html was not bound to an npc */
	private final int[] _htmlActionOriginObjectIds = new int[HtmlActionScope.values().length];
	/**
	 * Origin of the last incoming html action request.<br>
	 * This can be used for htmls continuing the conversation with an npc.
	 */
	private int _lastHtmlActionOriginObjId;

	/** Bypass validations */
	@SuppressWarnings("unchecked")
	private final LinkedList<String>[] _htmlActionCaches = new LinkedList[HtmlActionScope.values().length];

	private Forum _forumMail;
	private Forum _forumMemo;

	/** Current skill in use. Note that L2Character has _lastSkillCast, but this has the button presses */
	private SkillUseHolder _currentSkill;
	private SkillUseHolder _currentPetSkill;

	/** Skills queued because a skill is already in progress */
	private SkillUseHolder _queuedSkill;

	private int _cursedWeaponEquippedId = 0;
	private boolean _combatFlagEquippedId = false;

	private boolean _canRevive = true;
	private boolean _revivePet = false;
	private boolean _blockingExit = false;
	private boolean _blockingPenalty = false;
	private boolean _blockingExpPenalty = false;

	private int _reviveRequested = 0;
	private double _revivePower = 0;

	/** Event */
	private boolean _forceSit = false;

	/** Vote */
	private boolean _isVoting = false;

	/** Trace */
	private boolean _isTraced = false;

	/** Captcha */
	private boolean _isCaptcha = false;

	private double _cpUpdateIncCheck = .0;
	private double _cpUpdateDecCheck = .0;
	private double _cpUpdateInterval = .0;
	private double _mpUpdateIncCheck = .0;
	private double _mpUpdateDecCheck = .0;
	private double _mpUpdateInterval = .0;

	private double _originalCp = .0;
	private double _originalHp = .0;
	private double _originalMp = .0;

	/** Char Coords from Client */
	private int _clientX;
	private int _clientY;
	private int _clientZ;
	private int _clientHeading;

	private static final int FALLING_VALIDATION_DELAY = 10000;
	private volatile long _fallingTimestamp = 0;

	private int _multiSocialTarget = 0;
	private int _multiSociaAction = 0;

	private int _movieId = 0;

	private String _adminConfirmCmd = null;

	private volatile long _lastItemAuctionInfoRequest = 0;

	private Future<?> _PvPRegTask;

	private long _pvpFlagLasts;

	private long _notMoveUntil = 0;

	/** Map containing all custom skills of this player. */
	private Map<Integer, Skill> _customSkills = null;

	private volatile int _actionMask;

	/** Visual */
	private final Visual _visual = new Visual(this);

	/** Service */
	private final Service _service = new Service(this);

	/** Donate Service */
	private final Donate _donate = new Donate(this);

	/** Killing Spree */
	private final Versus _versus = new Versus(this);

	/** Profil */
	private Profil _profil;

	/** Last Npc Html Message */
	private NpcHtmlMessage _lastNpcHtmlMessage;

	/** Scheme */
	private final Scheme _scheme = new Scheme(this);

	/** Player Counter */
	private final PlayerCounter _counter = new PlayerCounter(this);

	/** Achievement */
	private final Achievement _achievement = new Achievement(this);

	/** Sell Buff */
	private final BuffStore _buffStore = new BuffStore(this);

	/** Tournament */
	private Tournament _tournament;

	/** NetPing */
	private int _ping;

	/** Pc Point */
	private int _pcPoint;

	/** Prime Shop */
	private int _primeShopPoints;

	/** Craft Point */
	private int _craftPoint;

	/** Faction */
	private FactionPlayer _factionPlayer;

	/** Scheduled Tasks */
	private final Map<Class<?>, List<Future<?>>> _scheduledTasks = new ConcurrentHashMap<>();

	/** Auto Farm */
	public final Farm _farm = new Farm(this);

	/** Daily PlayerMission */
	public final PlayerMission _mission = new PlayerMission(this);

	/** Experience Collector */
	private int _experienceCollectorObjectId;

	/** Automatic Enchant */
	private boolean _isAutoEnchanting;

	/** Fake Store */
	private boolean _isFakeStore;

	/**
	 * Creates a player.
	 *
	 * @param objectId    the object ID
	 * @param template    the player template
	 * @param accountName the account name
	 * @param app         the player appearance
	 */
	protected L2PcInstance(final int objectId, final L2PcTemplate template, final String accountName, final PcAppearance app)
	{
		super(objectId, template);
		setInstanceType(InstanceType.L2PcInstance);

		super.initCharStatusUpdateValues();
		initPcStatusUpdateValues();

		for (int i = 0; i < _htmlActionCaches.length; ++i)
		{
			_htmlActionCaches[i] = new LinkedList<>();
		}

		_accountName = accountName;

		app.setOwner(this);
		_appearance = app;

		getAI();

		_radar = new L2Radar(this);

		startVitalityTask();

		Formulas.addFuncsToNewPlayer(this);
	}

	/**
	 * Creates a player.
	 *
	 * @param template    the player template
	 * @param accountName the account name
	 * @param app         the player appearance
	 */
	// TODO edit back to protected
	public L2PcInstance(final L2PcTemplate template, final String accountName, final PcAppearance app)
	{
		this(IdFactory.getInstance().getNextId(), template, accountName, app);
	}

	public void setPvpFlagLasts(final long time)
	{
		_pvpFlagLasts = time;
	}

	public long getPvpFlagLasts()
	{
		return _pvpFlagLasts;
	}

	public void startPvPFlag()
	{
		updatePvPFlag(1);

		if (_PvPRegTask == null)
		{
			_PvPRegTask = ThreadPoolManager.getInstance().scheduleGeneralAtFixedRate(new PvPFlagTask(this), 1000, 1000);
		}
	}

	public void stopPvpRegTask()
	{
		if (_PvPRegTask != null)
		{
			_PvPRegTask.cancel(true);
			_PvPRegTask = null;
		}
	}

	public void stopPvPFlag()
	{
		stopPvpRegTask();

		updatePvPFlag(0);

		_PvPRegTask = null;
	}

	// Character UI
	private UIKeysSettings _uiKeySettings;

	// L2JMOD Wedding
	private boolean _married = false;
	private int _partnerId = 0;
	private int _coupleId = 0;
	private boolean _engagerequest = false;
	private int _engageid = 0;
	private boolean _marryrequest = false;
	private boolean _marryaccepted = false;

	// Save responder name for log it
	private String _lastPetitionGmName = null;

	private boolean _hasCharmOfCourage = false;

	/**
	 * Create a new L2PcInstance and add it in the characters table of the database.<br>
	 * <B><U> Actions</U> :</B>
	 * <ul>
	 * <li>Create a new L2PcInstance with an account name</li>
	 * <li>Set the name, the Hair Style, the Hair Color and the Face type of the L2PcInstance</li>
	 * <li>Add the player in the characters table of the database</li>
	 * </ul>
	 *
	 * @param template    The L2PcTemplate to apply to the L2PcInstance
	 * @param accountName The name of the L2PcInstance
	 * @param name        The name of the L2PcInstance
	 * @param app         the player's appearance
	 * @return The L2PcInstance added to the database or null
	 */
	public static L2PcInstance create(final L2PcTemplate template, final String accountName, final String name, final PcAppearance app)
	{
		// Create a new L2PcInstance with an account name
		final L2PcInstance player = new L2PcInstance(template, accountName, app);
		// Set the name of the L2PcInstance
		player.setName(name);
		// Set Character's create time
		player.setCreateDate(Calendar.getInstance());
		// Set the base class ID to that of the actual class ID.
		player.setBaseClass(player.getClassId());
		// Kept for backwards compatibility.
		player.setNewbie(1);
		// Give 20 recommendations
		player.setRecomLeft(20);
		// Add the player in the characters table of the database
		return player.createDb() ? player : null;
	}

	public String getAccountName()
	{
		if (getClient() == null)
		{
			return getAccountNamePlayer();
		}

		return getClient().getAccountName();
	}

	public String getAccountNamePlayer()
	{
		return _accountName;
	}

	public Map<Integer, String> getAccountChars()
	{
		return _chars;
	}

	public int getRelation(final L2PcInstance target)
	{
		int result = 0;

		if (getClan() != null)
		{
			result |= RelationChanged.RELATION_CLAN_MEMBER;

			if (getClan() == target.getClan())
			{
				result |= RelationChanged.RELATION_CLAN_MATE;
			}

			if (getAllyId() != 0)
			{
				result |= RelationChanged.RELATION_ALLY_MEMBER;
			}
		}

		if (isClanLeader())
		{
			result |= RelationChanged.RELATION_LEADER;
		}

		if (getParty() != null && getParty() == target.getParty())
		{
			result |= RelationChanged.RELATION_HAS_PARTY;

			for (int i = 0; i < getParty().getMembers().size(); i++)
			{
				if (getParty().getMembers().get(i) != this)
				{
					continue;
				}

				switch (i)
				{
					case 0:
						result |= RelationChanged.RELATION_PARTYLEADER; // 0x10
						break;
					case 1:
						result |= RelationChanged.RELATION_PARTY4; // 0x8
						break;
					case 2:
						result |= RelationChanged.RELATION_PARTY3 + RelationChanged.RELATION_PARTY2 + RelationChanged.RELATION_PARTY1; // 0x7
						break;
					case 3:
						result |= RelationChanged.RELATION_PARTY3 + RelationChanged.RELATION_PARTY2; // 0x6
						break;
					case 4:
						result |= RelationChanged.RELATION_PARTY3 + RelationChanged.RELATION_PARTY1; // 0x5
						break;
					case 5:
						result |= RelationChanged.RELATION_PARTY3; // 0x4
						break;
					case 6:
						result |= RelationChanged.RELATION_PARTY2 + RelationChanged.RELATION_PARTY1; // 0x3
						break;
					case 7:
						result |= RelationChanged.RELATION_PARTY2; // 0x2
						break;
					case 8:
						result |= RelationChanged.RELATION_PARTY1; // 0x1
						break;
				}
			}
		}

		if (getSiegeState() != 0)
		{
			if (TerritoryWarManager.getInstance().getRegisteredTerritoryId(this) != 0)
			{
				result |= RelationChanged.RELATION_TERRITORY_WAR;
			}
			else
			{
				result |= RelationChanged.RELATION_INSIEGE;

				if (getSiegeState() != target.getSiegeState())
				{
					result |= RelationChanged.RELATION_ENEMY;
				}
				else
				{
					result |= RelationChanged.RELATION_ALLY;
				}

				if (getSiegeState() == 1)
				{
					result |= RelationChanged.RELATION_ATTACKER;
				}
			}
		}

		if (getClan() != null && target.getClan() != null)
		{
			if (target.getPledgeType() != L2Clan.SUBUNIT_ACADEMY && getPledgeType() != L2Clan.SUBUNIT_ACADEMY && target.getClan().isAtWarWith(getClan().getId()))
			{
				result |= RelationChanged.RELATION_1SIDED_WAR;

				if (getClan().isAtWarWith(target.getClan().getId()))
				{
					result |= RelationChanged.RELATION_MUTUAL_WAR;
				}
			}
		}

		if (getBlockCheckerArena() != -1)
		{
			result |= RelationChanged.RELATION_INSIEGE;

			final ArenaParticipantsHolder holder = HandysBlockCheckerManager.getInstance().getHolder(getBlockCheckerArena());

			if (holder.getPlayerTeam(this) == 0)
			{
				result |= RelationChanged.RELATION_ENEMY;
			}
			else
			{
				result |= RelationChanged.RELATION_ALLY;
			}

			result |= RelationChanged.RELATION_ATTACKER;
		}

		return result;
	}

	/**
	 * Retrieve a L2PcInstance from the characters table of the database and add it in _allObjects of the L2world (call restore method).<br>
	 * <B><U> Actions</U> :</B>
	 * <ul>
	 * <li>Retrieve the L2PcInstance from the characters table of the database</li>
	 * <li>Add the L2PcInstance object in _allObjects</li>
	 * <li>Set the x,y,z position of the L2PcInstance and make it invisible</li>
	 * <li>Update the overloaded status of the L2PcInstance</li>
	 * </ul>
	 *
	 * @param objectId Identifier of the object to initialized
	 * @return The L2PcInstance loaded from the database
	 */
	public static L2PcInstance load(final int objectId)
	{
		return restore(objectId);
	}

	private void initPcStatusUpdateValues()
	{
		_cpUpdateInterval = getMaxCp() / 352.0;
		_cpUpdateIncCheck = getMaxCp();
		_cpUpdateDecCheck = getMaxCp() - _cpUpdateInterval;
		_mpUpdateInterval = getMaxMp() / 352.0;
		_mpUpdateIncCheck = getMaxMp();
		_mpUpdateDecCheck = getMaxMp() - _mpUpdateInterval;
	}

	@Override
	public final PcKnownList getKnownList()
	{
		return (PcKnownList) super.getKnownList();
	}

	@Override
	public void initKnownList()
	{
		setKnownList(new PcKnownList(this));
	}

	@Override
	public final PcStat getStat()
	{
		return (PcStat) super.getStat();
	}

	@Override
	public void initCharStat()
	{
		setStat(new PcStat(this));
	}

	@Override
	public final PcStatus getStatus()
	{
		return (PcStatus) super.getStatus();
	}

	@Override
	public void initCharStatus()
	{
		setStatus(new PcStatus(this));
	}

	public final PcAppearance getAppearance()
	{
		return _appearance;
	}

	public final L2PcTemplate getBaseTemplate()
	{
		return PlayerTemplateData.getInstance().getTemplate(_baseClass);
	}

	@Override
	public final L2PcTemplate getTemplate()
	{
		return (L2PcTemplate) super.getTemplate();
	}

	/**
	 * @param newclass
	 */
	public void setTemplate(final ClassId newclass)
	{
		super.setTemplate(PlayerTemplateData.getInstance().getTemplate(newclass));
	}

	@Override
	protected L2CharacterAI initAI()
	{
		return new L2PlayerAI(this);
	}

	@Override
	public final int getLevel()
	{
		return getStat().getLevel();
	}

	@Override
	public double getLevelMod()
	{
		if (isTransformed())
		{
			final double levelMod = getTransformation().getLevelMod(this);

			if (levelMod > -1)
			{
				return levelMod;
			}
		}

		return super.getLevelMod();
	}

	/**
	 * @return the _newbie rewards state of the L2PcInstance.
	 */
	public int getNewbie()
	{
		return _newbie;
	}

	/**
	 * Set the _newbie rewards state of the L2PcInstance.
	 *
	 * @param newbieRewards The Identifier of the _newbie state
	 */
	public void setNewbie(final int newbieRewards)
	{
		_newbie = newbieRewards;
	}

	public void setBaseClass(final int baseClass)
	{
		_baseClass = baseClass;
	}

	public void setBaseClass(final ClassId classId)
	{
		_baseClass = classId.ordinal();
	}

	public boolean isInStoreMode()
	{
		return getPrivateStoreType() != PrivateStoreType.NONE;
	}

	public boolean isInCraftMode()
	{
		return _inCraftMode;
	}

	public void isInCraftMode(final boolean b)
	{
		_inCraftMode = b;
	}

	/**
	 * Manage Logout Task:
	 * <ul>
	 * <li>Remove player from world</li>
	 * <li>Save player data into DB</li>
	 * </ul>
	 */
	public void logout()
	{
		logout(true);
	}

	/**
	 * Manage Logout Task:
	 * <ul>
	 * <li>Remove player from world</li>
	 * <li>Save player data into DB</li>
	 * </ul>
	 *
	 * @param closeClient
	 */
	public void logout(final boolean closeClient)
	{
		try
		{
			closeNetConnection(closeClient);
		}
		catch (final Exception e)
		{
			_log.log(Level.WARNING, "Exception on logout(): " + e.getMessage(), e);
		}
	}

	/**
	 * @return a table containing all Common L2RecipeList of the L2PcInstance.
	 */
	public L2RecipeList[] getCommonRecipeBook()
	{
		return _commonRecipeBook.values().toArray(new L2RecipeList[_commonRecipeBook.size()]);
	}

	/**
	 * @return a table containing all Dwarf L2RecipeList of the L2PcInstance.
	 */
	public L2RecipeList[] getDwarvenRecipeBook()
	{
		return _dwarvenRecipeBook.values().toArray(new L2RecipeList[_dwarvenRecipeBook.size()]);
	}

	/**
	 * Add a new L2RecipList to the table _commonrecipebook containing all L2RecipeList of the L2PcInstance
	 *
	 * @param recipe   The L2RecipeList to add to the _recipebook
	 * @param saveToDb
	 */
	public void registerCommonRecipeList(final L2RecipeList recipe, final boolean saveToDb)
	{
		_commonRecipeBook.put(recipe.getId(), recipe);

		if (saveToDb)
		{
			insertNewRecipeData(recipe.getId(), false);
		}
	}

	/**
	 * Add a new L2RecipList to the table _recipebook containing all L2RecipeList of the L2PcInstance
	 *
	 * @param recipe   The L2RecipeList to add to the _recipebook
	 * @param saveToDb
	 */
	public void registerDwarvenRecipeList(final L2RecipeList recipe, final boolean saveToDb)
	{
		_dwarvenRecipeBook.put(recipe.getId(), recipe);

		if (saveToDb)
		{
			insertNewRecipeData(recipe.getId(), true);
		}
	}

	/**
	 * @param recipeId The Identifier of the L2RecipeList to check in the player's recipe books
	 * @return {@code true}if player has the recipe on Common or Dwarven Recipe book else returns {@code false}
	 */
	public boolean hasRecipeList(final int recipeId)
	{
		return _dwarvenRecipeBook.containsKey(recipeId) || _commonRecipeBook.containsKey(recipeId);
	}

	/**
	 * Tries to remove a L2RecipList from the table _DwarvenRecipeBook or from table _CommonRecipeBook, those table contain all L2RecipeList of the L2PcInstance
	 *
	 * @param recipeId The Identifier of the L2RecipeList to remove from the _recipebook
	 */
	public void unregisterRecipeList(final int recipeId)
	{
		if (_dwarvenRecipeBook.remove(recipeId) != null)
		{
			deleteRecipeData(recipeId, true);
		}
		else if (_commonRecipeBook.remove(recipeId) != null)
		{
			deleteRecipeData(recipeId, false);
		}
		else
		{
			_log.warning("Attempted to remove unknown RecipeList: " + recipeId);
		}

		for (final Shortcut sc : getAllShortCuts())
		{
			if (sc != null && sc.getId() == recipeId && sc.getType() == ShortcutType.RECIPE)
			{
				deleteShortCut(sc.getSlot(), sc.getPage());
			}
		}
	}

	private void insertNewRecipeData(final int recipeId, final boolean isDwarf)
	{
		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement("INSERT INTO character_recipebook (charId, id, classIndex, type) values(?,?,?,?)"))
		{
			statement.setInt(1, getObjectId());
			statement.setInt(2, recipeId);
			statement.setInt(3, isDwarf ? _classIndex : 0);
			statement.setInt(4, isDwarf ? 1 : 0);
			statement.execute();
		}
		catch (final SQLException e)
		{
			_log.log(Level.WARNING, "SQL exception while inserting recipe: " + recipeId + " from character " + getObjectId(), e);
		}
	}

	private void deleteRecipeData(final int recipeId, final boolean isDwarf)
	{
		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement("DELETE FROM character_recipebook WHERE charId=? AND id=? AND classIndex=?"))
		{
			statement.setInt(1, getObjectId());
			statement.setInt(2, recipeId);
			statement.setInt(3, isDwarf ? _classIndex : 0);
			statement.execute();
		}
		catch (final SQLException e)
		{
			_log.log(Level.WARNING, "SQL exception while deleting recipe: " + recipeId + " from character " + getObjectId(), e);
		}
	}

	/**
	 * @return the Id for the last talked quest NPC.
	 */
	public int getLastQuestNpcObject()
	{
		return _questNpcObject;
	}

	public void setLastQuestNpcObject(final int npcId)
	{
		_questNpcObject = npcId;
	}

	/**
	 * @param quest The name of the quest
	 * @return the QuestState object corresponding to the quest name.
	 */
	public QuestState getQuestState(final String quest)
	{
		return _quests.get(quest);
	}

	/**
	 * Add a QuestState to the table _quest containing all quests began by the L2PcInstance.
	 *
	 * @param qs The QuestState to add to _quest
	 */
	public void setQuestState(final QuestState qs)
	{
		_quests.put(qs.getQuestName(), qs);
	}

	/**
	 * Verify if the player has the quest state.
	 *
	 * @param quest the quest state to check
	 * @return {@code true} if the player has the quest state, {@code false} otherwise
	 */
	public boolean hasQuestState(final String quest)
	{
		return _quests.containsKey(quest);
	}

	/**
	 * Verify if this player has completed the given quest.
	 *
	 * @param quest to check if its completed or not.
	 * @return {@code true} if the player has completed the given quest, {@code false} otherwise.
	 */
	public boolean hasQuestCompleted(final String quest)
	{
		final QuestState qs = _quests.get(quest);
		return qs != null && qs.isCompleted();
	}

	/**
	 * Remove a QuestState from the table _quest containing all quests began by the L2PcInstance.
	 *
	 * @param quest The name of the quest
	 */
	public void delQuestState(final String quest)
	{
		_quests.remove(quest);
	}

	/**
	 * @return a table containing all Quest in progress from the table _quests.
	 */
	public Quest[] getAllActiveQuests()
	{
		final List<Quest> quests = new ArrayList<>();

		for (final QuestState qs : _quests.values())
		{
			if (qs == null || qs.getQuest() == null || !qs.isStarted() && !Config.DEVELOPER)
			{
				continue;
			}

			final int questId = qs.getQuest().getId();

			if (questId > 19999 || questId < 1)
			{
				continue;
			}

			quests.add(qs.getQuest());
		}

		return quests.toArray(new Quest[quests.size()]);
	}

	public void processQuestEvent(final String questName, final String event)
	{
		final Quest quest = QuestManager.getInstance().getQuest(questName);

		if (quest == null || event == null || event.isEmpty())
		{
			return;
		}

		if (getLastQuestNpcObject() > 0)
		{
			final L2Object object = L2World.getInstance().findObject(getLastQuestNpcObject());

			if (object.isNpc() && isInsideRadius(object, L2Npc.INTERACTION_DISTANCE, false, false))
			{
				final L2Npc npc = (L2Npc) object;
				quest.notifyEvent(event, npc, this);
			}
		}
	}

	/** List of all QuestState instance that needs to be notified of this L2PcInstance's or its pet's death */
	private volatile List<QuestState> _notifyQuestOfDeathList;

	/**
	 * Add QuestState instance that is to be notified of L2PcInstance's death.
	 *
	 * @param qs The QuestState that subscribe to this event
	 */
	public void addNotifyQuestOfDeath(final QuestState qs)
	{
		if (qs == null)
		{
			return;
		}

		if (!getNotifyQuestOfDeath().contains(qs))
		{
			getNotifyQuestOfDeath().add(qs);
		}
	}

	/**
	 * Remove QuestState instance that is to be notified of L2PcInstance's death.
	 *
	 * @param qs The QuestState that subscribe to this event
	 */
	public void removeNotifyQuestOfDeath(final QuestState qs)
	{
		if (qs == null || _notifyQuestOfDeathList == null)
		{
			return;
		}

		_notifyQuestOfDeathList.remove(qs);
	}

	/**
	 * @return a list of QuestStates which registered for notify of death of this L2PcInstance.
	 */
	public final List<QuestState> getNotifyQuestOfDeath()
	{
		if (_notifyQuestOfDeathList == null)
		{
			synchronized (this)
			{
				if (_notifyQuestOfDeathList == null)
				{
					_notifyQuestOfDeathList = new CopyOnWriteArrayList<>();
				}
			}
		}

		return _notifyQuestOfDeathList;
	}

	public final boolean isNotifyQuestOfDeathEmpty()
	{
		return _notifyQuestOfDeathList == null || _notifyQuestOfDeathList.isEmpty();
	}

	/**
	 * @return a table containing all L2ShortCut of the L2PcInstance.
	 */
	public Shortcut[] getAllShortCuts()
	{
		return _shortCuts.getAllShortCuts();
	}

	/**
	 * @param slot The slot in which the shortCuts is equipped
	 * @param page The page of shortCuts containing the slot
	 * @return the L2ShortCut of the L2PcInstance corresponding to the position (page-slot).
	 */
	public Shortcut getShortCut(final int slot, final int page)
	{
		return _shortCuts.getShortCut(slot, page);
	}

	/**
	 * Add a L2shortCut to the L2PcInstance _shortCuts
	 *
	 * @param shortcut
	 */
	public void registerShortCut(final Shortcut shortcut)
	{
		_shortCuts.registerShortCut(shortcut);
	}

	/**
	 * Updates the shortcut bars with the new skill.
	 *
	 * @param skillId    the skill Id to search and update.
	 * @param skillLevel the skill level to update.
	 */
	public void updateShortCuts(final int skillId, final int skillLevel)
	{
		_shortCuts.updateShortCuts(skillId, skillLevel);
	}

	/**
	 * Delete the L2ShortCut corresponding to the position (page-slot) from the L2PcInstance _shortCuts.
	 *
	 * @param slot
	 * @param page
	 */
	public void deleteShortCut(final int slot, final int page)
	{
		_shortCuts.deleteShortCut(slot, page);
	}

	/**
	 * @param macro the macro to add to this L2PcInstance.
	 */
	public void registerMacro(final Macro macro)
	{
		_macros.registerMacro(macro);
	}

	/**
	 * @param id the macro Id to delete.
	 */
	public void deleteMacro(final int id)
	{
		_macros.deleteMacro(id);
	}

	/**
	 * @return all L2Macro of the L2PcInstance.
	 */
	public MacroList getMacros()
	{
		return _macros;
	}

	/**
	 * Set the siege state of the L2PcInstance.
	 *
	 * @param siegeState 1 = attacker, 2 = defender, 0 = not involved
	 */
	public void setSiegeState(final byte siegeState)
	{
		_siegeState = siegeState;
	}

	/**
	 * Get the siege state of the L2PcInstance.
	 *
	 * @return 1 = attacker, 2 = defender, 0 = not involved
	 */
	@Override
	public byte getSiegeState()
	{
		return _siegeState;
	}

	/**
	 * Set the siege Side of the L2PcInstance.
	 *
	 * @param val
	 */
	public void setSiegeSide(final int val)
	{
		_siegeSide = val;
	}

	public boolean isRegisteredOnThisSiegeField(final int val)
	{
		if (_siegeSide != val && (_siegeSide < 81 || _siegeSide > 89))
		{
			return false;
		}

		return true;
	}

	@Override
	public int getSiegeSide()
	{
		return _siegeSide;
	}

	/**
	 * Set the PvP Flag of the L2PcInstance.
	 *
	 * @param pvpFlag
	 */
	public void setPvpFlag(final int pvpFlag)
	{
		_pvpFlag = (byte) pvpFlag;
	}

	@Override
	public byte getPvpFlag()
	{
		return _pvpFlag;
	}

	@Override
	public void updatePvPFlag(final int value)
	{
		if (getPvpFlag() == value)
		{
			return;
		}

		setPvpFlag(value);

		sendPacket(new UserInfo(this));
		sendPacket(new ExBrExtraUserInfo(this));

		if (hasSummon())
		{
			sendPacket(new RelationChanged(getSummon(), getRelation(this), false));
		}

		for (final L2PcInstance target : getKnownList().getKnownPlayers().values())
		{
			target.sendPacket(new RelationChanged(this, getRelation(target), isAutoAttackable(target)));

			if (hasSummon())
			{
				target.sendPacket(new RelationChanged(getSummon(), getRelation(target), isAutoAttackable(target)));
			}
		}
	}

	@Override
	public void revalidateZone(final boolean force)
	{
		if (getWorldRegion() == null)
		{
			return;
		}

		if (force)
		{
			_zoneValidateCounter = 4;
		}
		else
		{
			_zoneValidateCounter--;

			if (_zoneValidateCounter < 0)
			{
				_zoneValidateCounter = 4;
			}
			else
			{
				return;
			}
		}

		getWorldRegion().revalidateZones(this);

		if (Config.ALLOW_WATER)
		{
			checkWaterState();
		}

		if (isInsideZone(ZoneId.ALTERED))
		{
			if (_lastCompassZone == ExSetCompassZoneCode.ALTEREDZONE)
			{
				return;
			}

			_lastCompassZone = ExSetCompassZoneCode.ALTEREDZONE;

			sendPacket(new ExSetCompassZoneCode(ExSetCompassZoneCode.ALTEREDZONE));
		}
		else if (isInsideZone(ZoneId.SIEGE))
		{
			if (_lastCompassZone == ExSetCompassZoneCode.SIEGEWARZONE2)
			{
				return;
			}

			_lastCompassZone = ExSetCompassZoneCode.SIEGEWARZONE2;

			sendPacket(new ExSetCompassZoneCode(ExSetCompassZoneCode.SIEGEWARZONE2));
		}
		else if (isInsideZone(ZoneId.PVP))
		{
			if (_lastCompassZone == ExSetCompassZoneCode.PVPZONE)
			{
				return;
			}

			_lastCompassZone = ExSetCompassZoneCode.PVPZONE;

			sendPacket(new ExSetCompassZoneCode(ExSetCompassZoneCode.PVPZONE));
		}
		else if (isIn7sDungeon())
		{
			if (_lastCompassZone == ExSetCompassZoneCode.SEVENSIGNSZONE)
			{
				return;
			}

			_lastCompassZone = ExSetCompassZoneCode.SEVENSIGNSZONE;

			sendPacket(new ExSetCompassZoneCode(ExSetCompassZoneCode.SEVENSIGNSZONE));
		}
		else if (isInsideZone(ZoneId.PEACE))
		{
			if (_lastCompassZone == ExSetCompassZoneCode.PEACEZONE)
			{
				return;
			}

			_lastCompassZone = ExSetCompassZoneCode.PEACEZONE;

			sendPacket(new ExSetCompassZoneCode(ExSetCompassZoneCode.PEACEZONE));
		}
		else
		{
			if (_lastCompassZone == ExSetCompassZoneCode.GENERALZONE)
			{
				return;
			}

			if (_lastCompassZone == ExSetCompassZoneCode.SIEGEWARZONE2)
			{
				updatePvPStatus();
			}

			_lastCompassZone = ExSetCompassZoneCode.GENERALZONE;

			sendPacket(new ExSetCompassZoneCode(ExSetCompassZoneCode.GENERALZONE));
		}
	}

	/**
	 * @return True if the L2PcInstance can Craft Dwarven Recipes.
	 */
	public boolean hasDwarvenCraft()
	{
		return getSkillLevel(CommonSkill.CREATE_DWARVEN.getId()) >= 1;
	}

	public int getDwarvenCraft()
	{
		return getSkillLevel(CommonSkill.CREATE_DWARVEN.getId());
	}

	/**
	 * @return True if the L2PcInstance can Craft Dwarven Recipes.
	 */
	public boolean hasCommonCraft()
	{
		return getSkillLevel(CommonSkill.CREATE_COMMON.getId()) >= 1;
	}

	public int getCommonCraft()
	{
		return getSkillLevel(CommonSkill.CREATE_COMMON.getId());
	}

	/**
	 * @return the PK counter of the L2PcInstance.
	 */
	public int getPkKills()
	{
		return _pkKills;
	}

	/**
	 * Set the PK counter of the L2PcInstance.
	 *
	 * @param pkKills
	 */
	public void setPkKills(final int pkKills)
	{
		EventDispatcher.getInstance().notifyEventAsync(new OnPlayerPKChanged(this, _pkKills, pkKills), this);
		_pkKills = pkKills;
	}

	/**
	 * @return the _deleteTimer of the L2PcInstance.
	 */
	public long getDeleteTimer()
	{
		return _deleteTimer;
	}

	/**
	 * Set the _deleteTimer of the L2PcInstance.
	 *
	 * @param deleteTimer
	 */
	public void setDeleteTimer(final long deleteTimer)
	{
		_deleteTimer = deleteTimer;
	}

	/**
	 * @return the number of recommendation obtained by the L2PcInstance.
	 */
	public int getRecomHave()
	{
		return 0;
		// return _recomHave;
	}

	/**
	 * Increment the number of recommendation obtained by the L2PcInstance (Max : 255).
	 */
	protected void incRecomHave()
	{
		if (_recomHave < 255)
		{
			_recomHave++;
		}
	}

	/**
	 * Set the number of recommendation obtained by the L2PcInstance (Max : 255).
	 *
	 * @param value
	 */
	public void setRecomHave(final int value)
	{
		_recomHave = Math.min(Math.max(value, 0), 255);
	}

	/**
	 * Set the number of recommendation obtained by the L2PcInstance (Max : 255).
	 *
	 * @param value
	 */
	public void setRecomLeft(final int value)
	{
		_recomLeft = Math.min(Math.max(value, 0), 255);
	}

	/**
	 * @return the number of recommendation that the L2PcInstance can give.
	 */
	public int getRecomLeft()
	{
		return _recomLeft;
	}

	/**
	 * Increment the number of recommendation that the L2PcInstance can give.
	 */
	protected void decRecomLeft()
	{
		if (_recomLeft > 0)
		{
			_recomLeft--;
		}
	}

	public void giveRecom(final L2PcInstance target)
	{
		target.incRecomHave();
		decRecomLeft();
	}

	/**
	 * Set the exp of the L2PcInstance before a death
	 *
	 * @param exp
	 */
	public void setExpBeforeDeath(final long exp)
	{
		_expBeforeDeath = exp;
	}

	public long getExpBeforeDeath()
	{
		return _expBeforeDeath;
	}

	/**
	 * Return the Karma of the L2PcInstance.
	 */
	@Override
	public int getKarma()
	{
		return _karma;
	}

	/**
	 * Set the Karma of the L2PcInstance and send a Server->Client packet StatusUpdate (broadcast).
	 *
	 * @param karma
	 */
	public void setKarma(int karma)
	{
		EventDispatcher.getInstance().notifyEventAsync(new OnPlayerKarmaChanged(this, getKarma(), karma), this);

		if (karma < 0)
		{
			karma = 0;
		}

		if (karma > 0)
		{
			getCounter().addCounter(CounterType.KARMA, karma);
		}

		if (_karma == 0 && karma > 0)
		{
			for (final L2Object object : getKnownList().getKnownObjects().values())
			{
				if (!(object instanceof L2GuardInstance))
				{
					continue;
				}

				if (((L2GuardInstance) object).getAI().getIntention() == CtrlIntention.AI_INTENTION_IDLE)
				{
					((L2GuardInstance) object).getAI().setIntention(CtrlIntention.AI_INTENTION_ACTIVE, null);
				}
			}
		}
		else if (_karma > 0 && karma == 0)
		{
			setKarmaFlag(0);
		}

		_karma = karma;
		broadcastKarma();
	}

	public int getExpertiseArmorPenalty()
	{
		return _expertiseArmorPenalty;
	}

	public int getExpertiseWeaponPenalty()
	{
		return _expertiseWeaponPenalty;
	}

	public int getExpertisePenaltyBonus()
	{
		return _expertisePenaltyBonus;
	}

	public void setExpertisePenaltyBonus(final int bonus)
	{
		_expertisePenaltyBonus = bonus;
	}

	public int getWeightPenalty()
	{
		if (_dietMode)
		{
			return 0;
		}

		return _curWeightPenalty;
	}

	/**
	 * Update the overloaded status of the L2PcInstance.
	 */
	public void refreshOverloaded()
	{
		final int maxLoad = getMaxLoad();

		if (maxLoad > 0)
		{
			final long weightproc = (getCurrentLoad() - getBonusWeightPenalty()) * 1000 / getMaxLoad();
			int newWeightPenalty;

			if (weightproc < 500 || _dietMode)
			{
				newWeightPenalty = 0;
			}
			else if (weightproc < 666)
			{
				newWeightPenalty = 1;
			}
			else if (weightproc < 800)
			{
				newWeightPenalty = 2;
			}
			else if (weightproc < 1000)
			{
				newWeightPenalty = 3;
			}
			else
			{
				newWeightPenalty = 4;
			}

			if (_curWeightPenalty != newWeightPenalty)
			{
				_curWeightPenalty = newWeightPenalty;

				if (newWeightPenalty > 0 && !_dietMode)
				{
					addSkill(SkillData.getInstance().getSkill(4270, newWeightPenalty));
					setIsOverloaded(getCurrentLoad() > maxLoad);
				}
				else
				{
					removeSkill(getKnownSkill(4270), false, true);
					setIsOverloaded(false);
				}

				sendPacket(new UserInfo(this));
				sendPacket(new EtcStatusUpdate(this));

				broadcastPacket(new CharInfo(this));
				broadcastPacket(new ExBrExtraUserInfo(this));
			}
		}
	}

	public void refreshExpertisePenalty()
	{
		if (!Config.EXPERTISE_PENALTY)
		{
			return;
		}

		final int expertiseLevel = getExpertiseLevel();

		int armorPenalty = 0;
		int weaponPenalty = 0;
		int crystaltype;

		for (final L2ItemInstance item : getInventory().getItems())
		{
			if (item != null && item.isEquipped() && item.getItemType() != EtcItemType.ARROW && item.getItemType() != EtcItemType.BOLT)
			{
				crystaltype = item.getItem().getCrystalType().getId();

				if (crystaltype > expertiseLevel)
				{
					if (item.isWeapon() && crystaltype > weaponPenalty)
					{
						weaponPenalty = crystaltype;
					}
					else if (crystaltype > armorPenalty)
					{
						armorPenalty = crystaltype;
					}
				}
			}
		}

		boolean changed = false;
		final int bonus = getExpertisePenaltyBonus();

		weaponPenalty = weaponPenalty - expertiseLevel - bonus;
		weaponPenalty = Math.min(Math.max(weaponPenalty, 0), 4);

		if (getExpertiseWeaponPenalty() != weaponPenalty || getSkillLevel(CommonSkill.WEAPON_GRADE_PENALTY.getId()) != weaponPenalty)
		{
			_expertiseWeaponPenalty = weaponPenalty;

			if (_expertiseWeaponPenalty > 0)
			{
				addSkill(SkillData.getInstance().getSkill(CommonSkill.WEAPON_GRADE_PENALTY.getId(), _expertiseWeaponPenalty));
			}
			else
			{
				removeSkill(getKnownSkill(CommonSkill.WEAPON_GRADE_PENALTY.getId()), false, true);
			}

			changed = true;
		}

		armorPenalty = armorPenalty - expertiseLevel - bonus;
		armorPenalty = Math.min(Math.max(armorPenalty, 0), 4);

		if (getExpertiseArmorPenalty() != armorPenalty || getSkillLevel(CommonSkill.ARMOR_GRADE_PENALTY.getId()) != armorPenalty)
		{
			_expertiseArmorPenalty = armorPenalty;

			if (_expertiseArmorPenalty > 0)
			{
				addSkill(SkillData.getInstance().getSkill(CommonSkill.ARMOR_GRADE_PENALTY.getId(), _expertiseArmorPenalty));
			}
			else
			{
				removeSkill(getKnownSkill(CommonSkill.ARMOR_GRADE_PENALTY.getId()), false, true);
			}

			changed = true;
		}

		if (changed)
		{
			sendPacket(new EtcStatusUpdate(this));
		}
	}

	public void useEquippableItem(final int objectId, final boolean abortAttack)
	{
		final L2ItemInstance item = getInventory().getItemByObjectId(objectId);

		if (item == null)
		{
			return;
		}

		L2ItemInstance[] items = null;

		final boolean isEquiped = item.isEquipped();
		final int oldInvLimit = getInventoryLimit();

		SystemMessage sm = null;

		if (isEquiped)
		{
			if (item.getEnchantLevel() > 0)
			{
				sm = SystemMessage.getSystemMessage(SystemMessageId.EQUIPMENT_S1_S2_REMOVED);
				sm.addInt(item.getEnchantLevel());
				sm.addItemName(item);
			}
			else
			{
				sm = SystemMessage.getSystemMessage(SystemMessageId.S1_DISARMED);
				sm.addItemName(item);
			}

			sendPacket(sm);

			final int slot = getInventory().getSlotFromItem(item);

			if (slot == L2Item.SLOT_DECO)
			{
				items = getInventory().unEquipItemInSlotAndRecord(item.getLocationSlot());
			}
			else
			{
				items = getInventory().unEquipItemInBodySlotAndRecord(slot);
			}
		}
		else
		{
			items = getInventory().equipItemAndRecord(item);

			if (item.isEquipped())
			{
				if (item.getEnchantLevel() > 0)
				{
					sm = SystemMessage.getSystemMessage(SystemMessageId.S1_S2_EQUIPPED);
					sm.addInt(item.getEnchantLevel());
					sm.addItemName(item);
				}
				else
				{
					sm = SystemMessage.getSystemMessage(SystemMessageId.S1_EQUIPPED);
					sm.addItemName(item);
				}

				sendPacket(sm);

				item.decreaseMana(false);

				if ((item.getItem().getBodyPart() & L2Item.SLOT_MULTI_ALLWEAPON) != 0)
				{
					rechargeShots(true, true);
				}
			}
			else
			{
				sendPacket(SystemMessageId.CANNOT_EQUIP_ITEM_DUE_TO_BAD_CONDITION);
			}
		}

		refreshExpertisePenalty();

		broadcastUserInfo();

		final InventoryUpdate iu = new InventoryUpdate();
		iu.addItems(Arrays.asList(items));
		sendPacket(iu);

		if (abortAttack)
		{
			abortAttack();
		}

		if (getInventoryLimit() != oldInvLimit)
		{
			sendPacket(new ExStorageMaxCount(this));
		}

		final Agathion agathionInfo = AgathionRepository.getInstance().getByItemId(item.getId());

		if (agathionInfo != null && agathionInfo.getMaxEnergy() > 0)
		{
			sendPacket(new ExBR_AgathionEnergyInfo(Collections.singletonList(item)));
		}

		EventDispatcher.getInstance().notifyEventAsync(new OnPlayerEquipItem(this, item), this);
	}

	/**
	 * @return the the PvP Kills of the L2PcInstance (Number of player killed during a PvP).
	 */
	public int getPvpKills()
	{
		return _pvpKills;
	}

	/**
	 * Set the the PvP Kills of the L2PcInstance (Number of player killed during a PvP).
	 *
	 * @param pvpKills
	 */
	public void setPvpKills(final int pvpKills)
	{
		EventDispatcher.getInstance().notifyEventAsync(new OnPlayerPvPChanged(this, _pvpKills, pvpKills), this);
		_pvpKills = pvpKills;
	}

	/**
	 * @return the Fame of this L2PcInstance
	 */
	public int getFame()
	{
		return _fame;
	}

	/**
	 * Set the Fame of this L2PcInstane
	 *
	 * @param fame
	 */
	public void setFame(final int fame)
	{
		EventDispatcher.getInstance().notifyEventAsync(new OnPlayerFameChanged(this, _fame, fame), this);
		_fame = fame > Config.MAX_PERSONAL_FAME_POINTS ? Config.MAX_PERSONAL_FAME_POINTS : fame;
	}

	/**
	 * @return the ClassId object of the L2PcInstance contained in L2PcTemplate.
	 */
	public ClassId getClassId()
	{
		return getTemplate().getClassId();
	}

	/**
	 * Set the template of the L2PcInstance.
	 *
	 * @param Id The Identifier of the L2PcTemplate to set to the L2PcInstance
	 */
	public void setClassId(final int Id)
	{
		if (!_subclassLock.tryLock())
		{
			return;
		}

		try
		{
			if (getLvlJoinedAcademy() != 0 && _clan != null && PlayerClass.values()[Id].getLevel() == ClassLevel.Third)
			{
				if (getLvlJoinedAcademy() <= 16)
				{
					_clan.addReputationScore(Config.JOIN_ACADEMY_MAX_REP_SCORE, true);
				}
				else if (getLvlJoinedAcademy() >= 39)
				{
					_clan.addReputationScore(Config.JOIN_ACADEMY_MIN_REP_SCORE, true);
				}
				else
				{
					_clan.addReputationScore(Config.JOIN_ACADEMY_MAX_REP_SCORE - (getLvlJoinedAcademy() - 16) * 20, true);
				}

				setLvlJoinedAcademy(0);

				final SystemMessage msg = SystemMessage.getSystemMessage(SystemMessageId.CLAN_MEMBER_S1_EXPELLED);
				msg.addPcName(this);
				_clan.broadcastToOnlineMembers(msg);
				_clan.broadcastToOnlineMembers(new PledgeShowMemberListDelete(getName()));
				_clan.removeClanMember(getObjectId(), 0);
				sendPacket(SystemMessageId.ACADEMY_MEMBERSHIP_TERMINATED);

				getInventory().addItem("Gift", 8181, 1, this, null);
			}

			if (isSubClassActive())
			{
				getSubClasses().get(_classIndex).setClassId(Id);
			}

			setTarget(this);
			broadcastPacket(new MagicSkillUse(this, 5103, 1, 1000, 0));
			setClassTemplate(Id);

			if (getClassId().level() == 3)
			{
				sendPacket(SystemMessageId.THIRD_CLASS_TRANSFER);
			}
			else
			{
				sendPacket(SystemMessageId.CLASS_TRANSFER);
			}

			if (isInParty())
			{
				getParty().broadcastPacket(new PartySmallWindowUpdate(this));
			}

			if (getClan() != null)
			{
				getClan().broadcastToOnlineMembers(new PledgeShowMemberListUpdate(this));
			}

			rewardSkills();

			if (!canOverrideCond(PcCondOverride.SKILL_CONDITIONS) && Config.DECREASE_SKILL_LEVEL)
			{
				checkPlayerSkills();
			}
		}
		finally
		{
			_subclassLock.unlock();
		}
	}

	/**
	 * Used for AltGameSkillLearn to set a custom skill learning class Id.
	 */
	private ClassId _learningClass = getClassId();

	/**
	 * @return the custom skill learning class Id.
	 */
	public ClassId getLearningClass()
	{
		return _learningClass;
	}

	/**
	 * @param learningClass the custom skill learning class Id to set.
	 */
	public void setLearningClass(final ClassId learningClass)
	{
		_learningClass = learningClass;
	}

	/**
	 * @return the Experience of the L2PcInstance.
	 */
	public long getExp()
	{
		return getStat().getExp();
	}

	public void setActiveEnchantAttrItemId(final int objectId)
	{
		_activeEnchantAttrItemId = objectId;
	}

	public int getActiveEnchantAttrItemId()
	{
		return _activeEnchantAttrItemId;
	}

	public void setActiveEnchantItemId(final int objectId)
	{
		if (objectId == ID_NONE)
		{
			setActiveEnchantSupportItemId(ID_NONE);
			setActiveEnchantTimestamp(0);
			setIsEnchanting(false);
		}

		_activeEnchantItemId = objectId;
	}

	public int getActiveEnchantItemId()
	{
		return _activeEnchantItemId;
	}

	public void setActiveEnchantSupportItemId(final int objectId)
	{
		_activeEnchantSupportItemId = objectId;
	}

	public int getActiveEnchantSupportItemId()
	{
		return _activeEnchantSupportItemId;
	}

	public long getActiveEnchantTimestamp()
	{
		return _activeEnchantTimestamp;
	}

	public void setActiveEnchantTimestamp(final long val)
	{
		_activeEnchantTimestamp = val;
	}

	public void setIsEnchanting(final boolean val)
	{
		_isEnchanting = val;
	}

	public boolean isEnchanting()
	{
		return _isEnchanting;
	}

	/**
	 * Set the fists weapon of the L2PcInstance (used when no weapon is equiped).
	 *
	 * @param weaponItem The fists L2Weapon to set to the L2PcInstance
	 */
	public void setFistsWeaponItem(final L2Weapon weaponItem)
	{
		_fistsWeaponItem = weaponItem;
	}

	/**
	 * @return the fists weapon of the L2PcInstance (used when no weapon is equipped).
	 */
	public L2Weapon getFistsWeaponItem()
	{
		return _fistsWeaponItem;
	}

	/**
	 * @param classId
	 * @return the fists weapon of the L2PcInstance Class (used when no weapon is equipped).
	 */
	public L2Weapon findFistsWeaponItem(final int classId)
	{
		L2Weapon weaponItem = null;
		if (classId >= 0x00 && classId <= 0x09)
		{
			// human fighter fists
			final L2Item temp = ItemTable.getInstance().getTemplate(246);
			weaponItem = (L2Weapon) temp;
		}
		else if (classId >= 0x0a && classId <= 0x11)
		{
			// human mage fists
			final L2Item temp = ItemTable.getInstance().getTemplate(251);
			weaponItem = (L2Weapon) temp;
		}
		else if (classId >= 0x12 && classId <= 0x18)
		{
			// elven fighter fists
			final L2Item temp = ItemTable.getInstance().getTemplate(244);
			weaponItem = (L2Weapon) temp;
		}
		else if (classId >= 0x19 && classId <= 0x1e)
		{
			// elven mage fists
			final L2Item temp = ItemTable.getInstance().getTemplate(249);
			weaponItem = (L2Weapon) temp;
		}
		else if (classId >= 0x1f && classId <= 0x25)
		{
			// dark elven fighter fists
			final L2Item temp = ItemTable.getInstance().getTemplate(245);
			weaponItem = (L2Weapon) temp;
		}
		else if (classId >= 0x26 && classId <= 0x2b)
		{
			// dark elven mage fists
			final L2Item temp = ItemTable.getInstance().getTemplate(250);
			weaponItem = (L2Weapon) temp;
		}
		else if (classId >= 0x2c && classId <= 0x30)
		{
			// orc fighter fists
			final L2Item temp = ItemTable.getInstance().getTemplate(248);
			weaponItem = (L2Weapon) temp;
		}
		else if (classId >= 0x31 && classId <= 0x34)
		{
			// orc mage fists
			final L2Item temp = ItemTable.getInstance().getTemplate(252);
			weaponItem = (L2Weapon) temp;
		}
		else if (classId >= 0x35 && classId <= 0x39)
		{
			// dwarven fists
			final L2Item temp = ItemTable.getInstance().getTemplate(247);
			weaponItem = (L2Weapon) temp;
		}

		return weaponItem;
	}

	/**
	 * This method reward all AutoGet skills and Normal skills if Auto-Learn configuration is true.
	 */
	public void rewardSkills()
	{
		if (Config.AUTO_LEARN_SKILLS)
		{
			giveAvailableSkills(Config.AUTO_LEARN_FS_SKILLS, true);
		}
		else
		{
			giveAvailableAutoGetSkills();
		}

		checkPlayerSkills();
		checkItemRestriction();
		sendSkillList();
	}

	/**
	 * Re-give all skills which aren't saved to database, like Noble, Hero, Clan Skills.<br>
	 */
	public void regiveTemporarySkills()
	{
		if (isNoble())
		{
			setNoble(true);
		}

		if (isHero())
		{
			setHero(true);
		}

		if (getClan() != null)
		{
			final L2Clan clan = getClan();
			clan.addSkillEffects(this);

			if (clan.getLevel() >= SiegeManager.getInstance().getSiegeClanMinLevel() && isClanLeader())
			{
				SiegeManager.getInstance().addSiegeSkills(this);
			}

			if (getClan().getCastleId() > 0)
			{
				CastleManager.getInstance().getCastleByOwner(getClan()).giveResidentialSkills(this);
			}

			if (getClan().getFortId() > 0)
			{
				FortManager.getInstance().getFortByOwner(getClan()).giveResidentialSkills(this);
			}
		}

		getInventory().reloadEquippedItems();

		restoreDeathPenaltyBuffLevel();
	}

	/**
	 * Give all available skills to the player.
	 *
	 * @param includedByFs   if {@code true} forgotten scroll skills present in the skill tree will be added
	 * @param includeAutoGet if {@code true} auto-get skills present in the skill tree will be added
	 * @return the amount of new skills earned
	 */
	public int giveAvailableSkills(final boolean includedByFs, final boolean includeAutoGet)
	{
		int skillCounter = 0;

		final Collection<Skill> skills = SkillTreesData.getInstance().getAllAvailableSkills(this, getClassId(), includedByFs, includeAutoGet);
		final List<Skill> skillsForStore = new ArrayList<>();

		for (final Skill sk : skills)
		{
			if (getKnownSkill(sk.getId()) == sk)
			{
				continue;
			}

			if (getSkillLevel(sk.getId()) == -1)
			{
				skillCounter++;
			}

			if (sk.isToggle() && isAffectedBySkill(sk.getId()))
			{
				stopSkillEffects(true, sk.getId());
			}

			addSkill(sk, false);
			skillsForStore.add(sk);
		}

		storeSkills(skillsForStore, -1);

		if (Config.AUTO_LEARN_SKILLS && skillCounter > 0)
		{
			sendMessage("You have learned " + skillCounter + " new skills.");
		}

		return skillCounter;
	}

	/**
	 * Give all available auto-get skills to the player.
	 */
	public void giveAvailableAutoGetSkills()
	{
		final List<L2SkillLearn> autoGetSkills = SkillTreesData.getInstance().getAvailableAutoGetSkills(this);
		final SkillData st = SkillData.getInstance();

		Skill skill;

		for (final L2SkillLearn s : autoGetSkills)
		{
			skill = st.getSkill(s.getSkillId(), s.getSkillLevel());

			if (skill != null)
			{
				addSkill(skill, true);
			}
			else
			{
				_log.warning("Skipping null auto-get skill for player: " + toString());
			}
		}
	}

	/**
	 * Set the Experience value of the L2PcInstance.
	 *
	 * @param exp
	 */
	public void setExp(long exp)
	{
		if (exp < 0)
		{
			exp = 0;
		}

		getStat().setExp(exp);
	}

	/**
	 * @return the Race object of the L2PcInstance.
	 */
	@Override
	public Race getRace()
	{
		if (!isSubClassActive())
		{
			return getTemplate().getRace();
		}

		return PlayerTemplateData.getInstance().getTemplate(_baseClass).getRace();
	}

	public L2Radar getRadar()
	{
		return _radar;
	}

	public boolean isMinimapAllowed()
	{
		return _minimapAllowed;
	}

	public void setMinimapAllowed(final boolean b)
	{
		_minimapAllowed = b;
	}

	/**
	 * @return the SP amount of the L2PcInstance.
	 */
	public int getSp()
	{
		return getStat().getSp();
	}

	/**
	 * Set the SP amount of the L2PcInstance.
	 *
	 * @param sp
	 */
	public void setSp(int sp)
	{
		if (sp < 0)
		{
			sp = 0;
		}

		super.getStat().setSp(sp);
	}

	/**
	 * @param castleId
	 * @return true if this L2PcInstance is a clan leader in ownership of the passed castle
	 */
	public boolean isCastleLord(final int castleId)
	{
		final L2Clan clan = getClan();

		if (clan != null && clan.getLeader().getPlayerInstance() == this)
		{
			final Castle castle = CastleManager.getInstance().getCastleByOwner(clan);

			if (castle != null && castle == CastleManager.getInstance().getCastleById(castleId))
			{
				return true;
			}
		}

		return false;
	}

	/**
	 * @return the Clan Identifier of the L2PcInstance.
	 */
	@Override
	public int getClanId()
	{
		return _clanId;
	}

	/**
	 * @return the Clan Crest Identifier of the L2PcInstance or 0.
	 */
	public int getClanCrestId()
	{
		if (_clan != null)
		{
			return _clan.getCrestId();
		}

		return 0;
	}

	/**
	 * @return The Clan CrestLarge Identifier or 0
	 */
	public int getClanCrestLargeId()
	{
		if (_clan != null && (_clan.getCastleId() != 0 || _clan.getHideoutId() != 0))
		{
			return _clan.getCrestLargeId();
		}

		return 0;
	}

	public long getClanJoinExpiryTime()
	{
		return _clanJoinExpiryTime;
	}

	public void setClanJoinExpiryTime(final long time)
	{
		_clanJoinExpiryTime = time;
	}

	public long getClanCreateExpiryTime()
	{
		return _clanCreateExpiryTime;
	}

	public void setClanCreateExpiryTime(final long time)
	{
		_clanCreateExpiryTime = time;
	}

	public long getOnlineTime()
	{
		return _onlineTime;
	}

	public long getOnlineBeginTime()
	{
		return _onlineBeginTime;
	}

	public void setOnlineTime(final long time)
	{
		_onlineTime = time;
		_onlineBeginTime = System.currentTimeMillis();
	}

	/**
	 * Return the PcInventory Inventory of the L2PcInstance contained in _inventory.
	 */
	@Override
	public PcInventory getInventory()
	{
		return _inventory;
	}

	/**
	 * Delete a ShortCut of the L2PcInstance _shortCuts.
	 *
	 * @param objectId
	 */
	public void removeItemFromShortCut(final int objectId)
	{
		_shortCuts.deleteShortCutByObjectId(objectId);
	}

	/**
	 * @return True if the L2PcInstance is sitting.
	 */
	public boolean isSitting()
	{
		return _waitTypeSitting;
	}

	/**
	 * Set _waitTypeSitting to given value
	 *
	 * @param state
	 */
	public void setIsSitting(final boolean state)
	{
		_waitTypeSitting = state;
	}

	/**
	 * Sit down the L2PcInstance, set the AI Intention to AI_INTENTION_REST and send a Server->Client ChangeWaitType packet (broadcast)
	 */
	public void sitDown()
	{
		sitDown(true);
	}

	public void sitDown(final boolean checkCast)
	{
		final TerminateReturn terminate = EventDispatcher.getInstance().notifyEvent(new OnPlayerSit(this), this, TerminateReturn.class);

		if (terminate != null && terminate.terminate())
		{
			return;
		}

		if (checkCast && isCastingNow())
		{
			return;
		}

		if (!_waitTypeSitting && !isAttackingDisabled() && !isOutOfControl() && !isImmobilized() && !isMoving())
		{
			breakAttack();
			setIsSitting(true);
			getAI().setIntention(CtrlIntention.AI_INTENTION_REST);
			broadcastPacket(new ChangeWaitType(this, ChangeWaitType.WT_SITTING));

			ThreadPoolManager.getInstance().scheduleGeneral(new SitDownTask(this), 2500);
			setIsParalyzed(true);
		}
	}

	/**
	 * Stand up the L2PcInstance, set the AI Intention to AI_INTENTION_IDLE and send a Server->Client ChangeWaitType packet (broadcast)
	 */
	public void standUp()
	{
		final TerminateReturn terminate = EventDispatcher.getInstance().notifyEvent(new OnPlayerStand(this), Containers.Players(), TerminateReturn.class);

		if (terminate != null && terminate.terminate())
		{
			return;
		}

		if (isForceSit())
		{
			sendMessage("A dark force beyond your mortal understanding makes your knees to shake when you try to stand up.");
		}
		else if (_waitTypeSitting && !isInStoreMode() && !isAlikeDead())
		{
			if (getEffectList().isAffected(EffectFlag.RELAXING))
			{
				stopEffects(L2EffectType.RELAXING);
			}

			broadcastPacket(new ChangeWaitType(this, ChangeWaitType.WT_STANDING));

			ThreadPoolManager.getInstance().scheduleGeneral(new StandUpTask(this), 2500);
		}
	}

	/**
	 * @return the PcWarehouse object of the L2PcInstance.
	 */
	public PcWarehouse getWarehouse()
	{
		if (_warehouse == null)
		{
			_warehouse = new PcWarehouse(this);
			_warehouse.restore();
		}

		if (Config.WAREHOUSE_CACHE)
		{
			WarehouseCacheManager.getInstance().addCacheTask(this);
		}

		return _warehouse;
	}

	/**
	 * Free memory used by Warehouse
	 */
	public void clearWarehouse()
	{
		if (_warehouse != null)
		{
			_warehouse.deleteMe();
		}

		_warehouse = null;
	}

	/**
	 * @return the PcFreight object of the L2PcInstance.
	 */
	public PcFreight getFreight()
	{
		return _freight;
	}

	/**
	 * @return true if refund list is not empty
	 */
	public boolean hasRefund()
	{
		return _refund != null && _refund.getSize() > 0 && Config.ALLOW_REFUND;
	}

	/**
	 * @return refund object or create new if not exist
	 */
	public PcRefund getRefund()
	{
		if (_refund == null)
		{
			_refund = new PcRefund(this);
		}

		return _refund;
	}

	/**
	 * Clear refund
	 */
	public void clearRefund()
	{
		if (_refund != null)
		{
			_refund.deleteMe();
		}

		_refund = null;
	}

	/**
	 * @return the Adena amount of the L2PcInstance.
	 */
	public long getAdena()
	{
		return _inventory.getAdena();
	}

	/**
	 * @return the Ancient Adena amount of the L2PcInstance.
	 */
	public long getAncientAdena()
	{
		return _inventory.getAncientAdena();
	}

	/**
	 * Add adena to Inventory of the L2PcInstance and send a Server->Client InventoryUpdate packet to the L2PcInstance.
	 *
	 * @param process     : String Identifier of process triggering this action
	 * @param count       : int Quantity of adena to be added
	 * @param reference   : L2Object Object referencing current action like NPC selling item or previous item in transformation
	 * @param sendMessage : boolean Specifies whether to send message to Client about this action
	 */
	public void addAdena(final String process, final long count, final L2Object reference, final boolean sendMessage)
	{
		if (sendMessage)
		{
			final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.EARNED_S1_ADENA);
			sm.addLong(count);
			sendPacket(sm);
		}

		if (count > 0)
		{
			_inventory.addAdena(process, count, this, reference);

			if (!Config.FORCE_INVENTORY_UPDATE)
			{
				final InventoryUpdate iu = new InventoryUpdate();
				iu.addItem(_inventory.getAdenaInstance());
				sendPacket(iu);
			}
			else
			{
				sendPacket(new ItemList(this, false));
			}
		}
	}

	/**
	 * Reduce adena in Inventory of the L2PcInstance and send a Server->Client InventoryUpdate packet to the L2PcInstance.
	 *
	 * @param process     : String Identifier of process triggering this action
	 * @param count       : long Quantity of adena to be reduced
	 * @param reference   : L2Object Object referencing current action like NPC selling item or previous item in transformation
	 * @param sendMessage : boolean Specifies whether to send message to Client about this action
	 * @return boolean informing if the action was successful
	 */
	public boolean reduceAdena(final String process, final long count, final L2Object reference, final boolean sendMessage)
	{
		if (count > getAdena())
		{
			if (sendMessage)
			{
				sendPacket(SystemMessageId.YOU_NOT_ENOUGH_ADENA);
			}

			return false;
		}

		if (count > 0)
		{
			final L2ItemInstance adenaItem = _inventory.getAdenaInstance();

			if (!_inventory.reduceAdena(process, count, this, reference))
			{
				return false;
			}

			if (!Config.FORCE_INVENTORY_UPDATE)
			{
				final InventoryUpdate iu = new InventoryUpdate();
				iu.addItem(adenaItem);
				sendPacket(iu);
			}
			else
			{
				sendPacket(new ItemList(this, false));
			}

			if (sendMessage)
			{
				final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.S1_DISAPPEARED_ADENA);
				sm.addLong(count);
				sendPacket(sm);
			}
		}

		return true;
	}

	/**
	 * Add ancient adena to Inventory of the L2PcInstance and send a Server->Client InventoryUpdate packet to the L2PcInstance.
	 *
	 * @param process     : String Identifier of process triggering this action
	 * @param count       : int Quantity of ancient adena to be added
	 * @param reference   : L2Object Object referencing current action like NPC selling item or previous item in transformation
	 * @param sendMessage : boolean Specifies whether to send message to Client about this action
	 */
	public void addAncientAdena(final String process, final long count, final L2Object reference, final boolean sendMessage)
	{
		if (sendMessage)
		{
			final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.EARNED_S2_S1_S);
			sm.addItemName(Inventory.ANCIENT_ADENA_ID);
			sm.addLong(count);
			sendPacket(sm);
		}

		if (count > 0)
		{
			_inventory.addAncientAdena(process, count, this, reference);

			if (!Config.FORCE_INVENTORY_UPDATE)
			{
				final InventoryUpdate iu = new InventoryUpdate();
				iu.addItem(_inventory.getAncientAdenaInstance());
				sendPacket(iu);
			}
			else
			{
				sendPacket(new ItemList(this, false));
			}
		}
	}

	/**
	 * Reduce ancient adena in Inventory of the L2PcInstance and send a Server->Client InventoryUpdate packet to the L2PcInstance.
	 *
	 * @param process     : String Identifier of process triggering this action
	 * @param count       : long Quantity of ancient adena to be reduced
	 * @param reference   : L2Object Object referencing current action like NPC selling item or previous item in transformation
	 * @param sendMessage : boolean Specifies whether to send message to Client about this action
	 * @return boolean informing if the action was successful
	 */
	public boolean reduceAncientAdena(final String process, final long count, final L2Object reference, final boolean sendMessage)
	{
		if (count > getAncientAdena())
		{
			if (sendMessage)
			{
				sendPacket(SystemMessageId.YOU_NOT_ENOUGH_ADENA);
			}

			return false;
		}

		if (count > 0)
		{
			final L2ItemInstance ancientAdenaItem = _inventory.getAncientAdenaInstance();

			if (!_inventory.reduceAncientAdena(process, count, this, reference))
			{
				return false;
			}

			if (!Config.FORCE_INVENTORY_UPDATE)
			{
				final InventoryUpdate iu = new InventoryUpdate();
				iu.addItem(ancientAdenaItem);
				sendPacket(iu);
			}
			else
			{
				sendPacket(new ItemList(this, false));
			}

			if (sendMessage)
			{
				if (count > 1)
				{
					final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.S2_S1_DISAPPEARED);
					sm.addItemName(Inventory.ANCIENT_ADENA_ID);
					sm.addLong(count);
					sendPacket(sm);
				}
				else
				{
					final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.S1_DISAPPEARED);
					sm.addItemName(Inventory.ANCIENT_ADENA_ID);
					sendPacket(sm);
				}
			}
		}

		return true;
	}

	/**
	 * Adds item to inventory and send a Server->Client InventoryUpdate packet to the L2PcInstance.
	 *
	 * @param process     : String Identifier of process triggering this action
	 * @param item        : L2ItemInstance to be added
	 * @param reference   : L2Object Object referencing current action like NPC selling item or previous item in transformation
	 * @param sendMessage : boolean Specifies whether to send message to Client about this action
	 */
	public void addItem(final String process, final L2ItemInstance item, final L2Object reference, final boolean sendMessage)
	{
		if (item.getCount() > 0)
		{
			if (sendMessage)
			{
				if (item.getCount() > 1)
				{
					final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.YOU_PICKED_UP_S1_S2);
					sm.addItemName(item);
					sm.addLong(item.getCount());
					sendPacket(sm);
				}
				else if (item.getEnchantLevel() > 0)
				{
					final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.YOU_PICKED_UP_A_S1_S2);
					sm.addInt(item.getEnchantLevel());
					sm.addItemName(item);
					sendPacket(sm);
				}
				else
				{
					final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.YOU_PICKED_UP_S1);
					sm.addItemName(item);
					sendPacket(sm);
				}
			}

			final L2ItemInstance newitem = _inventory.addItem(process, item, this, reference);

			if (!Config.FORCE_INVENTORY_UPDATE)
			{
				final InventoryUpdate playerIU = new InventoryUpdate();
				playerIU.addItem(newitem);
				sendPacket(playerIU);
			}
			else
			{
				sendPacket(new ItemList(this, false));
			}

			final StatusUpdate su = new StatusUpdate(this);
			su.addAttribute(StatusUpdate.CUR_LOAD, getCurrentLoad());
			sendPacket(su);

			if (!canOverrideCond(PcCondOverride.ITEM_CONDITIONS) && !_inventory.validateCapacity(0, item.isQuestItem()) && newitem.isDroppable() && (!newitem.isStackable() || newitem.getLastChange() != L2ItemInstance.MODIFIED))
			{
				dropItem("InvDrop", newitem, null, true, true);
			}
			else if (CursedWeaponsManager.getInstance().isCursed(newitem.getId()))
			{
				CursedWeaponsManager.getInstance().activate(this, newitem);
			}
			else if (FortSiegeManager.getInstance().isCombat(item.getId()))
			{
				if (FortSiegeManager.getInstance().activateCombatFlag(this, item))
				{
					final Fort fort = FortManager.getInstance().getFort(this);
					fort.getSiege().announceToPlayer(SystemMessage.getSystemMessage(SystemMessageId.C1_ACQUIRED_THE_FLAG), getName());
				}
			}
			else if (item.getId() >= 13560 && item.getId() <= 13568)
			{
				final TerritoryWard ward = TerritoryWarManager.getInstance().getTerritoryWard(item.getId() - 13479);

				if (ward != null)
				{
					ward.activate(this, item);
				}
			}
		}
	}

	/**
	 * Adds item to Inventory and send a Server->Client InventoryUpdate packet to the L2PcInstance.
	 *
	 * @param process     : String Identifier of process triggering this action
	 * @param itemId      : int Item Identifier of the item to be added
	 * @param count       : long Quantity of items to be added
	 * @param reference   : L2Object Object referencing current action like NPC selling item or previous item in transformation
	 * @param sendMessage : boolean Specifies whether to send message to Client about this action
	 * @return
	 */
	public L2ItemInstance addItem(final String process, final int itemId, final long count, final L2Object reference, final boolean sendMessage)
	{
		if (count > 0)
		{
			final L2Item item = ItemTable.getInstance().getTemplate(itemId);

			if (item == null)
			{
				_log.log(Level.SEVERE, "Item doesn't exist so cannot be added. Item ID: " + itemId);
				return null;
			}

			if (sendMessage && (!isCastingNow() && item.hasExImmediateEffect() || !item.hasExImmediateEffect()))
			{
				if (count > 1)
				{
					if (process.equalsIgnoreCase("Sweeper") || process.equalsIgnoreCase("Quest"))
					{
						sendPacket(SystemMessage.getSystemMessage(SystemMessageId.EARNED_S2_S1_S).addItemName(itemId).addLong(count));
					}
					else
					{
						sendPacket(SystemMessage.getSystemMessage(SystemMessageId.YOU_PICKED_UP_S1_S2).addItemName(itemId).addLong(count));
					}
				}
				else
				{
					if (process.equalsIgnoreCase("Sweeper") || process.equalsIgnoreCase("Quest"))
					{
						sendPacket(SystemMessage.getSystemMessage(SystemMessageId.EARNED_ITEM_S1).addItemName(itemId));
					}
					else
					{
						sendPacket(SystemMessage.getSystemMessage(SystemMessageId.YOU_PICKED_UP_S1).addItemName(itemId));
					}
				}
			}

			if (item.hasExImmediateEffect())
			{
				final IItemHandler handler = ItemHandler.getInstance().getHandler(item instanceof L2EtcItem ? (L2EtcItem) item : null);

				if (handler == null)
				{
					_log.warning("No item handler registered for Herb ID " + item.getId() + "!");
				}
				else
				{
					handler.useItem(this, new L2ItemInstance(itemId), false);
				}
			}
			else
			{
				final L2ItemInstance createdItem = _inventory.addItem(process, itemId, count, this, reference);

				if (!canOverrideCond(PcCondOverride.ITEM_CONDITIONS) && !_inventory.validateCapacity(0, item.isQuestItem()) && createdItem.isDroppable() && (!createdItem.isStackable() || createdItem.getLastChange() != L2ItemInstance.MODIFIED))
				{
					dropItem("InvDrop", createdItem, null, true);
				}
				else if (CursedWeaponsManager.getInstance().isCursed(createdItem.getId()))
				{
					CursedWeaponsManager.getInstance().activate(this, createdItem);
				}
				else if (createdItem.getId() >= 13560 && createdItem.getId() <= 13568)
				{
					final TerritoryWard ward = TerritoryWarManager.getInstance().getTerritoryWard(createdItem.getId() - 13479);

					if (ward != null)
					{
						ward.activate(this, createdItem);
					}
				}

				return createdItem;
			}
		}

		return null;
	}

	/**
	 * @param process     the process name
	 * @param item        the item holder
	 * @param reference   the reference object
	 * @param sendMessage if {@code true} a system message will be sent
	 */
	public void addItem(final String process, final ItemHolder item, final L2Object reference, final boolean sendMessage)
	{
		addItem(process, item.getId(), item.getCount(), reference, sendMessage);
	}

	/**
	 * Destroy item from inventory and send a Server->Client InventoryUpdate packet to the L2PcInstance.
	 *
	 * @param process     : String Identifier of process triggering this action
	 * @param item        : L2ItemInstance to be destroyed
	 * @param reference   : L2Object Object referencing current action like NPC selling item or previous item in transformation
	 * @param sendMessage : boolean Specifies whether to send message to Client about this action
	 * @return boolean informing if the action was successful
	 */
	public boolean destroyItem(final String process, final L2ItemInstance item, final L2Object reference, final boolean sendMessage)
	{
		return destroyItem(process, item, item.getCount(), reference, sendMessage);
	}

	/**
	 * Destroy item from inventory and send a Server->Client InventoryUpdate packet to the L2PcInstance.
	 *
	 * @param process     : String Identifier of process triggering this action
	 * @param item        : L2ItemInstance to be destroyed
	 * @param count
	 * @param reference   : L2Object Object referencing current action like NPC selling item or previous item in transformation
	 * @param sendMessage : boolean Specifies whether to send message to Client about this action
	 * @return boolean informing if the action was successful
	 */
	public boolean destroyItem(final String process, L2ItemInstance item, final long count, final L2Object reference, final boolean sendMessage)
	{
		item = _inventory.destroyItem(process, item, count, this, reference);

		if (item == null)
		{
			if (sendMessage)
			{
				sendPacket(SystemMessageId.NOT_ENOUGH_ITEMS);
			}

			return false;
		}

		if (!Config.FORCE_INVENTORY_UPDATE)
		{
			final InventoryUpdate playerIU = new InventoryUpdate();
			playerIU.addItem(item);
			sendPacket(playerIU);
		}
		else
		{
			sendPacket(new ItemList(this, false));
		}

		final StatusUpdate su = new StatusUpdate(this);
		su.addAttribute(StatusUpdate.CUR_LOAD, getCurrentLoad());
		sendPacket(su);

		if (sendMessage)
		{
			if (count > 1)
			{
				final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.S2_S1_DISAPPEARED);
				sm.addItemName(item);
				sm.addLong(count);
				sendPacket(sm);
			}
			else
			{
				final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.S1_DISAPPEARED);
				sm.addItemName(item);
				sendPacket(sm);
			}
		}

		return true;
	}

	/**
	 * Destroys item from inventory and send a Server->Client InventoryUpdate packet to the L2PcInstance.
	 *
	 * @param process     : String Identifier of process triggering this action
	 * @param objectId    : int Item Instance identifier of the item to be destroyed
	 * @param count       : int Quantity of items to be destroyed
	 * @param reference   : L2Object Object referencing current action like NPC selling item or previous item in transformation
	 * @param sendMessage : boolean Specifies whether to send message to Client about this action
	 * @return boolean informing if the action was successful
	 */
	@Override
	public boolean destroyItem(final String process, final int objectId, final long count, final L2Object reference, final boolean sendMessage)
	{
		final L2ItemInstance item = _inventory.getItemByObjectId(objectId);

		if (item == null)
		{
			if (sendMessage)
			{
				sendPacket(SystemMessageId.NOT_ENOUGH_ITEMS);
			}

			return false;
		}

		return destroyItem(process, item, count, reference, sendMessage);
	}

	/**
	 * Destroys shots from inventory without logging and only occasional saving to database. Sends a Server->Client InventoryUpdate packet to the L2PcInstance.
	 *
	 * @param process     : String Identifier of process triggering this action
	 * @param objectId    : int Item Instance identifier of the item to be destroyed
	 * @param count       : int Quantity of items to be destroyed
	 * @param reference   : L2Object Object referencing current action like NPC selling item or previous item in transformation
	 * @param sendMessage : boolean Specifies whether to send message to Client about this action
	 * @return boolean informing if the action was successful
	 */
	public boolean destroyItemWithoutTrace(final String process, final int objectId, final long count, final L2Object reference, final boolean sendMessage)
	{
		final L2ItemInstance item = _inventory.getItemByObjectId(objectId);

		if (item == null || item.getCount() < count)
		{
			if (sendMessage)
			{
				sendPacket(SystemMessageId.NOT_ENOUGH_ITEMS);
			}

			return false;
		}

		return destroyItem(null, item, count, reference, sendMessage);
	}

	/**
	 * Destroy item from inventory by using its <B>itemId</B> and send a Server->Client InventoryUpdate packet to the L2PcInstance.
	 *
	 * @param process     : String Identifier of process triggering this action
	 * @param itemId      : int Item identifier of the item to be destroyed
	 * @param count       : int Quantity of items to be destroyed
	 * @param reference   : L2Object Object referencing current action like NPC selling item or previous item in transformation
	 * @param sendMessage : boolean Specifies whether to send message to Client about this action
	 * @return boolean informing if the action was successful
	 */
	@Override
	public boolean destroyItemByItemId(final String process, final int itemId, final long count, final L2Object reference, final boolean sendMessage)
	{
		if (itemId == Inventory.ADENA_ID)
		{
			return reduceAdena(process, count, reference, sendMessage);
		}

		final L2ItemInstance item = _inventory.getItemByItemId(itemId);

		if (item == null || item.getCount() < count || _inventory.destroyItemByItemId(process, itemId, count, this, reference) == null)
		{
			if (sendMessage)
			{
				sendPacket(SystemMessageId.NOT_ENOUGH_ITEMS);
			}

			return false;
		}

		if (!Config.FORCE_INVENTORY_UPDATE)
		{
			final InventoryUpdate playerIU = new InventoryUpdate();
			playerIU.addItem(item);
			sendPacket(playerIU);
		}
		else
		{
			sendPacket(new ItemList(this, false));
		}

		final StatusUpdate su = new StatusUpdate(this);
		su.addAttribute(StatusUpdate.CUR_LOAD, getCurrentLoad());
		sendPacket(su);

		if (sendMessage)
		{
			if (count > 1)
			{
				final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.S2_S1_DISAPPEARED);
				sm.addItemName(itemId);
				sm.addLong(count);
				sendPacket(sm);
			}
			else
			{
				final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.S1_DISAPPEARED);
				sm.addItemName(itemId);
				sendPacket(sm);
			}
		}

		return true;
	}

	/**
	 * Transfers item to another ItemContainer and send a Server->Client InventoryUpdate packet to the L2PcInstance.
	 *
	 * @param process   : String Identifier of process triggering this action
	 * @param objectId  : int Item Identifier of the item to be transfered
	 * @param count     : long Quantity of items to be transfered
	 * @param target
	 * @param reference : L2Object Object referencing current action like NPC selling item or previous item in transformation
	 * @return L2ItemInstance corresponding to the new item or the updated item in inventory
	 */
	public L2ItemInstance transferItem(final String process, final int objectId, final long count, final Inventory target, final L2Object reference)
	{
		final L2ItemInstance oldItem = checkItemManipulation(objectId, count, "transfer");

		if (oldItem == null)
		{
			return null;
		}

		final L2ItemInstance newItem = getInventory().transferItem(process, objectId, count, target, this, reference);

		if (newItem == null)
		{
			return null;
		}

		if (!Config.FORCE_INVENTORY_UPDATE)
		{
			final InventoryUpdate playerIU = new InventoryUpdate();

			if (oldItem.getCount() > 0 && oldItem != newItem)
			{
				playerIU.addModifiedItem(oldItem);
			}
			else
			{
				playerIU.addRemovedItem(oldItem);
			}

			sendPacket(playerIU);
		}
		else
		{
			sendPacket(new ItemList(this, false));
		}

		StatusUpdate playerSU = new StatusUpdate(this);
		playerSU.addAttribute(StatusUpdate.CUR_LOAD, getCurrentLoad());
		sendPacket(playerSU);

		if (target instanceof PcInventory)
		{
			final L2PcInstance targetPlayer = ((PcInventory) target).getOwner();

			if (!Config.FORCE_INVENTORY_UPDATE)
			{
				final InventoryUpdate playerIU = new InventoryUpdate();

				if (newItem.getCount() > count)
				{
					playerIU.addModifiedItem(newItem);
				}
				else
				{
					playerIU.addNewItem(newItem);
				}

				targetPlayer.sendPacket(playerIU);
			}
			else
			{
				targetPlayer.sendPacket(new ItemList(targetPlayer, false));
			}

			playerSU = new StatusUpdate(targetPlayer);
			playerSU.addAttribute(StatusUpdate.CUR_LOAD, targetPlayer.getCurrentLoad());
			targetPlayer.sendPacket(playerSU);
		}
		else if (target instanceof PetInventory)
		{
			final PetInventoryUpdate petIU = new PetInventoryUpdate();

			if (newItem.getCount() > count)
			{
				petIU.addModifiedItem(newItem);
			}
			else
			{
				petIU.addNewItem(newItem);
			}

			((PetInventory) target).getOwner().sendPacket(petIU);
		}

		return newItem;
	}

	/**
	 * Use instead of calling {@link #addItem(String, L2ItemInstance, L2Object, boolean)} and {@link #destroyItemByItemId(String, int, long, L2Object, boolean)}<br>
	 * This method validates slots and weight limit, for stackable and non-stackable items.
	 *
	 * @param process     a generic string representing the process that is exchanging this items
	 * @param reference   the (probably NPC) reference, could be null
	 * @param coinId      the item Id of the item given on the exchange
	 * @param cost        the amount of items given on the exchange
	 * @param rewardId    the item received on the exchange
	 * @param count       the amount of items received on the exchange
	 * @param sendMessage if {@code true} it will send messages to the acting player
	 * @return {@code true} if the player successfully exchanged the items, {@code false} otherwise
	 */
	public boolean exchangeItemsById(final String process, final L2Object reference, final int coinId, final long cost, final int rewardId, final long count, final boolean sendMessage)
	{
		final PcInventory inv = getInventory();

		if (!inv.validateCapacityByItemId(rewardId, count))
		{
			if (sendMessage)
			{
				sendPacket(SystemMessageId.SLOTS_FULL);
			}
			return false;
		}

		if (!inv.validateWeightByItemId(rewardId, count))
		{
			if (sendMessage)
			{
				sendPacket(SystemMessageId.WEIGHT_LIMIT_EXCEEDED);
			}
			return false;
		}

		if (destroyItemByItemId(process, coinId, cost, reference, sendMessage))
		{
			addItem(process, rewardId, count, reference, sendMessage);
			return true;
		}

		return false;
	}

	/**
	 * Drop item from inventory and send a Server->Client InventoryUpdate packet to the L2PcInstance.
	 *
	 * @param process     String Identifier of process triggering this action
	 * @param item        L2ItemInstance to be dropped
	 * @param reference   L2Object Object referencing current action like NPC selling item or previous item in transformation
	 * @param sendMessage boolean Specifies whether to send message to Client about this action
	 * @param protectItem whether or not dropped item must be protected temporary against other players
	 * @return boolean informing if the action was successful
	 */
	public boolean dropItem(final String process, L2ItemInstance item, final L2Object reference, final boolean sendMessage, final boolean protectItem)
	{
		item = _inventory.dropItem(process, item, this, reference);

		if (item == null)
		{
			if (sendMessage)
			{
				sendPacket(SystemMessageId.NOT_ENOUGH_ITEMS);
			}

			return false;
		}

		item.dropMe(this, getX() + Rnd.get(50) - 25, getY() + Rnd.get(50) - 25, getZ() + 20);

		if (Config.AUTODESTROY_ITEM_AFTER > 0 && Config.DESTROY_DROPPED_PLAYER_ITEM && !Config.LIST_PROTECTED_ITEMS.contains(item.getId()))
		{
			if (item.isEquipable() && Config.DESTROY_EQUIPABLE_PLAYER_ITEM || !item.isEquipable())
			{
				ItemsAutoDestroy.getInstance().addItem(item);
			}
		}

		if (Config.DESTROY_DROPPED_PLAYER_ITEM)
		{
			if (!item.isEquipable() || item.isEquipable() && Config.DESTROY_EQUIPABLE_PLAYER_ITEM)
			{
				item.setProtected(false);
			}
			else
			{
				item.setProtected(true);
			}
		}
		else
		{
			item.setProtected(true);
		}

		if (protectItem)
		{
			item.getDropProtection().protect(this);
		}

		if (!Config.FORCE_INVENTORY_UPDATE)
		{
			final InventoryUpdate playerIU = new InventoryUpdate();
			playerIU.addItem(item);
			sendPacket(playerIU);
		}
		else
		{
			sendPacket(new ItemList(this, false));
		}

		final StatusUpdate su = new StatusUpdate(this);
		su.addAttribute(StatusUpdate.CUR_LOAD, getCurrentLoad());
		sendPacket(su);

		if (sendMessage)
		{
			final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.YOU_DROPPED_S1);
			sm.addItemName(item);
			sendPacket(sm);
		}

		return true;
	}

	public boolean dropItem(final String process, final L2ItemInstance item, final L2Object reference, final boolean sendMessage)
	{
		return dropItem(process, item, reference, sendMessage, false);
	}

	/**
	 * Drop item from inventory by using its <B>objectID</B> and send a Server->Client InventoryUpdate packet to the L2PcInstance.
	 *
	 * @param process     : String Identifier of process triggering this action
	 * @param objectId    : int Item Instance identifier of the item to be dropped
	 * @param count       : long Quantity of items to be dropped
	 * @param x           : int coordinate for drop X
	 * @param y           : int coordinate for drop Y
	 * @param z           : int coordinate for drop Z
	 * @param reference   : L2Object Object referencing current action like NPC selling item or previous item in transformation
	 * @param sendMessage : boolean Specifies whether to send message to Client about this action
	 * @param protectItem
	 * @return L2ItemInstance corresponding to the new item or the updated item in inventory
	 */
	public L2ItemInstance dropItem(final String process, final int objectId, final long count, final int x, final int y, final int z, final L2Object reference, final boolean sendMessage, final boolean protectItem)
	{
		final L2ItemInstance invitem = _inventory.getItemByObjectId(objectId);
		final L2ItemInstance item = _inventory.dropItem(process, objectId, count, this, reference);

		if (item == null)
		{
			if (sendMessage)
			{
				sendPacket(SystemMessageId.NOT_ENOUGH_ITEMS);
			}

			return null;
		}

		item.dropMe(this, x, y, z);

		if (Config.AUTODESTROY_ITEM_AFTER > 0 && Config.DESTROY_DROPPED_PLAYER_ITEM && !Config.LIST_PROTECTED_ITEMS.contains(item.getId()))
		{
			if (item.isEquipable() && Config.DESTROY_EQUIPABLE_PLAYER_ITEM || !item.isEquipable())
			{
				ItemsAutoDestroy.getInstance().addItem(item);
			}
		}

		if (Config.DESTROY_DROPPED_PLAYER_ITEM)
		{
			if (!item.isEquipable() || item.isEquipable() && Config.DESTROY_EQUIPABLE_PLAYER_ITEM)
			{
				item.setProtected(false);
			}
			else
			{
				item.setProtected(true);
			}
		}
		else
		{
			item.setProtected(true);
		}

		if (protectItem)
		{
			item.getDropProtection().protect(this);
		}

		if (!Config.FORCE_INVENTORY_UPDATE)
		{
			final InventoryUpdate playerIU = new InventoryUpdate();
			playerIU.addItem(invitem);
			sendPacket(playerIU);
		}
		else
		{
			sendPacket(new ItemList(this, false));
		}

		final StatusUpdate su = new StatusUpdate(this);
		su.addAttribute(StatusUpdate.CUR_LOAD, getCurrentLoad());
		sendPacket(su);

		if (sendMessage)
		{
			final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.YOU_DROPPED_S1);
			sm.addItemName(item);
			sendPacket(sm);
		}

		return item;
	}

	public L2ItemInstance checkItemManipulation(final int objectId, final long count, final String action)
	{
		if (L2World.getInstance().findObject(objectId) == null)
		{
			System.out.println("patouses 1");
			_log.finest(getObjectId() + ": player tried to " + action + " item not available in L2World");
			return null;
		}

		final L2ItemInstance item = getInventory().getItemByObjectId(objectId);

		if (item == null || item.getOwnerId() != getObjectId())
		{
			System.out.println("patouses 2");
			_log.finest(getObjectId() + ": player tried to " + action + " item he is not owner of");
			return null;
		}

		if (count < 0 || count > 1 && !item.isStackable())
		{
			System.out.println("patouses 3");
			_log.finest(getObjectId() + ": player tried to " + action + " item with invalid count: " + count);
			return null;
		}

		if (count > item.getCount())
		{
			System.out.println("patouses 4");
			_log.finest(getObjectId() + ": player tried to " + action + " more items than he owns");
			return null;
		}

		if (hasSummon() && getSummon().getControlObjectId() == objectId || getMountObjectID() == objectId)
		{
			if (Config.DEBUG)
			{
				_log.finest(getObjectId() + ": player tried to " + action + " item controling pet");
			}

			return null;
		}

		if (getActiveEnchantItemId() == objectId)
		{
			if (Config.DEBUG)
			{
				_log.finest(getObjectId() + ":player tried to " + action + " an enchant scroll he was using");
			}

			return null;
		}

		if (item.isAugmented() && (isCastingNow() || isCastingSimultaneouslyNow()))
		{
			System.out.println("patouses 5");
			return null;
		}

		return item;
	}

	/**
	 * Set _protectEndTime according settings.
	 *
	 * @param protect
	 */
	public void setProtection(final boolean protect)
	{
		if (Config.DEVELOPER && (protect || _protectEndTime > 0))
		{
			_log.warning(getName() + ": Protection " + (protect ? "ON " + (GameTimeController.getInstance().getGameTicks() + Config.PLAYER_SPAWN_PROTECTION * GameTimeController.TICKS_PER_SECOND) : "OFF") + " (currently " + GameTimeController.getInstance().getGameTicks() + ")");
		}

		_protectEndTime = protect ? GameTimeController.getInstance().getGameTicks() + Config.PLAYER_SPAWN_PROTECTION * GameTimeController.TICKS_PER_SECOND : 0;
	}

	public void setTeleportProtection(final boolean protect)
	{
		if (Config.DEVELOPER && (protect || _teleportProtectEndTime > 0))
		{
			_log.warning(getName() + ": Tele Protection " + (protect ? "ON " + (GameTimeController.getInstance().getGameTicks() + Config.PLAYER_TELEPORT_PROTECTION * GameTimeController.TICKS_PER_SECOND) : "OFF") + " (currently " + GameTimeController.getInstance().getGameTicks() + ")");
		}

		_teleportProtectEndTime = protect ? GameTimeController.getInstance().getGameTicks() + Config.PLAYER_TELEPORT_PROTECTION * GameTimeController.TICKS_PER_SECOND : 0;
	}

	/**
	 * Set protection from agro mobs when getting up from fake death, according settings.
	 *
	 * @param protect
	 */
	public void setRecentFakeDeath(final boolean protect)
	{
		_recentFakeDeathEndTime = protect ? GameTimeController.getInstance().getGameTicks() + Config.PLAYER_FAKEDEATH_UP_PROTECTION * GameTimeController.TICKS_PER_SECOND : 0;
	}

	public boolean isRecentFakeDeath()
	{
		return _recentFakeDeathEndTime > GameTimeController.getInstance().getGameTicks();
	}

	public final boolean isFakeDeath()
	{
		return _isFakeDeath;
	}

	public final void setIsFakeDeath(final boolean value)
	{
		_isFakeDeath = value;
	}

	@Override
	public final boolean isAlikeDead()
	{
		return super.isAlikeDead() || isFakeDeath();
	}

	/**
	 * @return the client owner of this char.
	 */
	public L2GameClient getClient()
	{
		return _client;
	}

	public void setClient(final L2GameClient client)
	{
		_client = client;
	}

	public String getIPAddress()
	{
		String ip = "N/A";

		if (_client != null && _client.getConnectionAddress() != null)
		{
			ip = _client.getConnectionAddress().getHostAddress();
		}

		return ip;
	}

	/**
	 * Close the active connection with the client.
	 *
	 * @param closeClient
	 */
	private void closeNetConnection(final boolean closeClient)
	{
		final L2GameClient client = _client;

		if (client != null)
		{
			if (client.isDetached())
			{
				client.cleanMe(true);
			}
			else
			{
				if (!client.getConnection().isClosed())
				{
					if (closeClient)
					{
						client.close(LeaveWorld.STATIC_PACKET);
					}
					else
					{
						client.close(ServerClose.STATIC_PACKET);
					}
				}
			}
		}
	}

	public Location getCurrentSkillWorldPosition()
	{
		return _currentSkillWorldPosition;
	}

	public void setCurrentSkillWorldPosition(final Location worldPosition)
	{
		_currentSkillWorldPosition = worldPosition;
	}

	@Override
	public void enableSkill(final Skill skill)
	{
		super.enableSkill(skill);
		removeTimeStamp(skill);
	}

	@Override
	public boolean checkDoCastConditions(final Skill skill)
	{
		if (!super.checkDoCastConditions(skill))
		{
			return false;
		}

		if (inObserverMode())
		{
			return false;
		}

		if (isInOlympiadMode() && skill.isBlockedInOlympiad())
		{
			sendPacket(SystemMessageId.THIS_SKILL_IS_NOT_AVAILABLE_FOR_THE_OLYMPIAD_EVENT);
			return false;
		}

		if (getCharges() < skill.getChargeConsume() || isInAirShip() && !skill.hasEffectType(L2EffectType.REFUEL_AIRSHIP))
		{
			final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.S1_CANNOT_BE_USED);
			sm.addSkillName(skill);
			sendPacket(sm);
			return false;
		}

		return true;
	}

	/**
	 * Returns true if cp update should be done, false if not
	 *
	 * @return boolean
	 */
	private boolean needCpUpdate()
	{
		final double currentCp = getCurrentCp();

		if (currentCp <= 1.0 || getMaxCp() < MAX_HP_BAR_PX)
		{
			return true;
		}

		if (currentCp <= _cpUpdateDecCheck || currentCp >= _cpUpdateIncCheck)
		{
			if (currentCp == getMaxCp())
			{
				_cpUpdateIncCheck = currentCp + 1;
				_cpUpdateDecCheck = currentCp - _cpUpdateInterval;
			}
			else
			{
				final double doubleMulti = currentCp / _cpUpdateInterval;
				int intMulti = (int) doubleMulti;

				_cpUpdateDecCheck = _cpUpdateInterval * (doubleMulti < intMulti ? intMulti-- : intMulti);
				_cpUpdateIncCheck = _cpUpdateDecCheck + _cpUpdateInterval;
			}

			return true;
		}

		return false;
	}

	/**
	 * Returns true if mp update should be done, false if not
	 *
	 * @return boolean
	 */
	private boolean needMpUpdate()
	{
		final double currentMp = getCurrentMp();

		if (currentMp <= 1.0 || getMaxMp() < MAX_HP_BAR_PX)
		{
			return true;
		}

		if (currentMp <= _mpUpdateDecCheck || currentMp >= _mpUpdateIncCheck)
		{
			if (currentMp == getMaxMp())
			{
				_mpUpdateIncCheck = currentMp + 1;
				_mpUpdateDecCheck = currentMp - _mpUpdateInterval;
			}
			else
			{
				final double doubleMulti = currentMp / _mpUpdateInterval;
				int intMulti = (int) doubleMulti;

				_mpUpdateDecCheck = _mpUpdateInterval * (doubleMulti < intMulti ? intMulti-- : intMulti);
				_mpUpdateIncCheck = _mpUpdateDecCheck + _mpUpdateInterval;
			}

			return true;
		}

		return false;
	}

	/**
	 * Send packet StatusUpdate with current HP,MP and CP to the L2PcInstance and only current HP, MP and Level to all other L2PcInstance of the Party. <B><U> Actions</U> :</B>
	 * <li>Send the Server->Client packet StatusUpdate with current HP, MP and CP to this L2PcInstance</li><BR>
	 * <li>Send the Server->Client packet PartySmallWindowUpdate with current HP, MP and Level to all other L2PcInstance of the Party</li> <FONT COLOR=#FF0000><B> <U>Caution</U> : This method DOESN'T SEND current HP and MP to all L2PcInstance of the _statusListener</B></FONT>
	 */
	@Override
	public void broadcastStatusUpdate()
	{
		final StatusUpdate su = new StatusUpdate(this);
		su.addAttribute(StatusUpdate.MAX_HP, getMaxHp());
		su.addAttribute(StatusUpdate.CUR_HP, (int) getCurrentHp());
		su.addAttribute(StatusUpdate.MAX_MP, getMaxMp());
		su.addAttribute(StatusUpdate.CUR_MP, (int) getCurrentMp());
		su.addAttribute(StatusUpdate.MAX_CP, getMaxCp());
		su.addAttribute(StatusUpdate.CUR_CP, (int) getCurrentCp());
		sendPacket(su);

		final boolean needCpUpdate = needCpUpdate();
		final boolean needHpUpdate = needHpUpdate();

		if (isInParty() && (needCpUpdate || needHpUpdate || needMpUpdate()))
		{
			getParty().broadcastToPartyMembers(this, new PartySmallWindowUpdate(this));
		}

		if (isInOlympiadMode() && isOlympiadStart() && (needCpUpdate || needHpUpdate))
		{
			final OlympiadGameTask game = OlympiadGameManager.getInstance().getOlympiadTask(getOlympiadGameId());

			if (game != null && game.isBattleStarted())
			{
				game.getZone().broadcastStatusUpdate(this);
			}
		}

		if (isInDuel() && (needCpUpdate || needHpUpdate))
		{
			DuelManager.getInstance().broadcastToOpposingTeam(this, new ExDuelUpdateUserInfo(this));
		}

		if (isInTournament())
		{
			getTournament().broadcastStatusUpdate(this);
		}
	}

	/**
	 * Send a Server->Client packet UserInfo to this L2PcInstance and CharInfo to all L2PcInstance in its _KnownPlayers. <B><U> Concept</U> :</B> Others L2PcInstance in the detection area of the L2PcInstance are identified in <B>_knownPlayers</B>. In order to inform other players of this L2PcInstance
	 * state modifications, server just need to go through _knownPlayers to send Server->Client Packet <B><U> Actions</U> :</B>
	 * <li>Send a Server->Client packet UserInfo to this L2PcInstance (Public and Private Data)</li>
	 * <li>Send a Server->Client packet CharInfo to all L2PcInstance in _KnownPlayers of the L2PcInstance (Public data only)</li> <FONT COLOR=#FF0000><B> <U>Caution</U> : DON'T SEND UserInfo packet to other players instead of CharInfo packet. Indeed, UserInfo packet contains PRIVATE DATA as MaxHP, STR,
	 * DEX...</B></FONT>
	 */
	public final void broadcastUserInfo()
	{
		sendPacket(new UserInfo(this));

		broadcastPacket(new CharInfo(this));
		broadcastPacket(new ExBrExtraUserInfo(this));

		if (TerritoryWarManager.getInstance().isTWInProgress() && (TerritoryWarManager.getInstance().checkIsRegistered(-1, getObjectId()) || TerritoryWarManager.getInstance().checkIsRegistered(-1, getClan())))
		{
			broadcastPacket(new ExDominionWarStart(this));
		}
	}

	public final void broadcastTitleInfo()
	{
		sendPacket(new UserInfo(this));
		sendPacket(new ExBrExtraUserInfo(this));

		broadcastPacket(new NicknameChanged(this));
	}

	@Override
	public final void broadcastPacket(final L2GameServerPacket mov)
	{
		if (!(mov instanceof CharInfo))
		{
			sendPacket(mov);
		}

		mov.setInvisible(isInvisible());

		for (final L2PcInstance player : getKnownList().getKnownPlayers().values())
		{
			if (player == null || !isVisibleFor(player))
			{
				continue;
			}

			player.sendPacket(mov);

			if (mov instanceof CharInfo)
			{
				final int relation = getRelation(player);

				final Integer oldrelation = getKnownList().getKnownRelations().get(player.getObjectId());

				if (oldrelation != null && oldrelation != relation)
				{
					player.sendPacket(new RelationChanged(this, relation, isAutoAttackable(player)));

					if (hasSummon())
					{
						player.sendPacket(new RelationChanged(getSummon(), relation, isAutoAttackable(player)));
					}
				}
			}
		}
	}

	@Override
	public void broadcastPacket(final L2GameServerPacket mov, final int radiusInKnownlist)
	{
		if (!(mov instanceof CharInfo))
		{
			sendPacket(mov);
		}

		mov.setInvisible(isInvisible());

		for (final L2PcInstance player : getKnownList().getKnownPlayers().values())
		{
			if (player == null)
			{
				continue;
			}

			if (isInsideRadius(player, radiusInKnownlist, false, false))
			{
				player.sendPacket(mov);

				if (mov instanceof CharInfo)
				{
					final int relation = getRelation(player);

					final Integer oldrelation = getKnownList().getKnownRelations().get(player.getObjectId());

					if (oldrelation != null && oldrelation != relation)
					{
						player.sendPacket(new RelationChanged(this, relation, isAutoAttackable(player)));

						if (hasSummon())
						{
							player.sendPacket(new RelationChanged(getSummon(), relation, isAutoAttackable(player)));
						}
					}
				}
			}
		}
	}

	/**
	 * @return the Alliance Identifier of the L2PcInstance.
	 */
	@Override
	public int getAllyId()
	{
		if (_clan == null)
		{
			return 0;
		}

		return _clan.getAllyId();
	}

	public int getAllyCrestId()
	{
		if (getClanId() == 0)
		{
			return 0;
		}

		if (getClan().getAllyId() == 0)
		{
			return 0;
		}

		return getClan().getAllyCrestId();
	}

	public void queryGameGuard()
	{
		if (getClient() != null)
		{
			getClient().setGameGuardOk(false);
			sendPacket(GameGuardQuery.STATIC_PACKET);
		}

		if (Config.GAMEGUARD_ENFORCE)
		{
			ThreadPoolManager.getInstance().scheduleGeneral(new GameGuardCheckTask(this), 30 * 1000);
		}
	}

	/**
	 * Send a Server->Client packet StatusUpdate to the L2PcInstance.
	 */
	@Override
	public void sendPacket(final L2GameServerPacket packet)
	{
		if (_client != null)
		{
			if (packet instanceof final NpcHtmlMessage hPacket)
			{
				_lastNpcHtmlMessage = hPacket;
			}

			_client.sendPacket(packet);
		}
	}

	/**
	 * Send SystemMessage packet.
	 *
	 * @param id SystemMessageId
	 */
	@Override
	public void sendPacket(final SystemMessageId id)
	{
		sendPacket(SystemMessage.getSystemMessage(id));
	}

	/**
	 * Manage Interact Task with another L2PcInstance. <B><U> Actions</U> :</B>
	 * <li>If the private store is a STORE_PRIVATE_SELL, send a Server->Client PrivateBuyListSell packet to the L2PcInstance</li>
	 * <li>If the private store is a STORE_PRIVATE_BUY, send a Server->Client PrivateBuyListBuy packet to the L2PcInstance</li>
	 * <li>If the private store is a STORE_PRIVATE_MANUFACTURE, send a Server->Client RecipeShopSellList packet to the L2PcInstance</li>
	 *
	 * @param target The L2Character targeted
	 */
	public void doInteract(final L2Character target)
	{
		if (target instanceof L2PcInstance)
		{
			final L2PcInstance temp = (L2PcInstance) target;

			sendPacket(ActionFailed.STATIC_PACKET);

			switch (temp.getPrivateStoreType())
			{
				case SELL:
				case PACKAGE_SELL:
					sendPacket(new PrivateStoreListSell(this, temp));
					break;
				case BUY:
					sendPacket(new PrivateStoreListBuy(this, temp));
					break;
				case MANUFACTURE:
					sendPacket(new RecipeShopSellList(this, temp));
					break;
				case SELL_BUFF:
					temp.getBuffStore().handleRedirect(this, "buy-list.htm", 0);
					break;
			}
		}
		else
		{
			if (target != null)
			{
				target.onAction(this);
			}
		}
	}

	/**
	 * Manages AutoLoot Task.<br>
	 * <ul>
	 * <li>Send a system message to the player.</li>
	 * <li>Add the item to the player's inventory.</li>
	 * <li>Send a Server->Client packet InventoryUpdate to this player with NewItem (use a new slot) or ModifiedItem (increase amount).</li>
	 * <li>Send a Server->Client packet StatusUpdate to this player with current weight.</li>
	 * </ul>
	 * <font color=#FF0000><B><U>Caution</U>: If a party is in progress, distribute the items between the party members!</b></font>
	 *
	 * @param target    the NPC dropping the item
	 * @param itemId    the item ID
	 * @param itemCount the item count
	 */
	public void doAutoLoot(final L2Attackable target, final int itemId, final long itemCount)
	{
		if (isInParty() && !ItemTable.getInstance().getTemplate(itemId).hasExImmediateEffect())
		{
			getParty().distributeItem(this, itemId, itemCount, false, target);
		}
		else if (itemId == Inventory.ADENA_ID)
		{
			addAdena("Loot", itemCount, target, true);
		}
		else
		{
			addItem("Loot", itemId, itemCount, target, true);
		}
	}

	/**
	 * Method overload for {@link L2PcInstance#doAutoLoot(L2Attackable, int, long)}
	 *
	 * @param target the NPC dropping the item
	 * @param item   the item holder
	 */
	public void doAutoLoot(final L2Attackable target, final ItemHolder item)
	{
		doAutoLoot(target, item.getId(), item.getCount());
	}

	/**
	 * Manage Pickup Task. <B><U> Actions</U> :</B>
	 * <li>Send a Server->Client packet StopMove to this L2PcInstance</li>
	 * <li>Remove the L2ItemInstance from the world and send server->client GetItem packets</li>
	 * <li>Send a System Message to the L2PcInstance : YOU_PICKED_UP_S1_ADENA or YOU_PICKED_UP_S1_S2</li>
	 * <li>Add the Item to the L2PcInstance inventory</li>
	 * <li>Send a Server->Client packet InventoryUpdate to this L2PcInstance with NewItem (use a new slot) or ModifiedItem (increase amount)</li>
	 * <li>Send a Server->Client packet StatusUpdate to this L2PcInstance with current weight</li> <FONT COLOR=#FF0000><B> <U>Caution</U> : If a Party is in progress, distribute Items between party members</B></FONT>
	 *
	 * @param object The L2ItemInstance to pick up
	 */
	@Override
	public void doPickupItem(final L2Object object)
	{
		if (isAlikeDead() || isFakeDeath())
		{
			return;
		}

		getAI().setIntention(CtrlIntention.AI_INTENTION_IDLE);

		if (!(object instanceof L2ItemInstance))
		{
			_log.warning(this + " trying to pickup wrong target." + getTarget());
			return;
		}

		final L2ItemInstance target = (L2ItemInstance) object;

		sendPacket(ActionFailed.STATIC_PACKET);

		final StopMove sm = new StopMove(this);
		sendPacket(sm);

		SystemMessage smsg = null;

		synchronized (target)
		{
			if (!target.isVisible())
			{
				sendPacket(ActionFailed.STATIC_PACKET);
				return;
			}

			if (!target.getDropProtection().tryPickUp(this))
			{
				sendPacket(ActionFailed.STATIC_PACKET);
				smsg = SystemMessage.getSystemMessage(SystemMessageId.FAILED_TO_PICKUP_S1);
				smsg.addItemName(target);
				sendPacket(smsg);
				return;
			}

			if ((isInParty() && getParty().getDistributionType() == PartyDistributionType.FINDERS_KEEPERS || !isInParty()) && !_inventory.validateCapacity(target))
			{
				sendPacket(ActionFailed.STATIC_PACKET);
				sendPacket(SystemMessageId.SLOTS_FULL);
				return;
			}

			if (isInvul() && !canOverrideCond(PcCondOverride.ITEM_CONDITIONS))
			{
				sendPacket(ActionFailed.STATIC_PACKET);
				smsg = SystemMessage.getSystemMessage(SystemMessageId.FAILED_TO_PICKUP_S1);
				smsg.addItemName(target);
				sendPacket(smsg);
				return;
			}

			if (target.getOwnerId() != 0 && target.getOwnerId() != getObjectId() && !isInLooterParty(target.getOwnerId()))
			{
				if (target.getId() == Inventory.ADENA_ID)
				{
					smsg = SystemMessage.getSystemMessage(SystemMessageId.FAILED_TO_PICKUP_S1_ADENA);
					smsg.addLong(target.getCount());
				}
				else if (target.getCount() > 1)
				{
					smsg = SystemMessage.getSystemMessage(SystemMessageId.FAILED_TO_PICKUP_S2_S1_S);
					smsg.addItemName(target);
					smsg.addLong(target.getCount());
				}
				else
				{
					smsg = SystemMessage.getSystemMessage(SystemMessageId.FAILED_TO_PICKUP_S1);
					smsg.addItemName(target);
				}

				sendPacket(ActionFailed.STATIC_PACKET);
				sendPacket(smsg);
				return;
			}

			if (FortSiegeManager.getInstance().isCombat(target.getId()))
			{
				if (!FortSiegeManager.getInstance().checkIfCanPickup(this))
				{
					return;
				}
			}

			if (!EventInterface.getInstance().onPick(this, target))
			{
				sendPacket(SystemMessage.getSystemMessage(SystemMessageId.FAILED_TO_PICKUP_S2_S1_S).addItemName(target).addLong(target.getCount()));
				return;
			}

			if (target.getItemLootShedule() != null && (target.getOwnerId() == getObjectId() || isInLooterParty(target.getOwnerId())))
			{
				target.resetOwnerTimer();
			}

			target.pickupMe(this);

			if (Config.SAVE_DROPPED_ITEM)
			{
				ItemsOnGroundManager.getInstance().removeObject(target);
			}
		}

		if (target.getItem().hasExImmediateEffect())
		{
			final IItemHandler handler = ItemHandler.getInstance().getHandler(target.getEtcItem());

			if (handler == null)
			{
				_log.warning("No item handler registered for item ID: " + target.getId() + ".");
			}
			else
			{
				handler.useItem(this, target, false);
			}

			ItemTable.getInstance().destroyItem("Consume", target, this, null);
		}
		else if (CursedWeaponsManager.getInstance().isCursed(target.getId()))
		{
			addItem("Pickup", target, null, true);
		}
		else if (FortSiegeManager.getInstance().isCombat(target.getId()))
		{
			addItem("Pickup", target, null, true);
		}
		else
		{
			if (target.getItemType() instanceof ArmorType || target.getItemType() instanceof WeaponType)
			{
				if (target.getEnchantLevel() > 0)
				{
					smsg = SystemMessage.getSystemMessage(SystemMessageId.ANNOUNCEMENT_C1_PICKED_UP_S2_S3);
					smsg.addPcName(this);
					smsg.addInt(target.getEnchantLevel());
					smsg.addItemName(target.getId());
					broadcastPacket(smsg, 1400);
				}
				else
				{
					smsg = SystemMessage.getSystemMessage(SystemMessageId.ANNOUNCEMENT_C1_PICKED_UP_S2);
					smsg.addPcName(this);
					smsg.addItemName(target.getId());
					broadcastPacket(smsg, 1400);
				}
			}

			if (isInParty())
			{
				getParty().distributeItem(this, target);
			}
			else if (target.getId() == Inventory.ADENA_ID && getInventory().getAdenaInstance() != null)
			{
				addAdena("Pickup", target.getCount(), null, true);

				ItemTable.getInstance().destroyItem("Pickup", target, this, null);
			}
			else
			{
				addItem("Pickup", target, null, true);

				final L2ItemInstance weapon = getInventory().getPaperdollItem(Inventory.PAPERDOLL_RHAND);

				if (weapon != null)
				{
					final L2EtcItem etcItem = target.getEtcItem();

					if (etcItem != null)
					{
						final EtcItemType itemType = etcItem.getItemType();

						if (weapon.getItemType() == WeaponType.BOW && itemType == EtcItemType.ARROW)
						{
							checkAndEquipArrows();
						}
						else if (weapon.getItemType() == WeaponType.CROSSBOW && itemType == EtcItemType.BOLT)
						{
							checkAndEquipBolts();
						}
					}
				}
			}
		}
	}

	@Override
	public void doAttack(final L2Character target)
	{
		super.doAttack(target);
		setRecentFakeDeath(false);
	}

	@Override
	public void doCast(final Skill skill)
	{
		if (getCurrentSkill() != null)
		{
			if (!checkUseMagicConditions(skill, getCurrentSkill().isCtrlPressed(), getCurrentSkill().isShiftPressed()))
			{
				setIsCastingNow(false);
				return;
			}
		}

		super.doCast(skill);
		setRecentFakeDeath(false);
	}

	public boolean canOpenPrivateStore()
	{
		return !isAlikeDead() && !isInOlympiadMode() && !isMounted() && !isInsideZone(ZoneId.NO_STORE) && !isInsideZone(ZoneId.SHIFT) && !isCastingNow() && getTournament() == null && !EventContainer.getInstance().isRegistered(getObjectId());
	}

	public void tryOpenPrivateBuyStore()
	{
		if (canOpenPrivateStore())
		{
			if (getPrivateStoreType() == PrivateStoreType.BUY || getPrivateStoreType() == PrivateStoreType.BUY_MANAGE)
			{
				setPrivateStoreType(PrivateStoreType.NONE);
			}

			if (getPrivateStoreType() == PrivateStoreType.NONE)
			{
				if (isSitting())
				{
					standUp();
				}

				setPrivateStoreType(PrivateStoreType.BUY_MANAGE);
				sendPacket(new PrivateStoreManageListBuy(this));
			}
		}
		else
		{
			if (isInsideZone(ZoneId.NO_STORE))
			{
				sendPacket(SystemMessageId.NO_PRIVATE_STORE_HERE);
			}

			sendPacket(ActionFailed.STATIC_PACKET);
		}
	}

	public void tryOpenPrivateSellStore(final boolean isPackageSale)
	{
		if (canOpenPrivateStore())
		{
			if (getPrivateStoreType() == PrivateStoreType.SELL || getPrivateStoreType() == PrivateStoreType.SELL_MANAGE || getPrivateStoreType() == PrivateStoreType.PACKAGE_SELL)
			{
				setPrivateStoreType(PrivateStoreType.NONE);
			}

			if (getPrivateStoreType() == PrivateStoreType.NONE)
			{
				if (isSitting())
				{
					standUp();
				}

				setPrivateStoreType(PrivateStoreType.SELL_MANAGE);
				sendPacket(new PrivateStoreManageListSell(this, isPackageSale));
			}
		}
		else
		{
			if (isInsideZone(ZoneId.NO_STORE))
			{
				sendPacket(SystemMessageId.NO_PRIVATE_STORE_HERE);
			}

			sendPacket(ActionFailed.STATIC_PACKET);
		}
	}

	public final PreparedListContainer getMultiSell()
	{
		return _currentMultiSell;
	}

	public final void setMultiSell(final PreparedListContainer list)
	{
		_currentMultiSell = list;
	}

	@Override
	public boolean isTransformed()
	{
		return _transformation != null && !_transformation.isStance();
	}

	public boolean isInStance()
	{
		return _transformation != null && _transformation.isStance();
	}

	public void transform(final Transform transformation)
	{
		if (_transformation != null)
		{
			final SystemMessage msg = SystemMessage.getSystemMessage(SystemMessageId.YOU_ALREADY_POLYMORPHED_AND_CANNOT_POLYMORPH_AGAIN);
			sendPacket(msg);
			return;
		}

		setQueuedSkill(null, false, false);

		if (isMounted())
		{
			dismount();
		}

		_transformation = transformation;

		getEffectList().stopAllToggles();
		transformation.onTransform(this);
		sendSkillList();
		sendPacket(new SkillCoolTime(this));
		broadcastUserInfo();

		EventDispatcher.getInstance().notifyEventAsync(new OnPlayerTransform(this, transformation.getId()), this);
	}

	@Override
	public void untransform()
	{
		if (_transformation != null)
		{
			setQueuedSkill(null, false, false);

			_transformation.onUntransform(this);
			_transformation = null;

			getEffectList().stopSkillEffects(false, AbnormalType.TRANSFORM);
			sendSkillList();
			sendPacket(new SkillCoolTime(this));
			broadcastUserInfo();

			EventDispatcher.getInstance().notifyEventAsync(new OnPlayerTransform(this, 0), this);
		}
	}

	@Override
	public Transform getTransformation()
	{
		return _transformation;
	}

	/**
	 * This returns the transformation Id of the current transformation. For example, if a player is transformed as a Buffalo, and then picks up the Zariche, the transform Id returned will be that of the Zariche, and NOT the Buffalo.
	 *
	 * @return Transformation Id
	 */
	public int getTransformationId()
	{
		return isTransformed() ? getTransformation().getId() : 0;
	}

	public int getTransformationDisplayId()
	{
		return isTransformed() ? getTransformation().getDisplayId() : 0;
	}

	/**
	 * Set a target. <B><U> Actions</U> :</B>
	 * <ul>
	 * <li>Remove the L2PcInstance from the _statusListener of the old target if it was a L2Character</li>
	 * <li>Add the L2PcInstance to the _statusListener of the new target if it's a L2Character</li>
	 * <li>Target the new L2Object (add the target to the L2PcInstance _target, _knownObject and L2PcInstance to _KnownObject of the L2Object)</li>
	 * </ul>
	 *
	 * @param newTarget The L2Object to target
	 */
	@Override
	public void setTarget(L2Object newTarget)
	{
		if (newTarget != null)
		{
			final boolean isInParty = newTarget.isPlayer() && isInParty() && getParty().containsPlayer(newTarget.getActingPlayer());

			if (!isInParty && Math.abs(newTarget.getZ() - getZ()) > 1000)
			{
				newTarget = null;
			}

			if (newTarget != null && !isInParty && !newTarget.isVisible())
			{
				newTarget = null;
			}

			if (!isGM() && newTarget instanceof L2Vehicle)
			{
				newTarget = null;
			}
		}

		final L2Object oldTarget = getTarget();

		if (oldTarget != null)
		{
			if (oldTarget.equals(newTarget))
			{
				if (newTarget != null && newTarget.getObjectId() != getObjectId())
				{
					sendPacket(new ValidateLocation(newTarget));
				}

				return;
			}

			oldTarget.removeStatusListener(this);
		}

		if (newTarget instanceof L2Character)
		{
			final L2Character target = (L2Character) newTarget;

			if (newTarget.getObjectId() != getObjectId())
			{
				sendPacket(new ValidateLocation(target));
			}

			sendPacket(new MyTargetSelected(this, target));

			target.addStatusListener(this);

			final StatusUpdate su = new StatusUpdate(target);
			su.addAttribute(StatusUpdate.MAX_HP, target.getMaxHp());
			su.addAttribute(StatusUpdate.CUR_HP, (int) target.getCurrentHp());
			sendPacket(su);

			Broadcast.toKnownPlayers(this, new TargetSelected(getObjectId(), newTarget.getObjectId(), getX(), getY(), getZ()));
		}

		if (newTarget == null && getTarget() != null)
		{
			broadcastPacket(new TargetUnselected(this));
		}

		super.setTarget(newTarget);
	}

	/**
	 * Return the active weapon instance (always equipped in the right hand).
	 */
	@Override
	public L2ItemInstance getActiveWeaponInstance()
	{
		return getInventory().getPaperdollItem(Inventory.PAPERDOLL_RHAND);
	}

	/**
	 * Return the active weapon item (always equiped in the right hand).
	 */
	@Override
	public L2Weapon getActiveWeaponItem()
	{
		final L2ItemInstance weapon = getActiveWeaponInstance();

		if (weapon == null)
		{
			return getFistsWeaponItem();
		}

		return (L2Weapon) weapon.getItem();
	}

	public L2ItemInstance getChestArmorInstance()
	{
		return getInventory().getPaperdollItem(Inventory.PAPERDOLL_CHEST);
	}

	public L2ItemInstance getLegsArmorInstance()
	{
		return getInventory().getPaperdollItem(Inventory.PAPERDOLL_LEGS);
	}

	public L2Armor getActiveChestArmorItem()
	{
		final L2ItemInstance armor = getChestArmorInstance();

		if (armor == null)
		{
			return null;
		}

		return (L2Armor) armor.getItem();
	}

	public L2Armor getActiveLegsArmorItem()
	{
		final L2ItemInstance legs = getLegsArmorInstance();

		if (legs == null)
		{
			return null;
		}

		return (L2Armor) legs.getItem();
	}

	public boolean isWearingHeavyArmor()
	{
		final L2ItemInstance legs = getLegsArmorInstance();
		final L2ItemInstance armor = getChestArmorInstance();

		if (armor != null && legs != null)
		{
			if (legs.getItemType() == ArmorType.HEAVY && armor.getItemType() == ArmorType.HEAVY)
			{
				return true;
			}
		}
		if (armor != null)
		{
			if (getInventory().getPaperdollItem(Inventory.PAPERDOLL_CHEST).getItem().getBodyPart() == L2Item.SLOT_FULL_ARMOR && armor.getItemType() == ArmorType.HEAVY)
			{
				return true;
			}
		}
		return false;
	}

	public boolean isWearingLightArmor()
	{
		final L2ItemInstance legs = getLegsArmorInstance();
		final L2ItemInstance armor = getChestArmorInstance();

		if (armor != null && legs != null)
		{
			if (legs.getItemType() == ArmorType.LIGHT && armor.getItemType() == ArmorType.LIGHT)
			{
				return true;
			}
		}
		if (armor != null)
		{
			if (getInventory().getPaperdollItem(Inventory.PAPERDOLL_CHEST).getItem().getBodyPart() == L2Item.SLOT_FULL_ARMOR && armor.getItemType() == ArmorType.LIGHT)
			{
				return true;
			}
		}
		return false;
	}

	public boolean isWearingMagicArmor()
	{
		final L2ItemInstance legs = getLegsArmorInstance();
		final L2ItemInstance armor = getChestArmorInstance();

		if (armor != null && legs != null)
		{
			if (legs.getItemType() == ArmorType.MAGIC && armor.getItemType() == ArmorType.MAGIC)
			{
				return true;
			}
		}
		if (armor != null)
		{
			if (getInventory().getPaperdollItem(Inventory.PAPERDOLL_CHEST).getItem().getBodyPart() == L2Item.SLOT_FULL_ARMOR && armor.getItemType() == ArmorType.MAGIC)
			{
				return true;
			}
		}
		return false;
	}

	public boolean isMarried()
	{
		return _married;
	}

	public void setMarried(final boolean state)
	{
		_married = state;
	}

	public boolean isEngageRequest()
	{
		return _engagerequest;
	}

	public void setEngageRequest(final boolean state, final int playerid)
	{
		_engagerequest = state;
		_engageid = playerid;
	}

	public void setMarryRequest(final boolean state)
	{
		_marryrequest = state;
	}

	public boolean isMarryRequest()
	{
		return _marryrequest;
	}

	public void setMarryAccepted(final boolean state)
	{
		_marryaccepted = state;
	}

	public boolean isMarryAccepted()
	{
		return _marryaccepted;
	}

	public int getEngageId()
	{
		return _engageid;
	}

	public int getPartnerId()
	{
		return _partnerId;
	}

	public void setPartnerId(final int partnerid)
	{
		_partnerId = partnerid;
	}

	public int getCoupleId()
	{
		return _coupleId;
	}

	public void setCoupleId(final int coupleId)
	{
		_coupleId = coupleId;
	}

	public void engageAnswer(final int answer)
	{
		if (!_engagerequest)
		{
			return;
		}
		else if (_engageid == 0)
		{
			return;
		}
		else
		{
			final L2PcInstance ptarget = L2World.getInstance().getPlayer(_engageid);
			setEngageRequest(false, 0);

			if (ptarget != null)
			{
				if (answer == 1)
				{
					CoupleManager.getInstance().createCouple(ptarget, L2PcInstance.this);
					ptarget.sendMessage("Request to Engage has been >ACCEPTED<");
				}
				else
				{
					ptarget.sendMessage("Request to Engage has been >DENIED<!");
				}
			}
		}
	}

	/**
	 * Return the secondary weapon instance (always equiped in the left hand).
	 */
	@Override
	public L2ItemInstance getSecondaryWeaponInstance()
	{
		return getInventory().getPaperdollItem(Inventory.PAPERDOLL_LHAND);
	}

	/**
	 * Return the secondary L2Item item (always equiped in the left hand).<BR>
	 * Arrows, Shield..<BR>
	 */
	@Override
	public L2Item getSecondaryWeaponItem()
	{
		final L2ItemInstance item = getInventory().getPaperdollItem(Inventory.PAPERDOLL_LHAND);

		if (item != null)
		{
			return item.getItem();
		}

		return null;
	}

	/**
	 * Kill the L2Character, Apply Death Penalty, Manage gain/loss Karma and Item Drop. <B><U> Actions</U> :</B>
	 * <li>Reduce the Experience of the L2PcInstance in function of the calculated Death Penalty</li>
	 * <li>If necessary, unsummon the Pet of the killed L2PcInstance</li>
	 * <li>Manage Karma gain for attacker and Karam loss for the killed L2PcInstance</li>
	 * <li>If the killed L2PcInstance has Karma, manage Drop Item</li>
	 * <li>Kill the L2PcInstance</li>
	 *
	 * @param killer
	 */
	@Override
	public boolean doDie(final L2Character killer)
	{
		if (!super.doDie(killer))
		{
			return false;
		}

		EventInterface.getInstance().onDie(this);

		if (isInTournament())
		{
			getTournament().checkWinner();
		}

		setDeathTime(System.currentTimeMillis());

		if (killer != null)
		{
			EventInterface.getInstance().onKill(this, killer);

			final L2PcInstance pk = killer.getActingPlayer();

			if (pk != null)
			{
				EventDispatcher.getInstance().notifyEventAsync(new OnPlayerPvPKill(pk, this), this);

				DailyMissionData.getInstance().notifyEventAsync(new OnMissionEventPlayerKill(pk, this), pk);

				FactionData.getInstance().evalAction(pk, this, null, FactionActionType.DEATH);

				if (Config.ANNOUNCE_PK_PVP && !pk.isGM())
				{
					String msg = "";

					if (getPvpFlag() == 0)
					{
						msg = Config.ANNOUNCE_PK_MSG.replace("$killer", pk.getName()).replace("$target", getName());

						if (Config.ANNOUNCE_PK_PVP_NORMAL_MESSAGE)
						{
							final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.S1);
							sm.addString(msg);
							Broadcast.toAllOnlinePlayers(sm);
						}
						else
						{
							Broadcast.toAllOnlinePlayers(msg, false);
						}
					}
					else if (getPvpFlag() != 0)
					{
						msg = Config.ANNOUNCE_PVP_MSG.replace("$killer", pk.getName()).replace("$target", getName());

						if (Config.ANNOUNCE_PK_PVP_NORMAL_MESSAGE)
						{
							final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.S1);
							sm.addString(msg);
							Broadcast.toAllOnlinePlayers(sm);
						}
						else
						{
							Broadcast.toAllOnlinePlayers(msg, false);
						}
					}
				}
			}

			if (killer.isPlayable())
			{
				getCounter().increaseCounter(CounterType.DEATH_BY_PLAYER);
			}
			else if (killer.isMonster())
			{
				getCounter().increaseCounter(CounterType.DEATH_BY_MONSTER);
			}

			getCounter().increaseCounter(CounterType.DEATH);

			broadcastStatusUpdate();
			setExpBeforeDeath(0);

			if (isCursedWeaponEquipped())
			{
				CursedWeaponsManager.getInstance().drop(_cursedWeaponEquippedId, killer);
			}
			else if (isCombatFlagEquipped())
			{
				if (TerritoryWarManager.getInstance().isTWInProgress())
				{
					TerritoryWarManager.getInstance().dropCombatFlag(this, true, false);
				}
				else
				{
					final Fort fort = FortManager.getInstance().getFort(this);

					if (fort != null)
					{
						FortSiegeManager.getInstance().dropCombatFlag(this, fort.getResidenceId());
					}
					else
					{
						getInventory().unEquipItemInBodySlot(getInventory().getSlotFromItem(getInventory().getItemByItemId(9819)));
						destroyItem("CombatFlag", getInventory().getItemByItemId(9819), null, true);
					}
				}
			}
			else
			{
				final boolean insidePvpZone = isInsideZone(ZoneId.PVP) || isInsideZone(ZoneId.SIEGE);

				if (pk == null || !pk.isCursedWeaponEquipped())
				{
					onDieDropItem(killer);

					if (!insidePvpZone)
					{
						if (pk != null && pk.getClan() != null && getClan() != null && !isAcademyMember() && !pk.isAcademyMember())
						{
							if (_clan.isAtWarWith(pk.getClanId()) && pk.getClan().isAtWarWith(_clan.getId()) || isInSiege() && pk.isInSiege())
							{
								if (AntiFeedManager.getInstance().check(killer, this))
								{
									if (getClan().getReputationScore() > 0)
									{
										pk.getClan().addReputationScore(Config.REPUTATION_SCORE_PER_KILL, false);
									}

									if (pk.getClan().getReputationScore() > 0)
									{
										_clan.takeReputationScore(Config.REPUTATION_SCORE_PER_KILL, false);
									}
								}
							}
						}
					}

					if (Config.ALT_GAME_DELEVEL && !isLucky() && !insidePvpZone && !isBlockingDeathExpPenalty() && !isInsideZone(ZoneId.SHIFT))
					{
						calculateDeathExpPenalty(killer, isAtWarWith(pk));
					}
				}
			}
		}

		if (isMounted())
		{
			stopFeed();
		}

		synchronized (this)
		{
			if (isFakeDeath())
			{
				stopFakeDeath(true);
			}
		}

		if (!_cubics.isEmpty())
		{
			for (final L2CubicInstance cubic : _cubics.values())
			{
				cubic.stopAction();
				cubic.cancelDisappear();
			}

			_cubics.clear();
		}

		if (isChannelized())
		{
			getSkillChannelized().abortChannelization();
		}

		if (isInParty() && getParty().isInDimensionalRift())
		{
			getParty().getDimensionalRift().getDeadMemberList().add(this);
		}

		if (getAgathionId() != 0)
		{
			setAgathionId(0);
		}

		calculateDeathPenaltyBuffLevel(killer);

		stopRentPet();
		stopWaterTask();

		AntiFeedManager.getInstance().setLastDeathTime(getObjectId());

		return true;
	}

	private void onDieDropItem(final L2Character killer)
	{
		if (killer == null)
		{
			return;
		}

		final L2PcInstance pk = killer.getActingPlayer();

		if (getKarma() <= 0 && pk != null && pk.getClan() != null && getClan() != null && pk.getClan().isAtWarWith(getClanId()))
		{
			return;
		}

		if (isInsideZone(ZoneId.SHIFT) || isInEvent() || isInTournament())
		{
			return;
		}

		if ((!isInsideZone(ZoneId.PVP) || pk == null) && (!isGM() || Config.KARMA_DROP_GM))
		{
			boolean isKarmaDrop = false;
			final boolean isKillerNpc = killer instanceof L2Npc;
			final int pkLimit = Config.KARMA_PK_LIMIT;

			int dropEquip = 0;
			int dropEquipWeapon = 0;
			int dropItem = 0;
			int dropLimit = 0;
			int dropPercent = 0;

			if (getKarma() > 0 && getPkKills() >= pkLimit)
			{
				isKarmaDrop = true;
				dropPercent = Config.KARMA_RATE_DROP;
				dropEquip = Config.KARMA_RATE_DROP_EQUIP;
				dropEquipWeapon = Config.KARMA_RATE_DROP_EQUIP_WEAPON;
				dropItem = Config.KARMA_RATE_DROP_ITEM;
				dropLimit = Config.KARMA_DROP_LIMIT;
			}
			else if (isKillerNpc && getLevel() > 4 && !isFestivalParticipant())
			{
				dropPercent = Config.PLAYER_RATE_DROP;
				dropEquip = Config.PLAYER_RATE_DROP_EQUIP;
				dropEquipWeapon = Config.PLAYER_RATE_DROP_EQUIP_WEAPON;
				dropItem = Config.PLAYER_RATE_DROP_ITEM;
				dropLimit = Config.PLAYER_DROP_LIMIT;
			}

			if (dropPercent > 0 && Rnd.get(100) < dropPercent)
			{
				int dropCount = 0;

				int itemDropPercent = 0;

				for (final L2ItemInstance itemDrop : getInventory().getItems())
				{
					if (itemDrop.isShadowItem() || itemDrop.isTimeLimitedItem() || !itemDrop.isDroppable() || itemDrop.getId() == Inventory.ADENA_ID || itemDrop.getItem().getType2() == L2Item.TYPE2_QUEST || hasSummon() && getSummon().getControlObjectId() == itemDrop.getObjectId() || Arrays.binarySearch(Config.KARMA_LIST_NONDROPPABLE_ITEMS, itemDrop.getId()) >= 0 || Arrays.binarySearch(Config.KARMA_LIST_NONDROPPABLE_PET_ITEMS, itemDrop.getId()) >= 0)
					{
						continue;
					}

					if (itemDrop.isEquipped())
					{
						itemDropPercent = itemDrop.getItem().getType2() == L2Item.TYPE2_WEAPON ? dropEquipWeapon : dropEquip;
						getInventory().unEquipItemInSlot(itemDrop.getLocationSlot());
					}
					else
					{
						itemDropPercent = dropItem;
					}

					if (Rnd.get(100) < itemDropPercent)
					{
						dropItem("DieDrop", itemDrop, killer, true);

						if (isKarmaDrop)
						{
							_log.warning(getName() + " has karma and dropped id = " + itemDrop.getId() + ", count = " + itemDrop.getCount());
						}
						else
						{
							_log.warning(getName() + " dropped id = " + itemDrop.getId() + ", count = " + itemDrop.getCount());
						}

						if (++dropCount >= dropLimit)
						{
							break;
						}
					}
				}
			}
		}
	}

	public void onKillUpdatePvPKarma(final L2Character target)
	{
		if (target == null || !target.isPlayable())
		{
			return;
		}

		final L2PcInstance targetPlayer = target.getActingPlayer();

		if (targetPlayer == null || targetPlayer == this)
		{
			return;
		}

		if (isCursedWeaponEquipped() && target.isPlayer())
		{
			CursedWeaponsManager.getInstance().increaseKills(_cursedWeaponEquippedId);
			return;
		}

		if (isInDuel() && targetPlayer.isInDuel())
		{
			return;
		}

		if (isInsideZone(ZoneId.PVP) || targetPlayer.isInsideZone(ZoneId.PVP))
		{
			if (getSiegeState() > 0 && targetPlayer.getSiegeState() > 0 && getSiegeState() != targetPlayer.getSiegeState())
			{
				final L2Clan killerClan = getClan();
				final L2Clan targetClan = targetPlayer.getClan();

				if (killerClan != null && targetClan != null)
				{
					killerClan.addSiegeKill();
					targetClan.addSiegeDeath();
				}
			}

			return;
		}

		if (checkIfPvP(target) && targetPlayer.getPvpFlag() != 0 || Config.FACTION_ENABLED || isInsideZone(ZoneId.PVP) && targetPlayer.isInsideZone(ZoneId.PVP) || isInsideZone(ZoneId.SHIFT) && targetPlayer.isInsideZone(ZoneId.SHIFT))
		{
			increasePvpKills(target);
		}
		else
		{
			if (targetPlayer.getClan() != null && getClan() != null && getClan().isAtWarWith(targetPlayer.getClanId()) && targetPlayer.getClan().isAtWarWith(getClanId()) && targetPlayer.getPledgeType() != L2Clan.SUBUNIT_ACADEMY && getPledgeType() != L2Clan.SUBUNIT_ACADEMY)
			{
				increasePvpKills(target);
				return;
			}

			if (targetPlayer.getKarma() > 0)
			{
				if (Config.KARMA_AWARD_PK_KILL)
				{
					increasePvpKills(target);
				}
			}
			else if (targetPlayer.getPvpFlag() == 0)
			{
				increasePkKillsAndKarma(target);
				stopPvPFlag();
				checkItemRestriction();
			}
		}
	}

	/**
	 * Increase the pvp kills count and send the info to the player
	 *
	 * @param target
	 */
	public void increasePvpKills(final L2Character target)
	{
		if (target instanceof L2PcInstance && AntiFeedManager.getInstance().check(this, target))
		{
			if (!AntiFeedData.getInstance().checkPvP(this, target.getActingPlayer()))
			{
				return;
			}

			setPvpKills(getPvpKills() + 1);

			if (Config.KILLING_SPREE_ENABLED)
			{
				_versus.increaseKills();
			}

			Config.PVP_REWARD_ITEM.stream().filter(s -> Rnd.nextDouble() <= s.getChance()).forEach(s -> addItem(getClass().getSimpleName(), s, this, true));
			addExpAndSp(Config.PVP_REWARD_EXP, Config.PVP_REWARD_SP, false, false);

			KillingSpreeData.getInstance().increaseKill(this);

			sendPacket(new UserInfo(this));
			sendPacket(new ExBrExtraUserInfo(this));

			if (isInParty())
			{
				for (final L2PcInstance member : getParty().getMembers())
				{
					if (member.getObjectId() != target.getObjectId() && !member.isDead() && isInsideRadius(member, Config.ALT_PARTY_RANGE2, false, false) && ClassId.isSupport(member.getClassId()) && Rnd.nextDouble() <= 20)
					{
						member.setPvpKills(member.getPvpKills() + 1);

						member.sendPacket(SystemMessage.sendString("You received a synergy pvp kill."));
					}
				}
			}

			updatePvPColorAndSkill();
		}
	}

	/**
	 * Increase pk count, karma and send the info to the player
	 *
	 * @param target
	 */
	public void increasePkKillsAndKarma(final L2Character target)
	{
		if (target == null || !target.isPlayable())
		{
			return;
		}

		setKarma(getKarma() + Formulas.calculateKarmaGain(getPkKills(), target.isSummon()));

		if (target.isPlayer())
		{
			setPkKills(getPkKills() + 1);
		}

		sendPacket(new UserInfo(this));
		sendPacket(new ExBrExtraUserInfo(this));
	}

	public void updatePvPStatus()
	{
		if (Config.FACTION_ENABLED || isInsideZone(ZoneId.PVP) || isInsideZone(ZoneId.SHIFT))
		{
			return;
		}

		setPvpFlagLasts(System.currentTimeMillis() + Config.PVP_NORMAL_TIME);

		if (getPvpFlag() == 0)
		{
			startPvPFlag();
		}
	}

	public void updatePvPStatus(final L2Character target)
	{
		final L2PcInstance targetPlayer = target.getActingPlayer();

		if (targetPlayer == null)
		{
			return;
		}

		if (isInDuel() && targetPlayer.getDuelId() == getDuelId())
		{
			return;
		}

		if (Config.FACTION_ENABLED || isInsideZone(ZoneId.SHIFT) || targetPlayer.isInsideZone(ZoneId.SHIFT))
		{
			return;
		}

		if ((!isInsideZone(ZoneId.PVP) || !targetPlayer.isInsideZone(ZoneId.PVP)) && targetPlayer.getKarma() == 0)
		{
			if (checkIfPvP(targetPlayer))
			{
				setPvpFlagLasts(System.currentTimeMillis() + Config.PVP_PVP_TIME);
			}
			else
			{
				setPvpFlagLasts(System.currentTimeMillis() + Config.PVP_NORMAL_TIME);
			}

			if (getPvpFlag() == 0)
			{
				startPvPFlag();
			}
		}
	}

	/**
	 * @return {@code true} if player has Lucky effect and is level 9 or less
	 */
	public boolean isLucky()
	{
		return getLevel() <= 9 && isAffectedBySkill(CommonSkill.LUCKY.getId());
	}

	/**
	 * Restore the specified % of experience this L2PcInstance has lost and sends a Server->Client StatusUpdate packet.
	 *
	 * @param restorePercent
	 */
	public void restoreExp(final double restorePercent)
	{
		if (getExpBeforeDeath() > 0)
		{
			getStat().addExp(Math.round((getExpBeforeDeath() - getExp()) * restorePercent / 100));
			setExpBeforeDeath(0);
		}
	}

	/**
	 * Reduce the Experience (and level if necessary) of the L2PcInstance in function of the calculated Death Penalty.<BR>
	 * <B><U> Actions</U> :</B>
	 * <li>Calculate the Experience loss</li>
	 * <li>Set the value of _expBeforeDeath</li>
	 * <li>Set the new Experience value of the L2PcInstance and Decrease its level if necessary</li>
	 * <li>Send a Server->Client StatusUpdate packet with its new Experience</li>
	 *
	 * @param killer
	 * @param atWar
	 */
	public void calculateDeathExpPenalty(final L2Character killer, final boolean atWar)
	{
		final int level = getLevel();

		double percentLost = PlayerXpPercentLostData.getInstance().getXpPercent(getLevel());

		if (killer != null)
		{
			if (killer.isRaid())
			{
				percentLost *= calcStat(Stats.REDUCE_EXP_LOST_BY_RAID, 1);
			}
			else if (killer.isMonster())
			{
				percentLost *= calcStat(Stats.REDUCE_EXP_LOST_BY_MOB, 1);
			}
			else if (killer.isPlayable())
			{
				percentLost *= calcStat(Stats.REDUCE_EXP_LOST_BY_PVP, 1);
			}
		}

		if (getKarma() > 0)
		{
			percentLost *= Config.RATE_KARMA_EXP_LOST;
		}

		long lostExp = 0;

		if (level < ExperienceData.getInstance().getMaxLevel())
		{
			lostExp = Math.round((getStat().getExpForLevel(level + 1) - getStat().getExpForLevel(level)) * percentLost / 100);
		}
		else
		{
			lostExp = Math.round((getStat().getExpForLevel(ExperienceData.getInstance().getMaxLevel()) - getStat().getExpForLevel(ExperienceData.getInstance().getMaxLevel() - 1)) * percentLost / 100);
		}

		if (isFestivalParticipant() || atWar)
		{
			lostExp /= 4.0;
		}

		setExpBeforeDeath(getExp());

		if (getNevit().isAdventBlessingActive())
		{
			lostExp = 0;
		}

		getStat().addExp(-lostExp);
	}

	public boolean isPartyWaiting()
	{
		return PartyMatchWaitingList.getInstance().getPlayers().contains(this);
	}

	public void setPartyRoom(final int id)
	{
		_partyroom = id;
	}

	public int getPartyRoom()
	{
		return _partyroom;
	}

	public boolean isInPartyMatchRoom()
	{
		return _partyroom > 0;
	}

	/**
	 * Stop the HP/MP/CP Regeneration task. <B><U> Actions</U> :</B>
	 * <li>Set the RegenActive flag to False</li>
	 * <li>Stop the HP/MP/CP Regeneration task</li>
	 */
	public void stopAllTimers()
	{
		stopHpMpRegeneration();
		stopWarnUserTakeBreak();
		stopWaterTask();
		stopFeed();
		clearPetData();
		storePetFood(_mountNpcId);
		stopRentPet();
		stopPvpRegTask();
		stopSoulTask();
		stopChargeTask();
		stopFameTask();
		stopVitalityTask();
		stopNevitHourglassTask();
		stopRecoGiveTask();
		getService().getServices().forEach(AbstractService::cancelTask);

		_autoPotion.values().forEach(s -> s.cancel(true));
		_scheduledTasks.values().forEach(s -> s.forEach(k -> k.cancel(true)));
	}

	@Override
	public L2Summon getSummon()
	{
		return _summon;
	}

	/**
	 * @return the L2Decoy of the L2PcInstance or null.
	 */
	public L2Decoy getDecoy()
	{
		return _decoy;
	}

	/**
	 * @return the L2Trap of the L2PcInstance or null.
	 */
	public L2TrapInstance getTrap()
	{
		return _trap;
	}

	/**
	 * Set the L2Summon of the L2PcInstance.
	 *
	 * @param summon
	 */
	public void setPet(final L2Summon summon)
	{
		_summon = summon;
	}

	/**
	 * Set the L2Decoy of the L2PcInstance.
	 *
	 * @param decoy
	 */
	public void setDecoy(final L2Decoy decoy)
	{
		_decoy = decoy;
	}

	/**
	 * Set the L2Trap of this L2PcInstance
	 *
	 * @param trap
	 */
	public void setTrap(final L2TrapInstance trap)
	{
		_trap = trap;
	}

	/**
	 * Gets the players tamed beasts.
	 *
	 * @return the tamed beasts
	 */
	public Set<L2TamedBeastInstance> getTamedBeasts()
	{
		if (_tamedBeasts == null)
		{
			synchronized (this)
			{
				if (_tamedBeasts == null)
				{
					_tamedBeasts = ConcurrentHashMap.newKeySet(1);
				}
			}
		}

		return _tamedBeasts;
	}

	/**
	 * Verifies if the player has tamed beasts.
	 *
	 * @return {@code true} if the player has tamed beasts
	 */
	public boolean hasTamedBeasts()
	{
		return _tamedBeasts != null && !_tamedBeasts.isEmpty();
	}

	/**
	 * Adds a tamed beast to the player.
	 *
	 * @param tamedBeast the tamed beast
	 */
	public void addTamedBeast(final L2TamedBeastInstance tamedBeast)
	{
		getTamedBeasts().add(tamedBeast);
	}

	/**
	 * @param tamedBeast
	 */
	public void removeTamedBeast(final L2TamedBeastInstance tamedBeast)
	{
		if (hasTamedBeasts())
		{
			_tamedBeasts.remove(tamedBeast);
		}
	}

	/**
	 * @return the L2PcInstance requester of a transaction (ex : FriendInvite, JoinAlly, JoinParty...).
	 */
	public L2Request getRequest()
	{
		return _request;
	}

	/**
	 * Set the L2PcInstance requester of a transaction (ex : FriendInvite, JoinAlly, JoinParty...).
	 *
	 * @param requester
	 */
	public void setActiveRequester(final L2PcInstance requester)
	{
		_activeRequester = requester;
	}

	/**
	 * @return the L2PcInstance requester of a transaction (ex : FriendInvite, JoinAlly, JoinParty...).
	 */
	public L2PcInstance getActiveRequester()
	{
		final L2PcInstance requester = _activeRequester;

		if (requester != null)
		{
			if (requester.isRequestExpired() && _activeTradeList == null)
			{
				_activeRequester = null;
			}
		}

		return _activeRequester;
	}

	/**
	 * @return True if a transaction is in progress.
	 */
	public boolean isProcessingRequest()
	{
		return getActiveRequester() != null || _requestExpireTime > GameTimeController.getInstance().getGameTicks();
	}

	/**
	 * @return True if a transaction is in progress.
	 */
	public boolean isProcessingTransaction()
	{
		return getActiveRequester() != null || _activeTradeList != null || _requestExpireTime > GameTimeController.getInstance().getGameTicks();
	}

	/**
	 * Select the Warehouse to be used in next activity.
	 *
	 * @param partner
	 */
	public void onTransactionRequest(final L2PcInstance partner)
	{
		_requestExpireTime = GameTimeController.getInstance().getGameTicks() + REQUEST_TIMEOUT * GameTimeController.TICKS_PER_SECOND;
		partner.setActiveRequester(this);
	}

	/**
	 * Return true if last request is expired.
	 *
	 * @return
	 */
	public boolean isRequestExpired()
	{
		return !(_requestExpireTime > GameTimeController.getInstance().getGameTicks());
	}

	/**
	 * Select the Warehouse to be used in next activity.
	 */
	public void onTransactionResponse()
	{
		_requestExpireTime = 0;
	}

	/**
	 * Select the Warehouse to be used in next activity.
	 *
	 * @param warehouse
	 */
	public void setActiveWarehouse(final ItemContainer warehouse)
	{
		_activeWarehouse = warehouse;
	}

	/**
	 * @return active Warehouse.
	 */
	public ItemContainer getActiveWarehouse()
	{
		return _activeWarehouse;
	}

	/**
	 * Select the TradeList to be used in next activity.
	 *
	 * @param tradeList
	 */
	public void setActiveTradeList(final TradeList tradeList)
	{
		_activeTradeList = tradeList;
	}

	/**
	 * @return active TradeList.
	 */
	public TradeList getActiveTradeList()
	{
		return _activeTradeList;
	}

	public void onTradeStart(final L2PcInstance partner)
	{
		_activeTradeList = new TradeList(this);
		_activeTradeList.setPartner(partner);

		final SystemMessage msg = SystemMessage.getSystemMessage(SystemMessageId.BEGIN_TRADE_WITH_C1);
		msg.addPcName(partner);
		sendPacket(msg);
		sendPacket(new TradeStart(this));
	}

	public void onTradeConfirm(final L2PcInstance partner)
	{
		final SystemMessage msg = SystemMessage.getSystemMessage(SystemMessageId.C1_CONFIRMED_TRADE);
		msg.addPcName(partner);
		sendPacket(msg);
		sendPacket(TradeOtherDone.STATIC_PACKET);
	}

	public void onTradeCancel(final L2PcInstance partner)
	{
		if (_activeTradeList == null)
		{
			return;
		}

		_activeTradeList.lockTrade();
		_activeTradeList = null;

		sendPacket(new TradeDone(0));
		final SystemMessage msg = SystemMessage.getSystemMessage(SystemMessageId.C1_CANCELED_TRADE);
		msg.addPcName(partner);
		sendPacket(msg);
	}

	public void onTradeFinish(final boolean successfull)
	{
		_activeTradeList = null;
		sendPacket(new TradeDone(1));

		if (successfull)
		{
			sendPacket(SystemMessageId.TRADE_SUCCESSFUL);
		}
	}

	public void startTrade(final L2PcInstance partner)
	{
		onTradeStart(partner);
		partner.onTradeStart(this);
	}

	public void cancelActiveTrade()
	{
		if (_activeTradeList == null)
		{
			return;
		}

		final L2PcInstance partner = _activeTradeList.getPartner();

		if (partner != null)
		{
			partner.onTradeCancel(this);
		}

		onTradeCancel(this);
	}

	public boolean hasManufactureShop()
	{
		return _manufactureItems != null && !_manufactureItems.isEmpty();
	}

	/**
	 * Get the manufacture items map of this player.
	 *
	 * @return the the manufacture items map
	 */
	public Map<Integer, L2ManufactureItem> getManufactureItems()
	{
		if (_manufactureItems == null)
		{
			synchronized (this)
			{
				if (_manufactureItems == null)
				{
					_manufactureItems = Collections.synchronizedMap(new LinkedHashMap<Integer, L2ManufactureItem>());
				}
			}
		}

		return _manufactureItems;
	}

	/**
	 * Get the store name, if any.
	 *
	 * @return the store name
	 */
	public String getStoreName()
	{
		return _storeName;
	}

	/**
	 * Set the store name.
	 *
	 * @param name the store name to set
	 */
	public void setStoreName(final String name)
	{
		_storeName = name == null ? "" : name;
	}

	/**
	 * @return the _buyList object of the L2PcInstance.
	 */
	public TradeList getSellList()
	{
		if (_sellList == null)
		{
			_sellList = new TradeList(this);
		}

		return _sellList;
	}

	/**
	 * @return the _buyList object of the L2PcInstance.
	 */
	public TradeList getBuyList()
	{
		if (_buyList == null)
		{
			_buyList = new TradeList(this);
		}

		return _buyList;
	}

	/**
	 * Set the Private Store type of the L2PcInstance. <B><U> Values </U> :</B>
	 * <li>0 : STORE_PRIVATE_NONE</li>
	 * <li>1 : STORE_PRIVATE_SELL</li>
	 * <li>2 : sellmanage</li><BR>
	 * <li>3 : STORE_PRIVATE_BUY</li><BR>
	 * <li>4 : buymanage</li><BR>
	 * <li>5 : STORE_PRIVATE_MANUFACTURE</li><BR>
	 *
	 * @param privateStoreType
	 */
	public void setPrivateStoreType(final PrivateStoreType privateStoreType)
	{
		_privateStoreType = privateStoreType;

		if (isFakeStore())
		{
			Optional.ofNullable(FakeStoreData.getInstance().getStore(getObjectId())).ifPresent(FakeStore::onFinish);
		}
		else if (Config.OFFLINE_DISCONNECT_FINISHED && privateStoreType == PrivateStoreType.NONE && (getClient() == null || getClient().isDetached()))
		{
			deleteMe();
		}
	}

	/**
	 * <B><U> Values </U> :</B>
	 * <li>0 : STORE_PRIVATE_NONE</li>
	 * <li>1 : STORE_PRIVATE_SELL</li>
	 * <li>2 : sellmanage</li><BR>
	 * <li>3 : STORE_PRIVATE_BUY</li><BR>
	 * <li>4 : buymanage</li><BR>
	 * <li>5 : STORE_PRIVATE_MANUFACTURE</li><BR>
	 * <li>8 : STORE_PACKAGE_SELL</li><BR>
	 * <li>9 : STORE_SELL_BUFF</li><BR>
	 *
	 * @return the Private Store type of the L2PcInstance.
	 */
	public PrivateStoreType getPrivateStoreType()
	{
		return _privateStoreType;
	}

	/**
	 * Set the _clan object, _clanId, _clanLeader Flag and title of the L2PcInstance.
	 *
	 * @param clan
	 */
	public void setClan(final L2Clan clan)
	{
		_clan = clan;
		setTitle("");

		if (clan == null)
		{
			_clanId = 0;
			_clanPrivileges = new EnumIntBitmask<>(ClanPrivilege.class, false);
			_pledgeType = 0;
			_powerGrade = 0;
			_lvlJoinedAcademy = 0;
			_apprentice = 0;
			_sponsor = 0;
			_activeWarehouse = null;
			return;
		}

		if (!clan.isMember(getObjectId()))
		{
			setClan(null);
			return;
		}

		_clanId = clan.getId();
	}

	/**
	 * @return the _clan object of the L2PcInstance.
	 */
	@Override
	public L2Clan getClan()
	{
		return _clan;
	}

	/**
	 * @return True if the L2PcInstance is the leader of its clan.
	 */
	public boolean isClanLeader()
	{
		if (getClan() == null)
		{
			return false;
		}

		return getObjectId() == getClan().getLeaderId();
	}

	/**
	 * Reduce the number of arrows/bolts owned by the L2PcInstance and send it Server->Client Packet InventoryUpdate or ItemList (to unequip if the last arrow was consummed).
	 */
	@Override
	protected void reduceArrowCount(final boolean bolts)
	{
		final L2ItemInstance arrows = getInventory().getPaperdollItem(Inventory.PAPERDOLL_LHAND);

		if (arrows == null)
		{
			getInventory().unEquipItemInSlot(Inventory.PAPERDOLL_LHAND);

			if (bolts)
			{
				_boltItem = null;
			}
			else
			{
				_arrowItem = null;
			}

			sendPacket(new ItemList(this, false));
			return;
		}

		if (Config.INFINITY_ARROW_ENABLED)
		{
			return;
		}

		if (arrows.getCount() > 1)
		{
			synchronized (arrows)
			{
				arrows.changeCountWithoutTrace(-1, this, null);
				arrows.setLastChange(L2ItemInstance.MODIFIED);

				if (GameTimeController.getInstance().getGameTicks() % 10 == 0)
				{
					arrows.updateDatabase();
				}

				_inventory.refreshWeight();
			}
		}
		else
		{
			_inventory.destroyItem("Consume", arrows, this, null);

			getInventory().unEquipItemInSlot(Inventory.PAPERDOLL_LHAND);

			if (bolts)
			{
				_boltItem = null;
			}
			else
			{
				_arrowItem = null;
			}

			sendPacket(new ItemList(this, false));
			return;
		}

		if (!Config.FORCE_INVENTORY_UPDATE)
		{
			final InventoryUpdate iu = new InventoryUpdate();
			iu.addModifiedItem(arrows);
			sendPacket(iu);
		}
		else
		{
			sendPacket(new ItemList(this, false));
		}
	}

	/**
	 * Equip arrows needed in left hand and send a Server->Client packet ItemList to the L2PcINstance then return True.
	 */
	@Override
	protected boolean checkAndEquipArrows()
	{
		if (Config.INFINITY_ARROW_ENABLED)
		{
			return true;
		}

		if (getInventory().getPaperdollItem(Inventory.PAPERDOLL_LHAND) == null)
		{
			_arrowItem = getInventory().findArrowForBow(getActiveWeaponItem());

			if (_arrowItem != null)
			{
				getInventory().setPaperdollItem(Inventory.PAPERDOLL_LHAND, _arrowItem);

				sendPacket(new ItemList(this, false));
			}
		}
		else
		{
			_arrowItem = getInventory().getPaperdollItem(Inventory.PAPERDOLL_LHAND);
		}

		return _arrowItem != null;
	}

	/**
	 * Equip bolts needed in left hand and send a Server->Client packet ItemList to the L2PcINstance then return True.
	 */
	@Override
	protected boolean checkAndEquipBolts()
	{
		if (Config.INFINITY_ARROW_ENABLED)
		{
			return true;
		}

		if (getInventory().getPaperdollItem(Inventory.PAPERDOLL_LHAND) == null)
		{
			_boltItem = getInventory().findBoltForCrossBow(getActiveWeaponItem());

			if (_boltItem != null)
			{
				getInventory().setPaperdollItem(Inventory.PAPERDOLL_LHAND, _boltItem);

				sendPacket(new ItemList(this, false));
			}
		}
		else
		{
			_boltItem = getInventory().getPaperdollItem(Inventory.PAPERDOLL_LHAND);
		}

		return _boltItem != null;
	}

	/**
	 * Disarm the player's weapon.
	 *
	 * @return {@code true} if the player was disarmed or doesn't have a weapon to disarm, {@code false} otherwise.
	 */
	public boolean disarmWeapons()
	{
		final L2ItemInstance wpn = getInventory().getPaperdollItem(Inventory.PAPERDOLL_RHAND);

		if (wpn == null)
		{
			return true;
		}

		if (isCursedWeaponEquipped())
		{
			return false;
		}

		if (isCombatFlagEquipped())
		{
			return false;
		}

		if (wpn.getWeaponItem().isForceEquip())
		{
			return false;
		}

		final L2ItemInstance[] unequiped = getInventory().unEquipItemInBodySlotAndRecord(wpn.getItem().getBodyPart());
		final InventoryUpdate iu = new InventoryUpdate();

		for (final L2ItemInstance itm : unequiped)
		{
			iu.addModifiedItem(itm);
		}

		sendPacket(iu);
		abortAttack();
		broadcastUserInfo();

		if (unequiped.length > 0)
		{
			final SystemMessage sm;

			if (unequiped[0].getEnchantLevel() > 0)
			{
				sm = SystemMessage.getSystemMessage(SystemMessageId.EQUIPMENT_S1_S2_REMOVED);
				sm.addInt(unequiped[0].getEnchantLevel());
				sm.addItemName(unequiped[0]);
			}
			else
			{
				sm = SystemMessage.getSystemMessage(SystemMessageId.S1_DISARMED);
				sm.addItemName(unequiped[0]);
			}

			sendPacket(sm);
		}

		if (this instanceof final Particle particle)
		{
			particle.onDisarm(wpn);
		}

		return true;
	}

	/**
	 * Disarm the player's shield.
	 *
	 * @return {@code true}.
	 */
	public boolean disarmShield()
	{
		final L2ItemInstance sld = getInventory().getPaperdollItem(Inventory.PAPERDOLL_LHAND);

		if (sld != null)
		{
			final L2ItemInstance[] unequiped = getInventory().unEquipItemInBodySlotAndRecord(sld.getItem().getBodyPart());
			final InventoryUpdate iu = new InventoryUpdate();

			for (final L2ItemInstance itm : unequiped)
			{
				iu.addModifiedItem(itm);
			}

			sendPacket(iu);

			abortAttack();
			broadcastUserInfo();

			if (unequiped.length > 0)
			{
				SystemMessage sm = null;

				if (unequiped[0].getEnchantLevel() > 0)
				{
					sm = SystemMessage.getSystemMessage(SystemMessageId.EQUIPMENT_S1_S2_REMOVED);
					sm.addInt(unequiped[0].getEnchantLevel());
					sm.addItemName(unequiped[0]);
				}
				else
				{
					sm = SystemMessage.getSystemMessage(SystemMessageId.S1_DISARMED);
					sm.addItemName(unequiped[0]);
				}

				sendPacket(sm);
			}
		}

		return true;
	}

	public boolean mount(final L2Summon pet)
	{
		if (!disarmWeapons() || !disarmShield() || isTransformed())
		{
			return false;
		}

		getEffectList().stopAllToggles();

		setMount(pet.getId(), pet.getLevel());
		setMountObjectID(pet.getControlObjectId());

		clearPetData();
		startFeed(pet.getId());

		broadcastPacket(new Ride(this));
		broadcastUserInfo();

		pet.unSummon(this);
		return true;
	}

	public boolean mount(final int npcId, final int controlItemObjId, final boolean useFood)
	{
		if (!disarmWeapons() || !disarmShield() || isTransformed())
		{
			return false;
		}

		getEffectList().stopAllToggles();

		setMount(npcId, getLevel());

		clearPetData();
		setMountObjectID(controlItemObjId);

		broadcastPacket(new Ride(this));
		broadcastUserInfo();

		if (useFood)
		{
			startFeed(npcId);
		}

		return true;
	}

	public boolean mountPlayer(final L2Summon pet)
	{
		if (pet != null && pet.isMountable() && !isMounted() && !isBetrayed())
		{
			if (isDead())
			{
				sendPacket(ActionFailed.STATIC_PACKET);
				sendPacket(SystemMessageId.STRIDER_CANT_BE_RIDDEN_WHILE_DEAD);
				return false;
			}
			else if (pet.isDead())
			{
				sendPacket(ActionFailed.STATIC_PACKET);
				sendPacket(SystemMessageId.DEAD_STRIDER_CANT_BE_RIDDEN);
				return false;
			}
			else if (pet.isInCombat() || pet.isRooted())
			{
				sendPacket(ActionFailed.STATIC_PACKET);
				sendPacket(SystemMessageId.STRIDER_IN_BATLLE_CANT_BE_RIDDEN);
				return false;

			}
			else if (isInCombat())
			{
				sendPacket(ActionFailed.STATIC_PACKET);
				sendPacket(SystemMessageId.STRIDER_CANT_BE_RIDDEN_WHILE_IN_BATTLE);
				return false;
			}
			else if (isSitting())
			{
				sendPacket(ActionFailed.STATIC_PACKET);
				sendPacket(SystemMessageId.STRIDER_CAN_BE_RIDDEN_ONLY_WHILE_STANDING);
				return false;
			}
			else if (isFishing())
			{
				sendPacket(ActionFailed.STATIC_PACKET);
				sendPacket(SystemMessageId.CANNOT_DO_WHILE_FISHING_2);
				return false;
			}
			else if (isTransformed() || isCursedWeaponEquipped())
			{
				sendPacket(ActionFailed.STATIC_PACKET);
				return false;
			}
			else if (getInventory().getItemByItemId(9819) != null)
			{
				sendPacket(ActionFailed.STATIC_PACKET);
				sendMessage("You cannot mount a steed while holding a flag.");
				return false;
			}
			else if (pet.isHungry())
			{
				sendPacket(ActionFailed.STATIC_PACKET);
				sendPacket(SystemMessageId.HUNGRY_STRIDER_NOT_MOUNT);
				return false;
			}
			else if (!Util.checkIfInRange(200, this, pet, true))
			{
				sendPacket(ActionFailed.STATIC_PACKET);
				sendPacket(SystemMessageId.TOO_FAR_AWAY_FROM_FENRIR_TO_MOUNT);
				return false;
			}
			else if (!pet.isDead() && !isMounted())
			{
				mount(pet);
			}
		}
		else if (isRentedPet())
		{
			stopRentPet();
		}
		else if (isMounted())
		{
			if (getMountType() == MountType.WYVERN && isInsideZone(ZoneId.NO_LANDING))
			{
				sendPacket(ActionFailed.STATIC_PACKET);
				sendPacket(SystemMessageId.NO_DISMOUNT_HERE);
				return false;
			}
			else if (isHungry())
			{
				sendPacket(ActionFailed.STATIC_PACKET);
				sendPacket(SystemMessageId.HUNGRY_STRIDER_NOT_MOUNT);
				return false;
			}
			else
			{
				dismount();
			}
		}

		return true;
	}

	public boolean dismount()
	{
		final boolean wasFlying = isFlying();

		sendPacket(new SetupGauge(3, 0, 0));

		final int petId = _mountNpcId;

		setMount(0, 0);

		stopFeed();
		clearPetData();

		if (wasFlying)
		{
			removeSkill(CommonSkill.WYVERN_BREATH.getSkill());
		}

		broadcastPacket(new Ride(this));

		setMountObjectID(0);
		storePetFood(petId);

		broadcastUserInfo();
		return true;
	}

	public void setUptime(final long time)
	{
		_uptime = time;
	}

	public long getUptime()
	{
		return System.currentTimeMillis() - _uptime;
	}

	/**
	 * Return True if the L2PcInstance is invulnerable.
	 */
	@Override
	public boolean isInvul()
	{
		return super.isInvul() || _teleportProtectEndTime > GameTimeController.getInstance().getGameTicks();
	}

	/**
	 * Return True if the L2PcInstance is in Clan.
	 */
	@Override
	public boolean isInClan()
	{
		return _clan != null;
	}

	/**
	 * Return True if the L2PcInstance has a Party in progress.
	 */
	@Override
	public boolean isInParty()
	{
		return _party != null;
	}

	/**
	 * Set the _party object of the L2PcInstance (without joining it).
	 *
	 * @param party
	 */
	public void setParty(final L2Party party)
	{
		_party = party;
	}

	/**
	 * Set the _party object of the L2PcInstance AND join it.
	 *
	 * @param party
	 */
	public void joinParty(final L2Party party)
	{
		if (party != null)
		{
			_party = party;

			party.addPartyMember(this);
		}
	}

	/**
	 * Manage the Leave Party task of the L2PcInstance.
	 */
	public void leaveParty()
	{
		if (isInParty())
		{
			_party.removePartyMember(this, MessageType.DISCONNECTED);
			_party = null;
		}
	}

	/**
	 * Return the _party object of the L2PcInstance.
	 */
	@Override
	public L2Party getParty()
	{
		return _party;
	}

	public void setPartyDistributionType(final PartyDistributionType pdt)
	{
		_partyDistributionType = pdt;
	}

	public PartyDistributionType getPartyDistributionType()
	{
		return _partyDistributionType;
	}

	/**
	 * Return True if the L2PcInstance is a GM.
	 */
	@Override
	public boolean isGM()
	{
		return getAccessLevel().isGm();
	}

	/**
	 * Set the _accessLevel of the L2PcInstance.
	 *
	 * @param level
	 */
	public void setAccessLevel(final int level)
	{
		_accessLevel = AdminData.getInstance().getAccessLevel(level);

		getAppearance().setNameColor(_accessLevel.getNameColor());
		getAppearance().setTitleColor(_accessLevel.getTitleColor());
		broadcastUserInfo();

		CharNameTable.getInstance().addName(this);

		if (!AdminData.getInstance().hasAccessLevel(level))
		{
			_log.warning("Tryed to set unregistered access level " + level + " for " + toString() + ". Setting access level without privileges!");
		}
		else if (level > 0)
		{
			_log.warning(_accessLevel.getName() + " access level set for character " + getName());
		}
	}

	public void setAccountAccesslevel(final int level)
	{
		LoginServerThread.getInstance().sendAccessLevel(getAccountName(), level);
	}

	/**
	 * @return the _accessLevel of the L2PcInstance.
	 */
	@Override
	public L2AccessLevel getAccessLevel()
	{
		if (Config.EVERYBODY_HAS_ADMIN_RIGHTS)
		{
			return AdminData.getInstance().getMasterAccessLevel();
		}
		else if (_accessLevel == null)
		{
			setAccessLevel(0);
		}

		return _accessLevel;
	}

	/**
	 * Update Stats of the L2PcInstance client side by sending Server->Client packet UserInfo/StatusUpdate to this L2PcInstance and CharInfo/StatusUpdate to all L2PcInstance in its _KnownPlayers (broadcast).
	 *
	 * @param broadcastType
	 */
	public void updateAndBroadcastStatus(final int broadcastType)
	{
		refreshOverloaded();
		refreshExpertisePenalty();

		if (broadcastType == 1)
		{
			sendPacket(new UserInfo(this));
			sendPacket(new ExBrExtraUserInfo(this));
		}

		if (broadcastType == 2)
		{
			broadcastUserInfo();
		}
	}

	/**
	 * Send a Server->Client StatusUpdate packet with Karma and PvP Flag to the L2PcInstance and all L2PcInstance to inform (broadcast).
	 *
	 * @param flag
	 */
	public void setKarmaFlag(final int flag)
	{
		sendPacket(new UserInfo(this));
		sendPacket(new ExBrExtraUserInfo(this));

		for (final L2PcInstance player : getKnownList().getKnownPlayers().values())
		{
			player.sendPacket(new RelationChanged(this, getRelation(player), isAutoAttackable(player)));

			if (hasSummon())
			{
				player.sendPacket(new RelationChanged(getSummon(), getRelation(player), isAutoAttackable(player)));
			}
		}
	}

	/**
	 * Send a Server->Client StatusUpdate packet with Karma to the L2PcInstance and all L2PcInstance to inform (broadcast).
	 */
	public void broadcastKarma()
	{
		final StatusUpdate su = new StatusUpdate(this);
		su.addAttribute(StatusUpdate.KARMA, getKarma());
		sendPacket(su);

		for (final L2PcInstance player : getKnownList().getKnownPlayers().values())
		{
			player.sendPacket(new RelationChanged(this, getRelation(player), isAutoAttackable(player)));

			if (hasSummon())
			{
				player.sendPacket(new RelationChanged(getSummon(), getRelation(player), isAutoAttackable(player)));
			}
		}
	}

	/**
	 * Set the online Flag to True or False and update the characters table of the database with online status and lastAccess (called when login and logout).
	 *
	 * @param isOnline
	 * @param updateInDb
	 */
	public void setOnlineStatus(final boolean isOnline, final boolean updateInDb)
	{
		if (_isOnline != isOnline)
		{
			_isOnline = isOnline;
		}

		if (updateInDb)
		{
			updateOnlineStatus();
		}
	}

	public void setIsIn7sDungeon(final boolean isIn7sDungeon)
	{
		_isIn7sDungeon = isIn7sDungeon;
	}

	/**
	 * Update the characters table of the database with online status and lastAccess of this L2PcInstance (called when login and logout).
	 */
	public void updateOnlineStatus()
	{
		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement("UPDATE characters SET online=?, lastAccess=? WHERE charId=?"))
		{
			statement.setInt(1, isOnlineInt());
			statement.setLong(2, System.currentTimeMillis());
			statement.setInt(3, getObjectId());
			statement.execute();
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "Failed updating character online status.", e);
		}
	}

	/**
	 * Create a new player in the characters table of the database.
	 *
	 * @return
	 */
	private boolean createDb()
	{
		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement(INSERT_CHARACTER))
		{
			statement.setString(1, _accountName);
			statement.setInt(2, getObjectId());
			statement.setString(3, getName());
			statement.setInt(4, getLevel());
			statement.setInt(5, getMaxHp());
			statement.setDouble(6, getCurrentHp());
			statement.setInt(7, getMaxCp());
			statement.setDouble(8, getCurrentCp());
			statement.setInt(9, getMaxMp());
			statement.setDouble(10, getCurrentMp());
			statement.setInt(11, getAppearance().getFace());
			statement.setInt(12, getAppearance().getHairStyle());
			statement.setInt(13, getAppearance().getHairColor());
			statement.setInt(14, getAppearance().getSex().ordinal());
			statement.setLong(15, getExp());
			statement.setInt(16, getSp());
			statement.setInt(17, getKarma());
			statement.setInt(18, getFame());
			statement.setInt(19, getPvpKills());
			statement.setInt(20, getPkKills());
			statement.setInt(21, getClanId());
			statement.setInt(22, getRace().ordinal());
			statement.setInt(23, getClassId().getId());
			statement.setLong(24, getDeleteTimer());
			statement.setInt(25, hasDwarvenCraft() ? 1 : 0);
			statement.setString(26, getTitle());
			statement.setInt(27, getAppearance().getTitleColor());
			statement.setInt(28, getAccessLevel().getLevel());
			statement.setInt(29, isOnlineInt());
			statement.setInt(30, isIn7sDungeon() ? 1 : 0);
			statement.setInt(31, getClanPrivileges().getBitmask());
			statement.setInt(32, getWantsPeace());
			statement.setInt(33, getBaseClass());
			statement.setInt(34, getNewbie());
			statement.setInt(35, isNoble() ? 1 : 0);
			statement.setLong(36, 0);
			statement.setDate(37, new Date(getCreateDate().getTimeInMillis()));
			statement.executeUpdate();
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "Could not insert char data: " + e.getMessage(), e);
			return false;
		}
		return true;
	}

	/**
	 * Retrieve a L2PcInstance from the characters table of the database and add it in _allObjects of the L2World. <B><U> Actions</U> :</B>
	 * <li>Retrieve the L2PcInstance from the characters table of the database</li>
	 * <li>Add the L2PcInstance object in _allObjects</li>
	 * <li>Set the x,y,z position of the L2PcInstance and make it invisible</li>
	 * <li>Update the overloaded status of the L2PcInstance</li>
	 *
	 * @param objectId Identifier of the object to initialized
	 * @return The L2PcInstance loaded from the database
	 */
	private static L2PcInstance restore(final int objectId)
	{
		L2PcInstance player = null;

		double currentCp = 0;
		double currentHp = 0;
		double currentMp = 0;

		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement(RESTORE_CHARACTER))
		{
			statement.setInt(1, objectId);

			try (ResultSet rset = statement.executeQuery())
			{
				if (rset.next())
				{
					final int activeClassId = rset.getInt("classid");
					final Sex sex = rset.getInt("sex") == 1 ? Sex.FEMALE : Sex.MALE;
					final L2PcTemplate template = PlayerTemplateData.getInstance().getTemplate(activeClassId);
					final PcAppearance app = new PcAppearance(rset.getByte("face"), rset.getByte("hairColor"), rset.getByte("hairStyle"), sex);

					player = new L2PcInstance(objectId, template, rset.getString("account_name"), app);
					player.setName(rset.getString("char_name"));
					player._lastAccess = rset.getLong("lastAccess");

					player.getStat().setExp(rset.getLong("exp"));
					player.setExpBeforeDeath(rset.getLong("expBeforeDeath"));
					player.getStat().setLevel(rset.getByte("level"));
					player.getStat().setSp(rset.getInt("sp"));

					player.setWantsPeace(rset.getInt("wantspeace"));

					player.setHeading(rset.getInt("heading"));

					player.setKarma(rset.getInt("karma"));
					player.setFame(rset.getInt("fame"));
					player.setPvpKills(rset.getInt("pvpkills"));
					player.setPkKills(rset.getInt("pkkills"));
					player.setOnlineTime(rset.getLong("onlinetime"));
					player.setNewbie(rset.getInt("newbie"));
					player.setNoble(rset.getInt("nobless") == 1);

					player.setClanJoinExpiryTime(rset.getLong("clan_join_expiry_time"));

					if (player.getClanJoinExpiryTime() < System.currentTimeMillis())
					{
						player.setClanJoinExpiryTime(0);
					}
					player.setClanCreateExpiryTime(rset.getLong("clan_create_expiry_time"));

					if (player.getClanCreateExpiryTime() < System.currentTimeMillis())
					{
						player.setClanCreateExpiryTime(0);
					}

					final int clanId = rset.getInt("clanid");
					player.setPowerGrade(rset.getInt("power_grade"));
					player.setPledgeType(rset.getInt("subpledge"));

					player.setHero(Hero.getInstance().isHero(objectId));

					if (clanId > 0)
					{
						player.setClan(ClanTable.getInstance().getClan(clanId));
					}

					if (player.getClan() != null)
					{
						if (player.getClan().getLeaderId() != player.getObjectId())
						{
							if (player.getPowerGrade() == 0)
							{
								player.setPowerGrade(5);
							}

							player.setClanPrivileges(player.getClan().getRankPrivs(player.getPowerGrade()));
						}
						else
						{
							player.getClanPrivileges().setAll();
							player.setPowerGrade(1);
						}

						player.setPledgeClass(L2ClanMember.calculatePledgeClass(player));
					}
					else
					{
						if (player.isNoble())
						{
							player.setPledgeClass(5);
						}

						if (player.isHero())
						{
							player.setPledgeClass(8);
						}

						player.getClanPrivileges().clear();
					}

					player.setDeleteTimer(rset.getLong("deletetime"));
					player.setTitle(rset.getString("title"));
					player.setAccessLevel(rset.getInt("accesslevel"));

					final int titleColor = rset.getInt("title_color");

					if (titleColor != PcAppearance.DEFAULT_TITLE_COLOR)
					{
						player.getAppearance().setTitleColor(titleColor);
					}

					player.setFistsWeaponItem(player.findFistsWeaponItem(activeClassId));
					player.setUptime(System.currentTimeMillis());

					currentHp = rset.getDouble("curHp");
					currentCp = rset.getDouble("curCp");
					currentMp = rset.getDouble("curMp");

					player._classIndex = 0;

					try
					{
						player.setBaseClass(rset.getInt("base_class"));
					}
					catch (final Exception e)
					{
						player.setBaseClass(activeClassId);
					}

					if (restoreSubClassData(player))
					{
						if (activeClassId != player.getBaseClass())
						{
							for (final SubClass subClass : player.getSubClasses().values())
							{
								if (subClass.getClassId() == activeClassId)
								{
									player._classIndex = subClass.getClassIndex();
								}
							}
						}
					}

					if (player.getClassIndex() == 0 && activeClassId != player.getBaseClass())
					{
						player.setClassId(player.getBaseClass());
						_log.warning("Player " + player.getName() + " reverted to base class. Possibly has tried a relogin exploit while subclassing.");
					}
					else
					{
						player._activeClass = activeClassId;
					}

					player.setApprentice(rset.getInt("apprentice"));
					player.setSponsor(rset.getInt("sponsor"));
					player.setLvlJoinedAcademy(rset.getInt("lvl_joined_academy"));
					player.setIsIn7sDungeon(rset.getInt("isin7sdungeon") == 1);

					CursedWeaponsManager.getInstance().checkPlayer(player);

					player.setDeathPenaltyBuffLevel(rset.getInt("death_penalty_level"));

					player.setVitalityPoints(rset.getInt("vitality_points"), true);

					player.setXYZInvisible(rset.getInt("x"), rset.getInt("y"), rset.getInt("z"));

					player.setBookMarkSlot(rset.getInt("BookmarkSlot"));

					player.getCreateDate().setTime(rset.getDate("createDate"));

					player.setLang(rset.getString("language"));

					player.addPcBangScore(rset.getInt("pc_points"));

					player.setPrimeShopPoints(rset.getInt("prime_points"));

					try (PreparedStatement stmt = con.prepareStatement("SELECT charId, char_name FROM characters WHERE account_name=? AND charId<>?"))
					{
						stmt.setString(1, player._accountName);
						stmt.setInt(2, objectId);

						try (ResultSet chars = stmt.executeQuery())
						{
							while (chars.next())
							{
								player._chars.put(chars.getInt("charId"), chars.getString("char_name"));
							}
						}
					}
				}
			}

			if (player == null)
			{
				return null;
			}

			player.getInventory().restore();
			player.getFreight().restore();

			if (!Config.WAREHOUSE_CACHE)
			{
				player.getWarehouse();
			}

			player.restoreCharData();
			player.rewardSkills();
			player.restoreItemReuse();

			player.setCurrentCp(currentCp);
			player.setCurrentHp(currentHp);
			player.setCurrentMp(currentMp);

			player.setOriginalCpHpMp(currentCp, currentHp, currentMp);

			if (currentHp < 0.5)
			{
				player.setIsDead(true);
				player.stopHpMpRegeneration();
			}

			player.setPet(L2World.getInstance().getPet(player.getObjectId()));

			if (player.hasSummon())
			{
				player.getSummon().setOwner(player);
			}

			player.loadRecommendations();

			player.refreshOverloaded();
			player.refreshExpertisePenalty();
			player.restoreFriendList();

			player.getVisual().restoreMe();
			player.getService().restoreMe();
			player.getDonate().restoreMe();
			player.getScheme().restoreMe();
			player.getCounter().restoreMe();
			player.getAchievement().restoreMe();
			player.getBuffStore().restoreMe();

			player.setProfil(ProfilData.getInstance().getProfil(player.getObjectId()));

			if (Config.FACTION_ENABLED)
			{
				player.setFactionPlayer(FactionPlayer.restore(player));
			}

			if (Config.STORE_UI_SETTINGS)
			{
				player.restoreUISettings();
			}

			if (player.isGM())
			{
				player.setOverrideCond(player.getVariables().getLong(COND_OVERRIDE_KEY, PcCondOverride.getAllExceptionsMask()));
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "Failed loading character.", e);
		}

		return player;
	}

	/**
	 * @return
	 */
	public Forum getMail()
	{
		if (_forumMail == null)
		{
			setMail(ForumsBBSManager.getInstance().getForumByName("MailRoot").getChildByName(getName()));

			if (_forumMail == null)
			{
				ForumsBBSManager.getInstance().createNewForum(getName(), ForumsBBSManager.getInstance().getForumByName("MailRoot"), Forum.MAIL, Forum.OWNERONLY, getObjectId());
				setMail(ForumsBBSManager.getInstance().getForumByName("MailRoot").getChildByName(getName()));
			}
		}

		return _forumMail;
	}

	/**
	 * @param forum
	 */
	public void setMail(final Forum forum)
	{
		_forumMail = forum;
	}

	/**
	 * @return
	 */
	public Forum getMemo()
	{
		if (_forumMemo == null)
		{
			setMemo(ForumsBBSManager.getInstance().getForumByName("MemoRoot").getChildByName(_accountName));

			if (_forumMemo == null)
			{
				ForumsBBSManager.getInstance().createNewForum(_accountName, ForumsBBSManager.getInstance().getForumByName("MemoRoot"), Forum.MEMO, Forum.OWNERONLY, getObjectId());
				setMemo(ForumsBBSManager.getInstance().getForumByName("MemoRoot").getChildByName(_accountName));
			}
		}

		return _forumMemo;
	}

	/**
	 * @param forum
	 */
	public void setMemo(final Forum forum)
	{
		_forumMemo = forum;
	}

	/**
	 * Restores sub-class data for the L2PcInstance, used to check the current class index for the character.
	 *
	 * @param player
	 * @return
	 */
	private static boolean restoreSubClassData(final L2PcInstance player)
	{
		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement(RESTORE_CHAR_SUBCLASSES))
		{
			statement.setInt(1, player.getObjectId());

			try (ResultSet rset = statement.executeQuery())
			{
				while (rset.next())
				{
					final SubClass subClass = new SubClass();
					subClass.setClassId(rset.getInt("class_id"));
					subClass.setLevel(rset.getByte("level"));
					subClass.setExp(rset.getLong("exp"));
					subClass.setSp(rset.getInt("sp"));
					subClass.setClassIndex(rset.getInt("class_index"));

					player.getSubClasses().put(subClass.getClassIndex(), subClass);
				}
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.WARNING, "Could not restore classes for " + player.getName() + ": " + e.getMessage(), e);
		}

		return true;
	}

	/**
	 * Restores:
	 * <ul>
	 * <li>Skills</li>
	 * <li>Macros</li>
	 * <li>Short-cuts</li>
	 * <li>Henna</li>
	 * <li>Teleport Bookmark</li>
	 * <li>Recipe Book</li>
	 * <li>Recipe Shop List (If configuration enabled)</li>
	 * <li>Premium Item List</li>
	 * <li>Pet Inventory Items</li>
	 * </ul>
	 */
	private void restoreCharData()
	{
		// Retrieve from the database all skills of this L2PcInstance and add them to _skills.
		restoreSkills();

		// Retrieve from the database all macroses of this L2PcInstance and add them to _macros.
		_macros.restoreMe();

		// Retrieve from the database all shortCuts of this L2PcInstance and add them to _shortCuts.
		_shortCuts.restoreMe();

		// Retrieve from the database all henna of this L2PcInstance and add them to _henna.
		restoreHenna();

		// Retrieve from the database all teleport bookmark of this L2PcInstance and add them to _tpbookmark.
		restoreTeleportBookmark();

		// Retrieve from the database the recipe book of this L2PcInstance.
		restoreRecipeBook(true);

		// Restore Recipe Shop list.
		if (Config.STORE_RECIPE_SHOPLIST)
		{
			restoreRecipeShopList();
		}

		// Load Premium Item List.
		loadPremiumItemList();

		// Restore items in pet inventory.
		restorePetInventoryItems();
	}

	/**
	 * Restore recipe book data for this L2PcInstance.
	 *
	 * @param loadCommon
	 */
	private void restoreRecipeBook(final boolean loadCommon)
	{
		final String sql = loadCommon ? "SELECT id, type, classIndex FROM character_recipebook WHERE charId=?" : "SELECT id FROM character_recipebook WHERE charId=? AND classIndex=? AND type = 1";

		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement(sql))
		{
			statement.setInt(1, getObjectId());

			if (!loadCommon)
			{
				statement.setInt(2, _classIndex);
			}

			try (ResultSet rset = statement.executeQuery())
			{
				_dwarvenRecipeBook.clear();

				L2RecipeList recipe;

				final RecipeData rd = RecipeData.getInstance();

				while (rset.next())
				{
					recipe = rd.getRecipeList(rset.getInt("id"));

					if (loadCommon)
					{
						if (rset.getInt(2) == 1)
						{
							if (rset.getInt(3) == _classIndex)
							{
								registerDwarvenRecipeList(recipe, false);
							}
						}
						else
						{
							registerCommonRecipeList(recipe, false);
						}
					}
					else
					{
						registerDwarvenRecipeList(recipe, false);
					}
				}
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "Could not restore recipe book data:" + e.getMessage(), e);
		}
	}

	public Map<Integer, L2PremiumItem> getPremiumItemList()
	{
		return _premiumItems;
	}

	private void loadPremiumItemList()
	{
		final String sql = "SELECT itemNum, itemId, itemCount, itemSender FROM character_premium_items WHERE charId=?";

		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement(sql))
		{
			statement.setInt(1, getObjectId());

			try (ResultSet rset = statement.executeQuery())
			{
				while (rset.next())
				{
					final int itemNum = rset.getInt("itemNum");
					final int itemId = rset.getInt("itemId");
					final long itemCount = rset.getLong("itemCount");
					final String itemSender = rset.getString("itemSender");
					_premiumItems.put(itemNum, new L2PremiumItem(itemId, itemCount, itemSender));
				}
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "Could not restore premium items: " + e.getMessage(), e);
		}
	}

	public void updatePremiumItem(final int itemNum, final long newcount)
	{
		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement("UPDATE character_premium_items SET itemCount=? WHERE charId=? AND itemNum=? "))
		{
			statement.setLong(1, newcount);
			statement.setInt(2, getObjectId());
			statement.setInt(3, itemNum);
			statement.execute();
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "Could not update premium items: " + e.getMessage(), e);
		}
	}

	public void deletePremiumItem(final int itemNum)
	{
		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement("DELETE FROM character_premium_items WHERE charId=? AND itemNum=? "))
		{
			statement.setInt(1, getObjectId());
			statement.setInt(2, itemNum);
			statement.execute();
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "Could not delete premium item: " + e);
		}
	}

	/**
	 * Update L2PcInstance stats in the characters table of the database.
	 *
	 * @param storeActiveEffects
	 */
	public synchronized void store(final boolean storeActiveEffects)
	{
		storeCharBase();
		storeCharSub();
		storeEffect(storeActiveEffects);
		storeItemReuseDelay();
		getVisual().storeMe();
		getService().storeMe();
		getDonate().storeMe();
		getScheme().storeMe();
		getCounter().storeMe();
		getAchievement().storeMe();
		getBuffStore().storeMe();
		getFarm().storeMe();
		getMission().storeMe();

		if (Config.FACTION_ENABLED && getFactionPlayer().getFaction().getId() > 0)
		{
			getFactionPlayer().storeMe();
		}

		if (Config.STORE_RECIPE_SHOPLIST)
		{
			storeRecipeShopList();
		}

		if (Config.STORE_UI_SETTINGS)
		{
			storeUISettings();
		}

		SevenSigns.getInstance().saveSevenSignsData(getObjectId());

		final PlayerVariables vars = getScript(PlayerVariables.class);

		if (vars != null)
		{
			vars.storeMe();
		}

		final AccountVariables aVars = getScript(AccountVariables.class);

		if (aVars != null)
		{
			aVars.storeMe();
		}

		final PreferenceVariables pVars = getScript(PreferenceVariables.class);

		if (pVars != null)
		{
			pVars.storeMe();
		}

		storeRecommendations();
	}

	@Override
	public void storeMe()
	{
		store(true);
	}

	private void storeCharBase()
	{
		final long exp = getStat().getBaseExp();
		final int level = getStat().getBaseLevel();
		final int sp = getStat().getBaseSp();

		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement(UPDATE_CHARACTER))
		{
			statement.setInt(1, level);
			statement.setInt(2, getMaxHp());
			statement.setDouble(3, getCurrentHp());
			statement.setInt(4, getMaxCp());
			statement.setDouble(5, getCurrentCp());
			statement.setInt(6, getMaxMp());
			statement.setDouble(7, getCurrentMp());
			statement.setInt(8, getAppearance().getFace());
			statement.setInt(9, getAppearance().getHairStyle());
			statement.setInt(10, getAppearance().getHairColor());
			statement.setInt(11, getAppearance().getSex().ordinal());
			statement.setInt(12, getHeading());
			statement.setInt(13, _observerMode ? _savedLocation.getX() : getX());
			statement.setInt(14, _observerMode ? _savedLocation.getY() : getY());
			statement.setInt(15, _observerMode ? _savedLocation.getZ() : getZ());
			statement.setLong(16, exp);
			statement.setLong(17, getExpBeforeDeath());
			statement.setInt(18, sp);
			statement.setInt(19, getKarma());
			statement.setInt(20, getFame());
			statement.setInt(21, getPvpKills());
			statement.setInt(22, getPkKills());
			statement.setInt(23, getClanId());
			statement.setInt(24, getRace().ordinal());
			statement.setInt(25, getClassId().getId());
			statement.setLong(26, getDeleteTimer());
			statement.setString(27, getTitle());
			statement.setInt(28, getAppearance().getTitleColor());
			statement.setInt(29, getAccessLevel().getLevel());
			statement.setInt(30, isOnlineInt());
			statement.setInt(31, isIn7sDungeon() ? 1 : 0);
			statement.setInt(32, getClanPrivileges().getBitmask());
			statement.setInt(33, getWantsPeace());
			statement.setInt(34, getBaseClass());

			long totalOnlineTime = _onlineTime;

			if (_onlineBeginTime > 0)
			{
				totalOnlineTime += (System.currentTimeMillis() - _onlineBeginTime) / 1000;
			}

			statement.setLong(35, totalOnlineTime);
			statement.setInt(36, getNewbie());
			statement.setInt(37, isNoble() ? 1 : 0);
			statement.setInt(38, getPowerGrade());
			statement.setInt(39, getPledgeType());
			statement.setInt(40, getLvlJoinedAcademy());
			statement.setLong(41, getApprentice());
			statement.setLong(42, getSponsor());
			statement.setLong(43, getClanJoinExpiryTime());
			statement.setLong(44, getClanCreateExpiryTime());
			statement.setString(45, getName());
			statement.setLong(46, getDeathPenaltyBuffLevel());
			statement.setInt(47, getBookMarkSlot());
			statement.setInt(48, getVitalityPoints());
			statement.setString(49, getLang());
			statement.setInt(50, getPcBangScore());
			statement.setInt(51, getPrimeShopPoints());
			statement.setInt(52, getObjectId());

			statement.execute();
		}
		catch (final Exception e)
		{
			_log.log(Level.WARNING, "Could not store char base data: " + this + " - " + e.getMessage(), e);
		}
	}

	private void storeCharSub()
	{
		if (getTotalSubClasses() <= 0)
		{
			return;
		}

		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement(UPDATE_CHAR_SUBCLASS))
		{
			for (final SubClass subClass : getSubClasses().values())
			{
				statement.setLong(1, subClass.getExp());
				statement.setInt(2, subClass.getSp());
				statement.setInt(3, subClass.getLevel());
				statement.setInt(4, subClass.getClassId());
				statement.setInt(5, getObjectId());
				statement.setInt(6, subClass.getClassIndex());

				statement.execute();
				statement.clearParameters();
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.WARNING, "Could not store sub class data for " + getName() + ": " + e.getMessage(), e);
		}
	}

	@Override
	public void storeEffect(final boolean storeEffects)
	{
		if (!Config.STORE_SKILL_COOLTIME)
		{
			return;
		}

		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement delete = con.prepareStatement(DELETE_SKILL_SAVE); PreparedStatement statement = con.prepareStatement(ADD_SKILL_SAVE);)
		{
			delete.setInt(1, getObjectId());
			delete.setInt(2, getClassIndex());
			delete.execute();

			int buff_index = 0;

			final List<Integer> storedSkills = new ArrayList<>();

			if (storeEffects)
			{
				for (final BuffInfo info : getEffectList().getEffects())
				{
					if (info == null)
					{
						continue;
					}

					final Skill skill = info.getSkill();

					if (skill.getAbnormalType() == AbnormalType.LIFE_FORCE_OTHERS)
					{
						continue;
					}

					if (skill.isToggle())
					{
						continue;
					}

					if (skill.isDance() && !Config.ALT_STORE_DANCES)
					{
						continue;
					}

					if (storedSkills.contains(skill.getReuseHashCode()))
					{
						continue;
					}

					storedSkills.add(skill.getReuseHashCode());

					statement.setInt(1, getObjectId());
					statement.setInt(2, skill.getId());
					statement.setInt(3, skill.getLevel());
					statement.setInt(4, info.getTime());

					final TimeStamp t = getSkillReuseTimeStamp(skill.getReuseHashCode());
					statement.setLong(5, t != null && t.hasNotPassed() ? t.getReuse() : 0);
					statement.setLong(6, t != null && t.hasNotPassed() ? t.getStamp() : 0);

					statement.setInt(7, 0);
					statement.setInt(8, getClassIndex());
					statement.setInt(9, ++buff_index);
					statement.execute();
				}
			}

			final Map<Integer, TimeStamp> reuseTimeStamps = getSkillReuseTimeStamps();

			if (reuseTimeStamps != null)
			{
				for (final Entry<Integer, TimeStamp> ts : reuseTimeStamps.entrySet())
				{
					final int hash = ts.getKey();

					if (storedSkills.contains(hash))
					{
						continue;
					}

					final TimeStamp t = ts.getValue();

					if (t != null && t.hasNotPassed())
					{
						storedSkills.add(hash);

						statement.setInt(1, getObjectId());
						statement.setInt(2, t.getSkillId());
						statement.setInt(3, t.getSkillLvl());
						statement.setInt(4, -1);
						statement.setLong(5, t.getReuse());
						statement.setLong(6, t.getStamp());
						statement.setInt(7, 1);
						statement.setInt(8, getClassIndex());
						statement.setInt(9, ++buff_index);
						statement.execute();
					}
				}
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.WARNING, "Could not store char effect data: ", e);
		}
	}

	private void storeItemReuseDelay()
	{
		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement ps1 = con.prepareStatement(DELETE_ITEM_REUSE_SAVE); PreparedStatement ps2 = con.prepareStatement(ADD_ITEM_REUSE_SAVE))
		{
			ps1.setInt(1, getObjectId());
			ps1.execute();

			final Map<Integer, TimeStamp> itemReuseTimeStamps = getItemReuseTimeStamps();

			if (itemReuseTimeStamps != null)
			{
				for (final TimeStamp ts : itemReuseTimeStamps.values())
				{
					if (ts != null && ts.hasNotPassed())
					{
						ps2.setInt(1, getObjectId());
						ps2.setInt(2, ts.getItemId());
						ps2.setInt(3, ts.getItemObjectId());
						ps2.setLong(4, ts.getReuse());
						ps2.setLong(5, ts.getStamp());
						ps2.execute();
					}
				}
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.WARNING, "Could not store char item reuse data: ", e);
		}
	}

	/**
	 * @return True if the L2PcInstance is on line.
	 */
	public boolean isOnline()
	{
		return _isOnline;
	}

	public int isOnlineInt()
	{
		if (_isOnline && _client != null)
		{
			return _client.isDetached() ? 2 : 1;
		}

		return 0;
	}

	/**
	 * Verifies if the player is in offline mode.<br>
	 * The offline mode may happen for different reasons:<br>
	 * Abnormally: Player gets abruptly disconnected from server.<br>
	 * Normally: The player gets into offline shop mode, only available by enabling the offline shop mod.
	 *
	 * @return {@code true} if the player is in offline mode, {@code false} otherwise
	 */
	public boolean isInOfflineMode()
	{
		return _client == null || _client.isDetached();
	}

	public boolean isIn7sDungeon()
	{
		return _isIn7sDungeon;
	}

	@Override
	public Skill addSkill(final Skill newSkill)
	{
		addCustomSkill(newSkill);
		return super.addSkill(newSkill);
	}

	/**
	 * Add a skill to the L2PcInstance _skills and its Func objects to the calculator set of the L2PcInstance and save update in the character_skills table of the database. <B><U> Concept</U> :</B> All skills own by a L2PcInstance are identified in <B>_skills</B> <B><U> Actions</U> :</B>
	 * <li>Replace oldSkill by newSkill or Add the newSkill</li>
	 * <li>If an old skill has been replaced, remove all its Func objects of L2Character calculator set</li>
	 * <li>Add Func objects of newSkill to the calculator set of the L2Character</li>
	 *
	 * @param newSkill The L2Skill to add to the L2Character
	 * @param store
	 * @return The L2Skill replaced or null if just added a new L2Skill
	 */
	public Skill addSkill(final Skill newSkill, final boolean store)
	{
		final Skill oldSkill = addSkill(newSkill);

		if (store)
		{
			storeSkill(newSkill, oldSkill, -1);
		}

		return oldSkill;
	}

	@Override
	public Skill removeSkill(final Skill skill, final boolean store)
	{
		removeCustomSkill(skill);
		return store ? removeSkill(skill) : super.removeSkill(skill, true);
	}

	public Skill removeSkill(final Skill skill, final boolean store, final boolean cancelEffect)
	{
		removeCustomSkill(skill);
		return store ? removeSkill(skill) : super.removeSkill(skill, cancelEffect);
	}

	/**
	 * Remove a skill from the L2Character and its Func objects from calculator set of the L2Character and save update in the character_skills table of the database. <B><U> Concept</U> :</B> All skills own by a L2Character are identified in <B>_skills</B> <B><U> Actions</U> :</B>
	 * <li>Remove the skill from the L2Character _skills</li>
	 * <li>Remove all its Func objects from the L2Character calculator set</li> <B><U> Overridden in </U> :</B>
	 * <li>L2PcInstance : Save update in the character_skills table of the database</li>
	 *
	 * @param skill The L2Skill to remove from the L2Character
	 * @return The L2Skill removed
	 */
	public Skill removeSkill(final Skill skill)
	{
		removeCustomSkill(skill);

		final Skill oldSkill = super.removeSkill(skill, true);

		if (oldSkill != null)
		{
			try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement(DELETE_SKILL_FROM_CHAR))
			{
				statement.setInt(1, oldSkill.getId());
				statement.setInt(2, getObjectId());
				statement.setInt(3, getClassIndex());
				statement.execute();
			}
			catch (final Exception e)
			{
				_log.log(Level.WARNING, "Error could not delete skill: " + e.getMessage(), e);
			}
		}

		if (getTransformationId() > 0 || isCursedWeaponEquipped())
		{
			return oldSkill;
		}

		if (skill != null)
		{
			for (final Shortcut sc : getAllShortCuts())
			{
				if (sc != null && sc.getId() == skill.getId() && sc.getType() == ShortcutType.SKILL && !(skill.getId() >= 3080 && skill.getId() <= 3259))
				{
					deleteShortCut(sc.getSlot(), sc.getPage());
				}
			}
		}

		return oldSkill;
	}

	/**
	 * Add or update a L2PcInstance skill in the character_skills table of the database.<br>
	 * If newClassIndex > -1, the skill will be stored with that class index, not the current one.
	 *
	 * @param newSkill
	 * @param oldSkill
	 * @param newClassIndex
	 */
	private void storeSkill(final Skill newSkill, final Skill oldSkill, final int newClassIndex)
	{
		final int classIndex = newClassIndex > -1 ? newClassIndex : _classIndex;

		try (Connection con = L2DatabaseFactory.getInstance().getConnection())
		{
			if (oldSkill != null && newSkill != null)
			{
				try (PreparedStatement ps = con.prepareStatement(UPDATE_CHARACTER_SKILL_LEVEL))
				{
					ps.setInt(1, newSkill.getLevel());
					ps.setInt(2, oldSkill.getId());
					ps.setInt(3, getObjectId());
					ps.setInt(4, classIndex);
					ps.execute();
				}
			}
			else if (newSkill != null)
			{
				try (PreparedStatement ps = con.prepareStatement(ADD_NEW_SKILL))
				{
					ps.setInt(1, getObjectId());
					ps.setInt(2, newSkill.getId());
					ps.setInt(3, newSkill.getLevel());
					ps.setInt(4, classIndex);
					ps.execute();
				}
			}
			else
			{
				_log.warning("Could not store new skill, it's null!");
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.WARNING, "Error could not store char skills: " + e.getMessage(), e);
		}
	}

	/**
	 * Adds or updates player's skills in the database.
	 *
	 * @param newSkills     the list of skills to store
	 * @param newClassIndex if newClassIndex > -1, the skills will be stored for that class index, not the current one
	 */
	private void storeSkills(final List<Skill> newSkills, final int newClassIndex)
	{
		if (newSkills.isEmpty())
		{
			return;
		}

		final int classIndex = newClassIndex > -1 ? newClassIndex : _classIndex;

		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement ps = con.prepareStatement(ADD_NEW_SKILLS))
		{
			con.setAutoCommit(false);

			for (final Skill addSkill : newSkills)
			{

				ps.setInt(1, getObjectId());
				ps.setInt(2, addSkill.getId());
				ps.setInt(3, addSkill.getLevel());
				ps.setInt(4, classIndex);
				ps.addBatch();
			}

			ps.executeBatch();
			con.commit();
		}
		catch (final SQLException e)
		{
			_log.log(Level.WARNING, "Error could not store char skills: " + e.getMessage(), e);
		}
	}

	/**
	 * Retrieve from the database all skills of this L2PcInstance and add them to _skills.
	 */
	private void restoreSkills()
	{
		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement(RESTORE_SKILLS_FOR_CHAR))
		{
			statement.setInt(1, getObjectId());
			statement.setInt(2, getClassIndex());

			try (ResultSet rset = statement.executeQuery())
			{
				while (rset.next())
				{
					final int id = rset.getInt("skill_id");
					final int level = rset.getInt("skill_level");

					final Skill skill = SkillData.getInstance().getSkill(id, level);

					if (skill == null)
					{
						_log.warning("Skipped null skill Id: " + id + " Level: " + level + " while restoring player skills for playerObjId: " + getObjectId());
						continue;
					}

					addSkill(skill);

					if (Config.SKILL_CHECK_ENABLE && (!canOverrideCond(PcCondOverride.SKILL_CONDITIONS) || Config.SKILL_CHECK_GM))
					{
						if (!SkillTreesData.getInstance().isSkillAllowed(this, skill))
						{
							Util.handleIllegalPlayerAction(this, "Player " + getName() + " has invalid skill " + skill.getName() + " (" + skill.getId() + "/" + skill.getLevel() + "), class:" + ClassListData.getInstance().getClass(getClassId()).getClassName(), IllegalActionPunishmentType.BROADCAST);

							if (Config.SKILL_CHECK_REMOVE)
							{
								removeSkill(skill);
							}
						}
					}
				}
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.WARNING, "Could not restore character " + this + " skills: " + e.getMessage(), e);
		}
	}

	/**
	 * Retrieve from the database all skill effects of this L2PcInstance and add them to the player.
	 */
	@Override
	public void restoreEffects()
	{
		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement(RESTORE_SKILL_SAVE))
		{
			statement.setInt(1, getObjectId());
			statement.setInt(2, getClassIndex());

			try (ResultSet rset = statement.executeQuery())
			{
				while (rset.next())
				{
					final int remainingTime = rset.getInt("remaining_time");
					final long reuseDelay = rset.getLong("reuse_delay");
					final long systime = rset.getLong("systime");
					final int restoreType = rset.getInt("restore_type");

					final Skill skill = SkillData.getInstance().getSkill(rset.getInt("skill_id"), rset.getInt("skill_level"));

					if (skill == null)
					{
						continue;
					}

					final long time = systime - System.currentTimeMillis();

					if (time > 10)
					{
						disableSkill(skill, time);
						addTimeStamp(skill, reuseDelay, systime);
					}

					if (restoreType > 0)
					{
						continue;
					}

					skill.applyEffects(this, this, false, remainingTime);
				}
			}

			try (PreparedStatement delete = con.prepareStatement(DELETE_SKILL_SAVE))
			{
				delete.setInt(1, getObjectId());
				delete.setInt(2, getClassIndex());
				delete.executeUpdate();
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.WARNING, "Could not restore " + this + " active effect data: " + e.getMessage(), e);
		}
	}

	/**
	 * Retrieve from the database all Item Reuse Time of this L2PcInstance and add them to the player.
	 */
	private void restoreItemReuse()
	{
		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement(RESTORE_ITEM_REUSE_SAVE); PreparedStatement delete = con.prepareStatement(DELETE_ITEM_REUSE_SAVE);)
		{
			statement.setInt(1, getObjectId());

			try (ResultSet rset = statement.executeQuery())
			{
				int itemId;
				@SuppressWarnings("unused")
				int itemObjId;
				long reuseDelay;
				long systime;
				boolean isInInventory;
				long remainingTime;

				while (rset.next())
				{
					itemId = rset.getInt("itemId");
					itemObjId = rset.getInt("itemObjId");
					reuseDelay = rset.getLong("reuseDelay");
					systime = rset.getLong("systime");
					isInInventory = true;

					L2ItemInstance item = getInventory().getItemByItemId(itemId);

					if (item == null)
					{
						item = getWarehouse().getItemByItemId(itemId);
						isInInventory = false;
					}

					if (item != null && item.getId() == itemId && item.getReuseDelay() > 0)
					{
						remainingTime = systime - System.currentTimeMillis();

						if (remainingTime > 10)
						{
							addTimeStampItem(item, reuseDelay, systime);

							if (isInInventory && item.isEtcItem())
							{
								final int group = item.getSharedReuseGroup();

								if (group > 0)
								{
									sendPacket(new ExUseSharedGroupItem(itemId, group, (int) remainingTime, (int) reuseDelay));
								}
							}
						}
					}
				}
			}

			delete.setInt(1, getObjectId());
			delete.executeUpdate();
		}
		catch (final Exception e)
		{
			_log.log(Level.WARNING, "Could not restore " + this + " Item Reuse data: " + e.getMessage(), e);
		}
	}

	/**
	 * Retrieve from the database all Henna of this L2PcInstance, add them to _henna and calculate stats of the L2PcInstance.
	 */
	private void restoreHenna()
	{
		for (int i = 0; i < 3; i++)
		{
			_henna[i] = null;
		}

		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement(RESTORE_CHAR_HENNAS))
		{
			statement.setInt(1, getObjectId());
			statement.setInt(2, getClassIndex());

			try (ResultSet rset = statement.executeQuery())
			{
				int slot;
				int symbolId;

				while (rset.next())
				{
					slot = rset.getInt("slot");

					if (slot < 1 || slot > 3)
					{
						continue;
					}

					symbolId = rset.getInt("symbol_id");

					if (symbolId == 0)
					{
						continue;
					}

					_henna[slot - 1] = HennaData.getInstance().getHenna(symbolId);
				}
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "Failed restoring character " + this + " hennas.", e);
		}

		recalcHennaStats();
	}

	/**
	 * @return the number of Henna empty slot of the L2PcInstance.
	 */
	public int getHennaEmptySlots()
	{
		int totalSlots = 0;

		if (getClassId().level() == 1)
		{
			totalSlots = 2;
		}
		else
		{
			totalSlots = 3;
		}

		for (int i = 0; i < 3; i++)
		{
			if (_henna[i] != null)
			{
				totalSlots--;
			}
		}

		if (totalSlots <= 0)
		{
			return 0;
		}

		return totalSlots;
	}

	/**
	 * Remove a Henna of the L2PcInstance, save update in the character_hennas table of the database and send Server->Client HennaInfo/UserInfo packet to this L2PcInstance.
	 *
	 * @param slot
	 * @return
	 */
	public boolean removeHenna(int slot)
	{
		if (slot < 1 || slot > 3)
		{
			return false;
		}

		slot--;

		final L2Henna henna = _henna[slot];

		if (henna == null)
		{
			return false;
		}

		_henna[slot] = null;

		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement(DELETE_CHAR_HENNA))
		{
			statement.setInt(1, getObjectId());
			statement.setInt(2, slot + 1);
			statement.setInt(3, getClassIndex());
			statement.execute();
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "Failed remocing character henna.", e);
		}

		recalcHennaStats();

		sendPacket(new HennaInfo(this));

		sendPacket(new UserInfo(this));
		sendPacket(new ExBrExtraUserInfo(this));

		getInventory().addItem("Henna", henna.getDyeItemId(), henna.getCancelCount(), this, null);
		reduceAdena("Henna", henna.getCancelFee(), this, false);

		final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.EARNED_S2_S1_S);
		sm.addItemName(henna.getDyeItemId());
		sm.addLong(henna.getCancelCount());
		sendPacket(sm);
		sendPacket(SystemMessageId.SYMBOL_DELETED);

		EventDispatcher.getInstance().notifyEventAsync(new OnPlayerHennaRemove(this, henna), this);
		return true;
	}

	/**
	 * Add a Henna to the L2PcInstance, save update in the character_hennas table of the database and send Server->Client HennaInfo/UserInfo packet to this L2PcInstance.
	 *
	 * @param henna the henna to add to the player.
	 * @return {@code true} if the henna is added to the player, {@code false} otherwise.
	 */
	public boolean addHenna(final L2Henna henna)
	{
		for (int i = 0; i < 3; i++)
		{
			if (_henna[i] == null)
			{
				_henna[i] = henna;

				recalcHennaStats();

				try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement(ADD_CHAR_HENNA))
				{
					statement.setInt(1, getObjectId());
					statement.setInt(2, henna.getDyeId());
					statement.setInt(3, i + 1);
					statement.setInt(4, getClassIndex());
					statement.execute();
				}
				catch (final Exception e)
				{
					_log.log(Level.SEVERE, "Failed saving character henna.", e);
				}

				sendPacket(new HennaInfo(this));

				sendPacket(new UserInfo(this));
				sendPacket(new ExBrExtraUserInfo(this));

				EventDispatcher.getInstance().notifyEventAsync(new OnPlayerHennaRemove(this, henna), this);
				return true;
			}
		}

		return false;
	}

	/**
	 * Calculate Henna modifiers of this L2PcInstance.
	 */
	private void recalcHennaStats()
	{
		_hennaINT = 0;
		_hennaSTR = 0;
		_hennaCON = 0;
		_hennaMEN = 0;
		_hennaWIT = 0;
		_hennaDEX = 0;

		for (final L2Henna h : _henna)
		{
			if (h == null)
			{
				continue;
			}

			_hennaINT += _hennaINT + h.getStatINT() > 5 ? 5 - _hennaINT : h.getStatINT();
			_hennaSTR += _hennaSTR + h.getStatSTR() > 5 ? 5 - _hennaSTR : h.getStatSTR();
			_hennaMEN += _hennaMEN + h.getStatMEN() > 5 ? 5 - _hennaMEN : h.getStatMEN();
			_hennaCON += _hennaCON + h.getStatCON() > 5 ? 5 - _hennaCON : h.getStatCON();
			_hennaWIT += _hennaWIT + h.getStatWIT() > 5 ? 5 - _hennaWIT : h.getStatWIT();
			_hennaDEX += _hennaDEX + h.getStatDEX() > 5 ? 5 - _hennaDEX : h.getStatDEX();
		}
	}

	/**
	 * @param slot the character inventory henna slot.
	 * @return the Henna of this L2PcInstance corresponding to the selected slot.
	 */
	public L2Henna getHenna(final int slot)
	{
		if (slot < 1 || slot > 3)
		{
			return null;
		}

		return _henna[slot - 1];
	}

	/**
	 * @return {@code true} if player has at least 1 henna symbol, {@code false} otherwise.
	 */
	public boolean hasHennas()
	{
		for (final L2Henna henna : _henna)
		{
			if (henna != null)
			{
				return true;
			}
		}

		return false;
	}

	/**
	 * @return the henna holder for this player.
	 */
	public L2Henna[] getHennaList()
	{
		return _henna;
	}

	/**
	 * @return the INT Henna modifier of this L2PcInstance.
	 */
	public int getHennaStatINT()
	{
		return _hennaINT;
	}

	/**
	 * @return the STR Henna modifier of this L2PcInstance.
	 */
	public int getHennaStatSTR()
	{
		return _hennaSTR;
	}

	/**
	 * @return the CON Henna modifier of this L2PcInstance.
	 */
	public int getHennaStatCON()
	{
		return _hennaCON;
	}

	/**
	 * @return the MEN Henna modifier of this L2PcInstance.
	 */
	public int getHennaStatMEN()
	{
		return _hennaMEN;
	}

	/**
	 * @return the WIT Henna modifier of this L2PcInstance.
	 */
	public int getHennaStatWIT()
	{
		return _hennaWIT;
	}

	/**
	 * @return the DEX Henna modifier of this L2PcInstance.
	 */
	public int getHennaStatDEX()
	{
		return _hennaDEX;
	}

	/**
	 * Return True if the L2PcInstance is autoAttackable.<br>
	 * <B><U>Actions</U>:</B>
	 * <ul>
	 * <li>Check if the attacker isn't the L2PcInstance Pet</li>
	 * <li>Check if the attacker is L2MonsterInstance</li>
	 * <li>If the attacker is a L2PcInstance, check if it is not in the same party</li>
	 * <li>Check if the L2PcInstance has Karma</li>
	 * <li>If the attacker is a L2PcInstance, check if it is not in the same siege clan (Attacker, Defender)</li>
	 * </ul>
	 */
	@Override
	public boolean isAutoAttackable(final L2Character attacker)
	{
		if (attacker == null)
		{
			return false;
		}

		if (attacker == this || attacker == getSummon())
		{
			return false;
		}

		if (attacker instanceof L2FriendlyMobInstance)
		{
			return false;
		}

		if (attacker.isMonster())
		{
			return true;
		}

		if (attacker.isPlayable() && getDuelState() == DuelState.DUELLING && getDuelId() == attacker.getActingPlayer().getDuelId())
		{
			final Duel duel = DuelManager.getInstance().getDuel(getDuelId());

			if (duel.getTeamA().contains(this) && duel.getTeamA().contains(attacker))
			{
				return false;
			}
			else if (duel.getTeamB().contains(this) && duel.getTeamB().contains(attacker))
			{
				return false;
			}

			return true;
		}

		if (attacker.isPlayable())
		{
			if (isInTournamentWith(attacker))
			{
				return !isOnSameSideTournamentWith(attacker);
			}

			if (isInEvent() && attacker.isInEvent())
			{
				return !isOnSameSideEventWith(attacker);
			}

			if (isInsideZone(ZoneId.SHIFT) && attacker.isInsideZone(ZoneId.SHIFT))
			{
				return true;
			}

			if (Config.FACTION_ENABLED)
			{
				return !isInFactionWith(attacker);
			}
		}

		if (isInParty() && getParty().getMembers().contains(attacker))
		{
			return false;
		}

		if (attacker.isPlayer() && attacker.getActingPlayer().isInOlympiadMode())
		{
			if (isInOlympiadMode() && isOlympiadStart() && ((L2PcInstance) attacker).getOlympiadGameId() == getOlympiadGameId())
			{
				return true;
			}

			return false;
		}

		if (attacker.isPlayable())
		{
			if (isInsideZone(ZoneId.PEACE))
			{
				return false;
			}

			final L2PcInstance attackerPlayer = attacker.getActingPlayer();

			if (getClan() != null)
			{
				final Siege siege = SiegeManager.getInstance().getSiege(getX(), getY(), getZ());

				if (siege != null)
				{
					if (siege.checkIsDefender(attackerPlayer.getClan()) && siege.checkIsDefender(getClan()))
					{
						return false;
					}

					if (siege.checkIsAttacker(attackerPlayer.getClan()) && siege.checkIsAttacker(getClan()))
					{
						return false;
					}
				}

				if (getClan() != null && attackerPlayer.getClan() != null && getClan().isAtWarWith(attackerPlayer.getClanId()) && attackerPlayer.getClan().isAtWarWith(getClanId()) && getWantsPeace() == 0 && attackerPlayer.getWantsPeace() == 0 && !isAcademyMember())
				{
					return true;
				}
			}

			if (isInsideZone(ZoneId.PVP) && attackerPlayer.isInsideZone(ZoneId.PVP) && !(isInsideZone(ZoneId.SIEGE) && attackerPlayer.isInsideZone(ZoneId.SIEGE)))
			{
				return true;
			}

			if (getClan() != null && getClan().isMember(attacker.getObjectId()))
			{
				return false;
			}

			if (attacker.isPlayer() && getAllyId() != 0 && getAllyId() == attackerPlayer.getAllyId())
			{
				return false;
			}

			if (isInsideZone(ZoneId.PVP) && attackerPlayer.isInsideZone(ZoneId.PVP) && isInsideZone(ZoneId.SIEGE) && attackerPlayer.isInsideZone(ZoneId.SIEGE))
			{
				return true;
			}
		}
		else if (attacker instanceof L2DefenderInstance)
		{
			if (getClan() != null)
			{
				final Siege siege = SiegeManager.getInstance().getSiege(this);
				return siege != null && siege.checkIsAttacker(getClan());
			}
		}

		if (getKarma() > 0 || getPvpFlag() > 0)
		{
			return true;
		}

		return false;
	}

	/**
	 * Check if the active L2Skill can be casted.<br>
	 * <B><U>Actions</U>:</B>
	 * <ul>
	 * <li>Check if the skill isn't toggle and is offensive</li>
	 * <li>Check if the target is in the skill cast range</li>
	 * <li>Check if the skill is Spoil type and if the target isn't already spoiled</li>
	 * <li>Check if the caster owns enough consumed item, enough HP and MP to cast the skill</li>
	 * <li>Check if the caster isn't sitting</li>
	 * <li>Check if all skills are enabled and this skill is enabled</li>
	 * <li>Check if the caster own the weapon needed</li>
	 * <li>Check if the skill is active</li>
	 * <li>Check if all casting conditions are completed</li>
	 * <li>Notify the AI with AI_INTENTION_CAST and target</li>
	 * </ul>
	 *
	 * @param skill    The L2Skill to use
	 * @param forceUse used to force ATTACK on players
	 * @param dontMove used to prevent movement, if not in range
	 */
	@Override
	public boolean useMagic(final Skill skill, final boolean forceUse, final boolean dontMove)
	{
		if (skill.isPassive())
		{
			sendPacket(ActionFailed.STATIC_PACKET);
			return false;
		}

		if (isCastingNow())
		{
			final SkillUseHolder currentSkill = getCurrentSkill();

			if (currentSkill != null && skill.getId() == currentSkill.getSkillId())
			{
				sendPacket(ActionFailed.STATIC_PACKET);
				return false;
			}
			else if (isSkillDisabled(skill))
			{
				sendPacket(ActionFailed.STATIC_PACKET);
				return false;
			}

			setQueuedSkill(skill, forceUse, dontMove);
			sendPacket(ActionFailed.STATIC_PACKET);
			return false;
		}

		setIsCastingNow(true);
		setCurrentSkill(skill, forceUse, dontMove);

		if (getQueuedSkill() != null)
		{
			setQueuedSkill(null, false, false);
		}

		final L2Object target = switch (skill.getTargetType())
		{
			case AURA, FRONT_AURA, BEHIND_AURA, GROUND, SELF, AURA_CORPSE_MOB, COMMAND_CHANNEL, AURA_FRIENDLY, AURA_UNDEAD_ENEMY -> this;
			default -> skill.getFirstOfTargetList(this);
		};

		getAI().setIntention(CtrlIntention.AI_INTENTION_CAST, skill, target);
		return true;
	}

	private boolean checkUseMagicConditions(final Skill skill, final boolean forceUse, final boolean dontMove)
	{
		if (isOutOfControl() || isParalyzed() || isStunned() || isSleeping())
		{
			sendPacket(ActionFailed.STATIC_PACKET);
			return false;
		}

		if (isDead())
		{
			sendPacket(ActionFailed.STATIC_PACKET);
			return false;
		}

		if (isFishing() && !skill.hasEffectType(L2EffectType.FISHING, L2EffectType.FISHING_START))
		{
			sendPacket(SystemMessageId.ONLY_FISHING_SKILLS_NOW);
			return false;
		}

		if (inObserverMode())
		{
			sendPacket(SystemMessageId.OBSERVERS_CANNOT_PARTICIPATE);
			abortCast();
			sendPacket(ActionFailed.STATIC_PACKET);
			return false;
		}

		if (isSitting())
		{
			sendPacket(SystemMessageId.CANT_MOVE_SITTING);
			sendPacket(ActionFailed.STATIC_PACKET);
			return false;
		}

		if (skill.isToggle() && isAffectedBySkill(skill.getId()))
		{
			stopSkillEffects(true, skill.getId());
			sendPacket(ActionFailed.STATIC_PACKET);
			return false;
		}

		if (isFakeDeath())
		{
			sendPacket(ActionFailed.STATIC_PACKET);
			return false;
		}

		if (getService().hasService(ServiceType.AIO) && !isInsideAnyZoneOf(ZoneId.TOWN, ZoneId.PEACE))
		{
			sendPacket(ActionFailed.STATIC_PACKET);
			return false;
		}

		final L2TargetType sklTargetType = skill.getTargetType();
		final Location worldPosition = getCurrentSkillWorldPosition();

		if (sklTargetType == L2TargetType.GROUND && worldPosition == null)
		{
			_log.info("WorldPosition is null for skill: " + skill.getName() + ", player: " + getName() + ".");
			sendPacket(ActionFailed.STATIC_PACKET);
			return false;
		}

		final L2Object target = switch (sklTargetType)
		{
			case AURA, FRONT_AURA, BEHIND_AURA, PARTY, CLAN, PARTY_CLAN, GROUND, SELF, AREA_SUMMON, AURA_CORPSE_MOB, COMMAND_CHANNEL, AURA_FRIENDLY, AURA_UNDEAD_ENEMY -> this;
			case PET, SERVITOR, SUMMON -> getSummon();
			default -> getTarget();
		};

		if (target == null)
		{
			sendPacket(ActionFailed.STATIC_PACKET);
			return false;
		}

		if (target.isDoor())
		{
			final L2DoorInstance door = (L2DoorInstance) target;

			if (door.getCastle() != null && door.getCastle().getResidenceId() > 0)
			{
				if (!door.getCastle().getSiege().isInProgress())
				{
					sendPacket(SystemMessageId.INCORRECT_TARGET);
					return false;
				}
			}
			else if (door.getFort() != null && door.getFort().getResidenceId() > 0)
			{
				if (!door.getFort().getSiege().isInProgress() || !door.getIsShowHp())
				{
					sendPacket(SystemMessageId.INCORRECT_TARGET);
					return false;
				}
			}
		}

		if (isInDuel())
		{
			if (target instanceof L2Playable)
			{
				final L2PcInstance cha = target.getActingPlayer();

				if (cha.getDuelId() != getDuelId())
				{
					sendPacket(ActionFailed.STATIC_PACKET);
					return false;
				}
			}
		}

		if (isSkillDisabled(skill))
		{
			final SystemMessage sm;

			if (hasSkillReuse(skill.getReuseHashCode()))
			{
				final int remainingTime = (int) (getSkillRemainingReuseTime(skill.getReuseHashCode()) / 1000);
				final int hours = remainingTime / 3600;
				final int minutes = remainingTime % 3600 / 60;
				final int seconds = remainingTime % 60;

				if (hours > 0)
				{
					sm = SystemMessage.getSystemMessage(SystemMessageId.S2_HOURS_S3_MINUTES_S4_SECONDS_REMAINING_FOR_REUSE_S1);
					sm.addSkillName(skill);
					sm.addInt(hours);
					sm.addInt(minutes);
				}
				else if (minutes > 0)
				{
					sm = SystemMessage.getSystemMessage(SystemMessageId.S2_MINUTES_S3_SECONDS_REMAINING_FOR_REUSE_S1);
					sm.addSkillName(skill);
					sm.addInt(minutes);
				}
				else
				{
					sm = SystemMessage.getSystemMessage(SystemMessageId.S2_SECONDS_REMAINING_FOR_REUSE_S1);
					sm.addSkillName(skill);
				}

				sm.addInt(seconds);
			}
			else
			{
				sm = SystemMessage.getSystemMessage(SystemMessageId.S1_PREPARED_FOR_REUSE);
				sm.addSkillName(skill);
			}

			sendPacket(sm);
			return false;
		}

		if (!skill.checkCondition(this, target, false))
		{
			sendPacket(ActionFailed.STATIC_PACKET);
			return false;
		}

		if (skill.isBad())
		{
			if (isInsidePeaceZone(this, target) && !getAccessLevel().allowPeaceAttack())
			{
				sendPacket(SystemMessageId.TARGET_IN_PEACEZONE);
				sendPacket(ActionFailed.STATIC_PACKET);
				return false;
			}

			if (isInOlympiadMode() && !isOlympiadStart())
			{
				sendPacket(ActionFailed.STATIC_PACKET);
				return false;
			}

			if (target.getActingPlayer() != null && getSiegeState() > 0 && isInsideZone(ZoneId.SIEGE) && target.getActingPlayer().getSiegeState() == getSiegeState() && target.getActingPlayer() != this && target.getActingPlayer().getSiegeSide() == getSiegeSide())
			{
				if (TerritoryWarManager.getInstance().isTWInProgress())
				{
					sendPacket(SystemMessageId.YOU_CANNOT_ATTACK_A_MEMBER_OF_THE_SAME_TERRITORY);
				}
				else
				{
					sendPacket(SystemMessageId.FORCED_ATTACK_IS_IMPOSSIBLE_AGAINST_SIEGE_SIDE_TEMPORARY_ALLIED_MEMBERS);
				}

				sendPacket(ActionFailed.STATIC_PACKET);
				return false;
			}

			if (!target.canBeAttacked() && !getAccessLevel().allowPeaceAttack() && !target.isDoor())
			{
				sendPacket(ActionFailed.STATIC_PACKET);
				return false;
			}

			if (target instanceof L2EventMonsterInstance && ((L2EventMonsterInstance) target).eventSkillAttackBlocked())
			{
				sendPacket(ActionFailed.STATIC_PACKET);
				return false;
			}

			if (!target.isAutoAttackable(this) && !forceUse)
			{
				switch (sklTargetType)
				{
					case AURA:
					case FRONT_AURA:
					case BEHIND_AURA:
					case AURA_CORPSE_MOB:
					case CLAN:
					case PARTY:
					case SELF:
					case GROUND:
					case AREA_SUMMON:
					case UNLOCKABLE:
					case AURA_FRIENDLY:
					case AURA_UNDEAD_ENEMY:
						break;
					default:
						sendPacket(ActionFailed.STATIC_PACKET);
						return false;
				}
			}

			if (dontMove)
			{
				if (sklTargetType == L2TargetType.GROUND)
				{
					if (!isInsideRadius(worldPosition.getX(), worldPosition.getY(), worldPosition.getZ(), skill.getCastRange() + getTemplate().getCollisionRadius(), false, false))
					{
						sendPacket(SystemMessageId.TARGET_TOO_FAR);
						sendPacket(ActionFailed.STATIC_PACKET);
						return false;
					}
				}
				else if (skill.getCastRange() > 0 && !isInsideRadius(target, skill.getCastRange() + getTemplate().getCollisionRadius(), false, false))
				{
					sendPacket(SystemMessageId.TARGET_TOO_FAR);
					sendPacket(ActionFailed.STATIC_PACKET);
					return false;
				}
			}
		}

		if (skill.getEffectPoint() > 0 && target.isMonster() && !forceUse)
		{
			sendPacket(ActionFailed.STATIC_PACKET);
			return false;
		}

		switch (sklTargetType)
		{
			case PARTY:
			case CLAN:
			case PARTY_CLAN:
			case AURA:
			case FRONT_AURA:
			case BEHIND_AURA:
			case AREA_SUMMON:
			case AURA_UNDEAD_ENEMY:
			case GROUND:
			case SELF:
			case ENEMY:
				break;
			default:
				if (!checkPvpSkill(target, skill) && !getAccessLevel().allowPeaceAttack() && target.isPlayable())
				{
					sendPacket(SystemMessageId.TARGET_IS_INCORRECT);
					sendPacket(ActionFailed.STATIC_PACKET);
					return false;
				}
		}

		if (skill.getCastRange() > 0)
		{
			if (sklTargetType == L2TargetType.GROUND)
			{
				if (!GeoData.getInstance().canSeeTarget(this, worldPosition))
				{
					sendPacket(SystemMessageId.CANT_SEE_TARGET);
					sendPacket(ActionFailed.STATIC_PACKET);
					return false;
				}
			}
			else if (!GeoData.getInstance().canSeeTarget(this, target))
			{
				sendPacket(SystemMessageId.CANT_SEE_TARGET);
				sendPacket(ActionFailed.STATIC_PACKET);
				return false;
			}
		}

		if (skill.getFlyType() == FlyType.CHARGE && !GeoData.getInstance().canMove(this, target))
		{
			sendPacket(SystemMessageId.THE_TARGET_IS_LOCATED_WHERE_YOU_CANNOT_CHARGE);
			return false;
		}

		return true;
	}

	public boolean isInLooterParty(final int LooterId)
	{
		final L2PcInstance looter = L2World.getInstance().getPlayer(LooterId);

		if (isInParty() && getParty().isInCommandChannel() && looter != null)
		{
			return getParty().getCommandChannel().getMembers().contains(looter);
		}

		if (isInParty() && looter != null)
		{
			return getParty().getMembers().contains(looter);
		}

		return false;
	}

	/**
	 * Check if the requested casting is a Pc->Pc skill cast and if it's a valid pvp condition
	 *
	 * @param target L2Object instance containing the target
	 * @param skill  L2Skill instance with the skill being casted
	 * @return {@code false} if the skill is a pvpSkill and target is not a valid pvp target, {@code true} otherwise.
	 */
	public boolean checkPvpSkill(final L2Object target, final Skill skill)
	{
		if (skill == null || target == null)
		{
			return false;
		}

		if (!(target instanceof L2Playable))
		{
			return true;
		}

		if (skill.isDebuff() || skill.hasEffectType(L2EffectType.STEAL_ABNORMAL) || skill.isBad())
		{
			final L2PcInstance targetPlayer = target.getActingPlayer();

			if (targetPlayer == null || this == target)
			{
				return false;
			}

			if (isInTournamentWith(targetPlayer))
			{
				return !isOnSameSideTournamentWith(targetPlayer);
			}

			if (isInEventWith(target.getActingPlayer()))
			{
				return !isOnSameSideEventWith(target.getActingPlayer());
			}

			if (isInsideZone(ZoneId.SHIFT) && targetPlayer.isInsideZone(ZoneId.SHIFT))
			{
				return true;
			}

			if (Config.FACTION_ENABLED)
			{
				return !isInFactionWith(targetPlayer);
			}

			final boolean isCtrlPressed = getCurrentSkill() != null && getCurrentSkill().isCtrlPressed();

			if (target.isInsideZone(ZoneId.PEACE))
			{
				return false;
			}

			if (getSiegeState() != 0 && targetPlayer.getSiegeState() != 0)
			{
				if (getSiegeSide() == targetPlayer.getSiegeSide())
				{
					if (getSiegeState() == targetPlayer.getSiegeState())
					{
						sendPacket(SystemMessageId.FORCED_ATTACK_IS_IMPOSSIBLE_AGAINST_SIEGE_SIDE_TEMPORARY_ALLIED_MEMBERS);
						return false;
					}
				}
			}

			if (isInDuel() && targetPlayer.isInDuel())
			{
				if (getDuelId() == targetPlayer.getDuelId())
				{
					return true;
				}
			}

			if (isInParty() && targetPlayer.isInParty())
			{
				if (getParty().getLeader() == targetPlayer.getParty().getLeader())
				{
					if (skill.getEffectRange() > 0 && isCtrlPressed && getTarget() == target)
					{
						if (skill.isDamage())
						{
							return true;
						}
					}

					return false;
				}
				else if (getParty().getCommandChannel() != null && getParty().getCommandChannel().containsPlayer(targetPlayer))
				{
					if (skill.getEffectRange() > 0 && isCtrlPressed && getTarget() == target)
					{
						if (skill.isDamage())
						{
							return true;
						}
					}

					return false;
				}
			}

			if (isInsideZone(ZoneId.PVP) && targetPlayer.isInsideZone(ZoneId.PVP))
			{
				return true;
			}

			if (isInOlympiadMode() && targetPlayer.isInOlympiadMode())
			{
				if (getOlympiadGameId() == targetPlayer.getOlympiadGameId())
				{
					return true;
				}
			}

			final L2Clan aClan = getClan();
			final L2Clan tClan = targetPlayer.getClan();

			if (aClan != null && tClan != null)
			{
				if (aClan.isAtWarWith(tClan.getId()) && tClan.isAtWarWith(aClan.getId()))
				{
					if (skill.isAOE() && skill.getEffectRange() > 0 && isCtrlPressed && getTarget() == target)
					{
						return true;
					}

					return isCtrlPressed;
				}
				else if (getClanId() == targetPlayer.getClanId() || getAllyId() > 0 && getAllyId() == targetPlayer.getAllyId())
				{
					if (skill.getEffectRange() > 0 && isCtrlPressed && getTarget() == target)
					{
						if (skill.isDamage())
						{
							return true;
						}
					}

					return false;
				}
			}

			if (targetPlayer.getPvpFlag() == 0 && targetPlayer.getKarma() == 0)
			{
				if (skill.getEffectRange() > 0 && isCtrlPressed && getTarget() == target)
				{
					if (skill.isDamage())
					{
						return true;
					}
				}

				return false;
			}

			if (targetPlayer.getPvpFlag() > 0 || targetPlayer.getKarma() > 0)
			{
				return true;
			}

			return false;
		}

		return true;
	}

	/**
	 * @return True if the L2PcInstance is a Mage.
	 */
	public boolean isMageClass()
	{
		return getClassId().isMage();
	}

	public boolean isMounted()
	{
		return _mountType != MountType.NONE;
	}

	public boolean checkLandingState()
	{
		if (isInsideZone(ZoneId.NO_LANDING))
		{
			return true;
		}
		else if (isInsideZone(ZoneId.SIEGE) && !(getClan() != null && CastleManager.getInstance().getCastle(this) == CastleManager.getInstance().getCastleByOwner(getClan()) && this == getClan().getLeader().getPlayerInstance()))
		{
			return true;
		}

		return false;
	}

	public void setMount(final int npcId, final int npcLevel)
	{
		final MountType type = MountType.findByNpcId(npcId);

		switch (type)
		{
			case NONE:
			{
				setIsFlying(false);
				break;
			}
			case STRIDER:
			{
				if (isNoble())
				{
					addSkill(CommonSkill.STRIDER_SIEGE_ASSAULT.getSkill(), false);
				}
				break;
			}
			case WYVERN:
			{
				setIsFlying(true);
				break;
			}
		}

		_mountType = type;
		_mountNpcId = npcId;
		_mountLevel = npcLevel;
	}

	/**
	 * @return the type of Pet mounted (0 : none, 1 : Strider, 2 : Wyvern, 3: Wolf).
	 */
	public MountType getMountType()
	{
		return _mountType;
	}

	@Override
	public final void stopAllEffects()
	{
		super.stopAllEffects();
		updateAndBroadcastStatus(2);
	}

	@Override
	public final void stopAllEffectsExceptThoseThatLastThroughDeath()
	{
		super.stopAllEffectsExceptThoseThatLastThroughDeath();
		updateAndBroadcastStatus(2);
	}

	public final void stopAllEffectsNotStayOnSubclassChange()
	{
		getEffectList().stopAllEffectsNotStayOnSubclassChange();
		updateAndBroadcastStatus(2);
	}

	public final void stopCubics()
	{
		if (!_cubics.isEmpty())
		{
			for (final L2CubicInstance cubic : _cubics.values())
			{
				cubic.stopAction();
				cubic.cancelDisappear();
			}

			_cubics.clear();
			broadcastUserInfo();
		}
	}

	public final void stopCubicsByOthers()
	{
		if (!_cubics.isEmpty())
		{
			boolean broadcast = false;

			for (final L2CubicInstance cubic : _cubics.values())
			{
				if (cubic.givenByOther())
				{
					cubic.stopAction();
					cubic.cancelDisappear();
					_cubics.remove(cubic.getId());
					broadcast = true;
				}
			}

			if (broadcast)
			{
				broadcastUserInfo();
			}
		}
	}

	/**
	 * Send a Server->Client packet UserInfo to this L2PcInstance and CharInfo to all L2PcInstance in its _KnownPlayers.<br>
	 * <B><U>Concept</U>:</B><br>
	 * Others L2PcInstance in the detection area of the L2PcInstance are identified in <B>_knownPlayers</B>.<br>
	 * In order to inform other players of this L2PcInstance state modifications, server just need to go through _knownPlayers to send Server->Client Packet<br>
	 * <B><U>Actions</U>:</B>
	 * <ul>
	 * <li>Send a Server->Client packet UserInfo to this L2PcInstance (Public and Private Data)</li>
	 * <li>Send a Server->Client packet CharInfo to all L2PcInstance in _KnownPlayers of the L2PcInstance (Public data only)</li>
	 * </ul>
	 * <FONT COLOR=#FF0000><B> <U>Caution</U> : DON'T SEND UserInfo packet to other players instead of CharInfo packet. Indeed, UserInfo packet contains PRIVATE DATA as MaxHP, STR, DEX...</B></FONT>
	 */
	@Override
	public void updateAbnormalEffect()
	{
		broadcastUserInfo();
	}

	/**
	 * Disable the Inventory and create a new task to enable it after 1.5s.
	 *
	 * @param val
	 */
	public void setInventoryBlockingStatus(final boolean val)
	{
		_inventoryDisable = val;

		if (val)
		{
			ThreadPoolManager.getInstance().scheduleGeneral(new InventoryEnableTask(this), 1500);
		}
	}

	/**
	 * @return True if the Inventory is disabled.
	 */
	public boolean isInventoryDisabled()
	{
		return _inventoryDisable;
	}

	/**
	 * Add a cubic to this player.
	 *
	 * @param cubicId          the cubic ID
	 * @param level
	 * @param cubicPower
	 * @param cubicDelay
	 * @param cubicSkillChance
	 * @param cubicMaxCount
	 * @param cubicDuration
	 * @param givenByOther
	 * @return the old cubic for this cubic ID if any, otherwise {@code null}
	 */
	public L2CubicInstance addCubic(final int cubicId, final int level, final double cubicPower, final int cubicDelay, final int cubicSkillChance, final int cubicMaxCount, final int cubicDuration, final boolean givenByOther)
	{
		return _cubics.put(cubicId, new L2CubicInstance(this, cubicId, level, (int) cubicPower, cubicDelay, cubicSkillChance, cubicMaxCount, cubicDuration, givenByOther));
	}

	/**
	 * Get the player's cubics.
	 *
	 * @return the cubics
	 */
	public Map<Integer, L2CubicInstance> getCubics()
	{
		return _cubics;
	}

	/**
	 * Get the player cubic by cubic ID, if any.
	 *
	 * @param cubicId the cubic ID
	 * @return the cubic with the given cubic ID, {@code null} otherwise
	 */
	public L2CubicInstance getCubicById(final int cubicId)
	{
		return _cubics.get(cubicId);
	}

	/**
	 * @return the modifier corresponding to the Enchant Effect of the Active Weapon (Min: 127).
	 */
	public int getEnchantEffect()
	{
		final L2ItemInstance wpn = getActiveWeaponInstance();

		if (wpn == null)
		{
			return 0;
		}

		return Math.min(127, wpn.getEnchantLevel());
	}

	/**
	 * Set the _lastFolkNpc of the L2PcInstance corresponding to the last Folk wich one the player talked.
	 *
	 * @param folkNpc
	 */
	public void setLastFolkNPC(final L2Npc folkNpc)
	{
		_lastFolkNpc = folkNpc;
	}

	/**
	 * @return the _lastFolkNpc of the L2PcInstance corresponding to the last Folk wich one the player talked.
	 */
	public L2Npc getLastFolkNPC()
	{
		return _lastFolkNpc;
	}

	/**
	 * @return True if L2PcInstance is a participant in the Festival of Darkness.
	 */
	public boolean isFestivalParticipant()
	{
		return SevenSignsFestival.getInstance().isParticipant(this);
	}

	public void addAutoSoulShot(final int itemId)
	{
		_activeSoulShots.add(itemId);
	}

	public boolean removeAutoSoulShot(final int itemId)
	{
		return _activeSoulShots.remove(itemId);
	}

	public Set<Integer> getAutoSoulShot()
	{
		return _activeSoulShots;
	}

	@Override
	public void rechargeShots(final boolean physical, final boolean magic)
	{
		L2ItemInstance item;
		IItemHandler handler;

		if (_activeSoulShots == null || _activeSoulShots.isEmpty())
		{
			return;
		}

		for (final int itemId : _activeSoulShots)
		{
			item = getInventory().getItemByItemId(itemId);

			if (item != null)
			{
				if (magic)
				{
					if (item.getItem().getDefaultAction() == ActionType.SPIRITSHOT)
					{
						handler = ItemHandler.getInstance().getHandler(item.getEtcItem());

						if (handler != null)
						{
							handler.useItem(this, item, false);
						}
					}
				}

				if (physical)
				{
					if (item.getItem().getDefaultAction() == ActionType.SOULSHOT)
					{
						handler = ItemHandler.getInstance().getHandler(item.getEtcItem());

						if (handler != null)
						{
							handler.useItem(this, item, false);
						}
					}
				}
			}
			else
			{
				removeAutoSoulShot(itemId);
			}
		}
	}

	/**
	 * Cancel autoshot for all shots matching crystaltype<BR>
	 * {@link L2Item#getCrystalType()}
	 *
	 * @param crystalType int type to disable
	 */
	public void disableAutoShotByCrystalType(final int crystalType)
	{
		for (final int itemId : _activeSoulShots)
		{
			if (ItemTable.getInstance().getTemplate(itemId).getCrystalType().getId() == crystalType)
			{
				disableAutoShot(itemId);
			}
		}
	}

	/**
	 * Cancel autoshot use for shot itemId
	 *
	 * @param itemId int id to disable
	 * @return true if canceled.
	 */
	public boolean disableAutoShot(final int itemId)
	{
		if (_activeSoulShots.contains(itemId))
		{
			removeAutoSoulShot(itemId);
			sendPacket(new ExAutoSoulShot(itemId, 0));

			final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.AUTO_USE_OF_S1_CANCELLED);
			sm.addItemName(itemId);
			sendPacket(sm);
			return true;
		}

		return false;
	}

	/**
	 * Cancel all autoshots for player
	 */
	public void disableAutoShotsAll()
	{
		for (final int itemId : _activeSoulShots)
		{
			sendPacket(new ExAutoSoulShot(itemId, 0));
			final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.AUTO_USE_OF_S1_CANCELLED);
			sm.addItemName(itemId);
			sendPacket(sm);
		}

		_activeSoulShots.clear();
	}

	private ScheduledFuture<?> _taskWarnUserTakeBreak;

	public EnumIntBitmask<ClanPrivilege> getClanPrivileges()
	{
		return _clanPrivileges;
	}

	public void setClanPrivileges(final EnumIntBitmask<ClanPrivilege> clanPrivileges)
	{
		_clanPrivileges = clanPrivileges.clone();
	}

	public boolean hasClanPrivilege(final ClanPrivilege privilege)
	{
		return _clanPrivileges.has(privilege);
	}

	public void setPledgeClass(final int classId)
	{
		_pledgeClass = classId;
		checkItemRestriction();
	}

	public int getPledgeClass()
	{
		return _pledgeClass;
	}

	public void setPledgeType(final int typeId)
	{
		_pledgeType = typeId;
	}

	@Override
	public int getPledgeType()
	{
		return _pledgeType;
	}

	public int getApprentice()
	{
		return _apprentice;
	}

	public void setApprentice(final int apprentice_id)
	{
		_apprentice = apprentice_id;
	}

	public int getSponsor()
	{
		return _sponsor;
	}

	public void setSponsor(final int sponsor_id)
	{
		_sponsor = sponsor_id;
	}

	public int getBookMarkSlot()
	{
		return _bookmarkslot;
	}

	public void setBookMarkSlot(final int slot)
	{
		_bookmarkslot = slot;
		sendPacket(new ExGetBookMarkInfoPacket(this));
	}

	@Override
	public void sendMessage(final String message)
	{
		sendPacket(SystemMessage.sendString(message));
	}

	public void enterObserverMode(final Location loc)
	{
		_savedLocation.setXYZ(this);

		getEffectList().stopSkillEffects(true, AbnormalType.HIDE);

		_observerMode = true;
		setTarget(null);
		setIsParalyzed(true);
		startParalyze();
		setIsInvul(true);
		setInvisible(true);
		sendPacket(new ObservationMode(loc));

		teleToLocation(loc, false);

		broadcastUserInfo();

		EventDispatcher.getInstance().notifyEventAsync(new OnPlayerObserverJoin(this, 0), this);
	}

	public void enterOlympiadObserverMode(final Location loc, final int id)
	{
		if (hasSummon())
		{
			getSummon().unSummon(this);
		}

		getEffectList().stopSkillEffects(true, AbnormalType.HIDE);

		if (!_cubics.isEmpty())
		{
			for (final L2CubicInstance cubic : _cubics.values())
			{
				cubic.stopAction();
				cubic.cancelDisappear();
			}

			_cubics.clear();
		}

		if (getParty() != null)
		{
			getParty().removePartyMember(this, MessageType.EXPELLED);
		}

		_olympiadGameId = id;

		if (isSitting())
		{
			standUp();
		}

		if (!_observerMode)
		{
			_savedLocation.setXYZ(this);
		}

		_observerMode = true;

		setTarget(null);
		setIsInvul(true);
		setInvisible(true);
		teleToLocation(loc, false);
		sendPacket(new ExOlympiadMode(3));

		broadcastUserInfo();

		EventDispatcher.getInstance().notifyEventAsync(new OnPlayerObserverJoin(this, _olympiadGameId), this);
	}

	public void leaveObserverMode()
	{
		setTarget(null);

		setInstanceId(0);
		teleToLocation(_savedLocation, false);

		sendPacket(new ObservationReturn(getLocation()));

		setIsParalyzed(false);

		if (!isGM())
		{
			setInvisible(false);
			setIsInvul(false);
		}

		if (hasAI())
		{
			getAI().setIntention(CtrlIntention.AI_INTENTION_IDLE);
		}

		setFalling();
		_observerMode = false;

		broadcastUserInfo();

		EventDispatcher.getInstance().notifyEventAsync(new OnPlayerObserverLeave(this), this);
	}

	public void leaveOlympiadObserverMode()
	{
		if (_olympiadGameId == -1)
		{
			return;
		}

		_olympiadGameId = -1;
		_observerMode = false;

		setTarget(null);
		sendPacket(new ExOlympiadMode(0));
		setInstanceId(0);
		teleToLocation(_savedLocation, true);

		if (!isGM())
		{
			setInvisible(false);
			setIsInvul(false);
		}

		if (hasAI())
		{
			getAI().setIntention(CtrlIntention.AI_INTENTION_IDLE);
		}

		broadcastUserInfo();
	}

	public void setOlympiadSide(final int i)
	{
		_olympiadSide = i;
	}

	public int getOlympiadSide()
	{
		return _olympiadSide;
	}

	public void setOlympiadGameId(final int id)
	{
		_olympiadGameId = id;
	}

	public int getOlympiadGameId()
	{
		return _olympiadGameId;
	}

	/**
	 * Gets the player's olympiad buff count.
	 *
	 * @return the olympiad's buff count
	 */
	public int getOlympiadBuffCount()
	{
		return _olyBuffsCount;
	}

	/**
	 * Sets the player's olympiad buff count.
	 *
	 * @param buffs the olympiad's buff count
	 */
	public void setOlympiadBuffCount(final int buffs)
	{
		_olyBuffsCount = buffs;
	}

	public Location getSavedLocation()
	{
		return _savedLocation;
	}

	public boolean inObserverMode()
	{
		return _observerMode;
	}

	public int getTeleMode()
	{
		return _telemode;
	}

	public void setTeleMode(final int mode)
	{
		_telemode = mode;
	}

	public void setLoto(final int i, final int val)
	{
		_loto[i] = val;
	}

	public int getLoto(final int i)
	{
		return _loto[i];
	}

	public void setRace(final int i, final int val)
	{
		_race[i] = val;
	}

	public int getRace(final int i)
	{
		return _race[i];
	}

	public boolean getMessageRefusal()
	{
		return _messageRefusal;
	}

	public void setMessageRefusal(final boolean mode)
	{
		_messageRefusal = mode;
		sendPacket(new EtcStatusUpdate(this));
	}

	public void setDietMode(final boolean mode)
	{
		_dietMode = mode;
	}

	public boolean getDietMode()
	{
		return _dietMode;
	}

	public void setTradeRefusal(final boolean mode)
	{
		_tradeRefusal = mode;
	}

	public boolean isTradeRefusal()
	{
		return _tradeRefusal || getPreferenceVariables().isTradeRefuse();
	}

	public void setExchangeRefusal(final boolean mode)
	{
		_exchangeRefusal = mode;
	}

	public boolean getExchangeRefusal()
	{
		return _exchangeRefusal;
	}

	public BlockList getBlockList()
	{
		return _blockList;
	}

	public void setHero(final boolean hero)
	{
		if (hero)
		{
			for (final Skill skill : SkillTreesData.getInstance().getHeroSkillTree().values())
			{
				addSkill(skill, false);
			}
		}
		else
		{
			for (final Skill skill : SkillTreesData.getInstance().getHeroSkillTree().values())
			{
				removeSkill(skill, false, true);
			}
		}

		_hero = hero;

		sendSkillList();
	}

	public void setIsInOlympiadMode(final boolean b)
	{
		_inOlympiadMode = b;
	}

	public void setIsOlympiadStart(final boolean b)
	{
		_OlympiadStart = b;
	}

	public boolean isOlympiadStart()
	{
		return _OlympiadStart;
	}

	public boolean isHero()
	{
		return _hero;
	}

	public boolean isInOlympiadMode()
	{
		return _inOlympiadMode;
	}

	@Override
	public boolean isInDuel()
	{
		return _duelState != DuelState.NO_DUEL;
	}

	@Override
	public int getDuelId()
	{
		return _duelId;
	}

	public void setDuelState(final DuelState state)
	{
		_duelState = state;
	}

	public DuelState getDuelState()
	{
		return _duelState;
	}

	/**
	 * Sets up the duel state using a non 0 duelId.
	 *
	 * @param duelId 0=not in a duel
	 */
	public void setIsInDuel(final int duelId)
	{
		if (duelId > 0)
		{
			_duelState = DuelState.DUELLING;
			_duelId = duelId;
		}
		else
		{
			if (_duelState == DuelState.DEAD)
			{
				enableAllSkills();
				getStatus().startHpMpRegeneration();
			}

			_duelState = DuelState.NO_DUEL;
			_duelId = 0;
		}
	}

	public boolean isNoble()
	{
		return _noble;
	}

	public void setNoble(final boolean val)
	{
		final Collection<Skill> nobleSkillTree = SkillTreesData.getInstance().getNobleSkillTree().values();

		if (val)
		{
			for (final Skill skill : nobleSkillTree)
			{
				addSkill(skill, false);
			}
		}
		else
		{
			for (final Skill skill : nobleSkillTree)
			{
				removeSkill(skill, false, true);
			}
		}

		_noble = val;
		sendSkillList();
	}

	public void setLvlJoinedAcademy(final int lvl)
	{
		_lvlJoinedAcademy = lvl;
	}

	public int getLvlJoinedAcademy()
	{
		return _lvlJoinedAcademy;
	}

	@Override
	public boolean isAcademyMember()
	{
		return _lvlJoinedAcademy > 0;
	}

	@Override
	public void setTeam(final Team team)
	{
		super.setTeam(team);
		broadcastUserInfo();

		if (hasSummon())
		{
			getSummon().broadcastStatusUpdate();
		}
	}

	public void setWantsPeace(final int wantsPeace)
	{
		_wantsPeace = wantsPeace;
	}

	public int getWantsPeace()
	{
		return _wantsPeace;
	}

	public boolean isFishing()
	{
		return _fishing;
	}

	public void setFishing(final boolean fishing)
	{
		_fishing = fishing;
	}

	public void sendSkillList()
	{
		boolean isDisabled = false;

		final SkillList sl = new SkillList();

		for (final Skill s : getAllSkills())
		{
			if (s == null)
			{
				continue;
			}

			if (_transformation != null && !s.isPassive())
			{
				continue;
			}

			if (getClan() != null)
			{
				isDisabled = s.isClanSkill() && getClan().getReputationScore() < 0;
			}

			boolean isEnchantable = SkillData.getInstance().isEnchantable(s.getId());

			if (isEnchantable)
			{
				final L2EnchantSkillLearn esl = EnchantSkillGroupsData.getInstance().getSkillEnchantmentBySkillId(s.getId());

				if (esl != null)
				{
					if (s.getLevel() < esl.getBaseLevel())
					{
						isEnchantable = false;
					}
				}
				else
				{
					isEnchantable = false;
				}
			}

			sl.addSkill(s.getDisplayId(), s.getDisplayLevel(), s.isPassive(), isDisabled, isEnchantable);
		}

		if (_transformation != null)
		{
			final Map<Integer, Integer> ts = new TreeMap<>();

			for (final SkillHolder holder : _transformation.getTemplate(this).getSkills())
			{
				ts.putIfAbsent(holder.getSkillId(), holder.getSkillLvl());

				if (ts.get(holder.getSkillId()) < holder.getSkillLvl())
				{
					ts.put(holder.getSkillId(), holder.getSkillLvl());
				}

				addTransformSkill(holder.getSkill());
			}

			for (final AdditionalSkillHolder holder : _transformation.getTemplate(this).getAdditionalSkills())
			{
				if (getLevel() >= holder.getMinLevel())
				{
					ts.putIfAbsent(holder.getSkillId(), holder.getSkillLvl());

					if (ts.get(holder.getSkillId()) < holder.getSkillLvl())
					{
						ts.put(holder.getSkillId(), holder.getSkillLvl());
					}

					addTransformSkill(holder.getSkill());
				}
			}

			for (final L2SkillLearn skill : SkillTreesData.getInstance().getCollectSkillTree().values())
			{
				if (getKnownSkill(skill.getSkillId()) != null)
				{
					addTransformSkill(SkillData.getInstance().getSkill(skill.getSkillId(), skill.getSkillLevel()));
				}
			}

			for (final Entry<Integer, Integer> transformSkill : ts.entrySet())
			{
				sl.addSkill(transformSkill.getKey(), transformSkill.getValue(), false, false, false);
			}
		}

		sendPacket(sl);
	}

	/**
	 * 1. Add the specified class ID as a subclass (up to the maximum number of <b>three</b>) for this character.<BR>
	 * 2. This method no longer changes the active _classIndex of the player. This is only done by the calling of setActiveClass() method as that should be the only way to do so.
	 *
	 * @param classId
	 * @param classIndex
	 * @return boolean subclassAdded
	 */
	public boolean addSubClass(final int classId, final int classIndex)
	{
		if (!_subclassLock.tryLock())
		{
			return false;
		}

		try
		{
			if (getTotalSubClasses() == Config.MAX_SUBCLASS || classIndex == 0)
			{
				return false;
			}

			if (getSubClasses().containsKey(classIndex))
			{
				return false;
			}

			if (Objects.nonNull(getTournament()) || EventContainer.getInstance().isRegistered(getObjectId()))
			{
				return false;
			}

			final SubClass newClass = new SubClass();
			newClass.setClassId(classId);
			newClass.setClassIndex(classIndex);

			try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement(ADD_CHAR_SUBCLASS))
			{
				statement.setInt(1, getObjectId());
				statement.setInt(2, newClass.getClassId());
				statement.setLong(3, newClass.getExp());
				statement.setInt(4, newClass.getSp());
				statement.setInt(5, newClass.getLevel());
				statement.setInt(6, newClass.getClassIndex());
				statement.execute();
			}
			catch (final Exception e)
			{
				_log.log(Level.WARNING, "WARNING: Could not add character sub class for " + getName() + ": " + e.getMessage(), e);
				return false;
			}

			getSubClasses().put(newClass.getClassIndex(), newClass);

			final ClassId subTemplate = ClassId.getClassId(classId);
			final Map<Integer, L2SkillLearn> skillTree = SkillTreesData.getInstance().getCompleteClassSkillTree(subTemplate);
			final Map<Integer, Skill> prevSkillList = new HashMap<>();

			for (final L2SkillLearn skillInfo : skillTree.values())
			{
				if (skillInfo.getGetLevel() <= 40)
				{
					final Skill prevSkill = prevSkillList.get(skillInfo.getSkillId());
					final Skill newSkill = SkillData.getInstance().getSkill(skillInfo.getSkillId(), skillInfo.getSkillLevel());

					if (prevSkill != null && prevSkill.getLevel() > newSkill.getLevel())
					{
						continue;
					}

					prevSkillList.put(newSkill.getId(), newSkill);
					storeSkill(newSkill, prevSkill, classIndex);
				}
			}

			return true;
		}
		finally
		{
			_subclassLock.unlock();
		}
	}

	/**
	 * 1. Completely erase all existance of the subClass linked to the classIndex.<br>
	 * 2. Send over the newClassId to addSubClass() to create a new instance on this classIndex.<br>
	 * 3. Upon Exception, revert the player to their BaseClass to avoid further problems.
	 *
	 * @param classIndex the class index to delete
	 * @param newClassId the new class Id
	 * @return {@code true} if the sub-class was modified, {@code false} otherwise
	 */
	public boolean modifySubClass(final int classIndex, final int newClassId)
	{
		if (!_subclassLock.tryLock())
		{
			return false;
		}

		try
		{
			try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement deleteHennas = con.prepareStatement(DELETE_CHAR_HENNAS); PreparedStatement deleteShortcuts = con.prepareStatement(DELETE_CHAR_SHORTCUTS); PreparedStatement deleteSkillReuse = con.prepareStatement(DELETE_SKILL_SAVE); PreparedStatement deleteSkills = con.prepareStatement(DELETE_CHAR_SKILLS); PreparedStatement deleteSubclass = con.prepareStatement(DELETE_CHAR_SUBCLASS))
			{
				// Remove all henna info stored for this sub-class.
				deleteHennas.setInt(1, getObjectId());
				deleteHennas.setInt(2, classIndex);
				deleteHennas.execute();

				// Remove all shortcuts info stored for this sub-class.
				deleteShortcuts.setInt(1, getObjectId());
				deleteShortcuts.setInt(2, classIndex);
				deleteShortcuts.execute();

				// Remove all effects info stored for this sub-class.
				deleteSkillReuse.setInt(1, getObjectId());
				deleteSkillReuse.setInt(2, classIndex);
				deleteSkillReuse.execute();

				// Remove all skill info stored for this sub-class.
				deleteSkills.setInt(1, getObjectId());
				deleteSkills.setInt(2, classIndex);
				deleteSkills.execute();

				// Remove all basic info stored about this sub-class.
				deleteSubclass.setInt(1, getObjectId());
				deleteSubclass.setInt(2, classIndex);
				deleteSubclass.execute();
			}
			catch (final Exception e)
			{
				_log.log(Level.WARNING, "Could not modify sub class for " + getName() + " to class index " + classIndex + ": " + e.getMessage(), e);

				getSubClasses().remove(classIndex);
				return false;
			}

			EventDispatcher.getInstance().notifyEventAsync(new OnPlayerProfessionCancel(this, getSubClasses().get(classIndex).getClassId()), this);

			getSubClasses().remove(classIndex);
		}
		finally
		{
			_subclassLock.unlock();
		}

		return addSubClass(newClassId, classIndex);
	}

	public boolean isSubClassActive()
	{
		return _classIndex > 0;
	}

	public Map<Integer, SubClass> getSubClasses()
	{
		if (_subClasses == null)
		{
			_subClasses = new ConcurrentSkipListMap<>();
		}

		return _subClasses;
	}

	public int getTotalSubClasses()
	{
		return getSubClasses().size();
	}

	public int getBaseClass()
	{
		return _baseClass;
	}

	public int getActiveClass()
	{
		return _activeClass;
	}

	public int getClassIndex()
	{
		return _classIndex;
	}

	private void setClassTemplate(final int classId)
	{
		_activeClass = classId;

		final L2PcTemplate pcTemplate = PlayerTemplateData.getInstance().getTemplate(classId);

		if (pcTemplate == null)
		{
			_log.severe("Missing template for classId: " + classId);
			throw new Error();
		}

		setTemplate(pcTemplate);

		EventDispatcher.getInstance().notifyEventAsync(new OnPlayerProfessionChange(this, pcTemplate, isSubClassActive()), this);
	}

	/**
	 * Changes the character's class based on the given class index.<br>
	 * An index of zero specifies the character's original (base) class, while indexes 1-3 specifies the character's sub-classes respectively.<br>
	 * <font color="00FF00"/>WARNING: Use only on subclase change</font>
	 *
	 * @param classIndex
	 * @return
	 */
	public boolean setActiveClass(final int classIndex)
	{
		if (!_subclassLock.tryLock())
		{
			return false;
		}

		try
		{
			if (_transformation != null)
			{
				return false;
			}

			for (final L2ItemInstance item : getInventory().getAugmentedItems())
			{
				if (item != null && item.isEquipped())
				{
					item.getAugmentation().removeBonus(this);
				}
			}

			abortCast();

			if (isChannelized())
			{
				getSkillChannelized().abortChannelization();
			}

			store(Config.SUBCLASS_STORE_SKILL_COOLTIME);

			resetTimeStamps();

			_charges.set(0);
			stopChargeTask();

			if (hasServitor())
			{
				getSummon().unSummon(this);
			}

			if (classIndex == 0)
			{
				setClassTemplate(getBaseClass());
			}
			else
			{
				try
				{
					setClassTemplate(getSubClasses().get(classIndex).getClassId());
				}
				catch (final Exception e)
				{
					_log.log(Level.WARNING, "Could not switch " + getName() + "'s sub class to class index " + classIndex + ": " + e.getMessage(), e);
					return false;
				}
			}

			_classIndex = classIndex;

			setLearningClass(getClassId());

			if (isInParty())
			{
				getParty().recalculatePartyLevel();
			}

			for (final Skill oldSkill : getAllSkills())
			{
				removeSkill(oldSkill, false, true);
			}

			stopAllEffectsExceptThoseThatLastThroughDeath();
			stopAllEffectsNotStayOnSubclassChange();
			stopCubics();

			restoreRecipeBook(false);

			restoreDeathPenaltyBuffLevel();

			restoreSkills();
			rewardSkills();
			regiveTemporarySkills();

			resetDisabledSkills();

			restoreEffects();

			sendPacket(new EtcStatusUpdate(this));

			final QuestState st = getQuestState("422_RepentYourSins");

			if (st != null)
			{
				st.exitQuest(true);
			}

			for (int i = 0; i < 3; i++)
			{
				_henna[i] = null;
			}

			restoreHenna();
			sendPacket(new HennaInfo(this));

			if (getCurrentHp() > getMaxHp())
			{
				setCurrentHp(getMaxHp());
			}

			if (getCurrentMp() > getMaxMp())
			{
				setCurrentMp(getMaxMp());
			}

			if (getCurrentCp() > getMaxCp())
			{
				setCurrentCp(getMaxCp());
			}

			refreshOverloaded();
			refreshExpertisePenalty();
			broadcastUserInfo();

			setExpBeforeDeath(0);

			_shortCuts.restoreMe();
			sendPacket(new ShortCutInit(this));

			broadcastPacket(new SocialAction(getObjectId(), SocialAction.LEVEL_UP));
			sendPacket(new SkillCoolTime(this));
			sendPacket(new ExStorageMaxCount(this));

			return true;
		}
		finally
		{
			_subclassLock.unlock();
		}
	}

	public boolean isLocked()
	{
		return _subclassLock.isLocked();
	}

	public void stopWarnUserTakeBreak()
	{
		if (_taskWarnUserTakeBreak != null)
		{
			_taskWarnUserTakeBreak.cancel(true);
			_taskWarnUserTakeBreak = null;
		}
	}

	public void startWarnUserTakeBreak()
	{
		if (_taskWarnUserTakeBreak == null)
		{
			_taskWarnUserTakeBreak = ThreadPoolManager.getInstance().scheduleGeneralAtFixedRate(new WarnUserTakeBreakTask(this), 7200000, 7200000);
		}
	}

	public void stopRentPet()
	{
		if (_taskRentPet != null)
		{
			if (checkLandingState() && getMountType() == MountType.WYVERN)
			{
				teleToLocation(TeleportWhereType.TOWN);
			}

			if (dismount())
			{
				_taskRentPet.cancel(true);
				_taskRentPet = null;
			}
		}
	}

	public void startRentPet(final int seconds)
	{
		if (_taskRentPet == null)
		{
			_taskRentPet = ThreadPoolManager.getInstance().scheduleGeneralAtFixedRate(new RentPetTask(this), seconds * 1000L, seconds * 1000L);
		}
	}

	public boolean isRentedPet()
	{
		if (_taskRentPet != null)
		{
			return true;
		}

		return false;
	}

	public void stopWaterTask()
	{
		if (_taskWater != null)
		{
			_taskWater.cancel(false);
			_taskWater = null;
			sendPacket(new SetupGauge(2, 0));
		}
	}

	public void startWaterTask()
	{
		if (!isDead() && _taskWater == null)
		{
			final int timeinwater = (int) calcStat(Stats.BREATH, 60000, this, null);

			sendPacket(new SetupGauge(2, timeinwater));
			_taskWater = ThreadPoolManager.getInstance().scheduleEffectAtFixedRate(new WaterTask(this), timeinwater, 1000);
		}
	}

	public boolean isInWater()
	{
		if (_taskWater != null)
		{
			return true;
		}

		return false;
	}

	public void checkWaterState()
	{
		if (isInsideZone(ZoneId.WATER))
		{
			startWaterTask();
		}
		else
		{
			stopWaterTask();
		}
	}

	public void onPlayerEnter()
	{
		startWarnUserTakeBreak();

		if (SevenSigns.getInstance().isSealValidationPeriod() || SevenSigns.getInstance().isCompResultsPeriod())
		{
			if (!isGM() && isIn7sDungeon() && SevenSigns.getInstance().getPlayerCabal(getObjectId()) != SevenSigns.getInstance().getCabalHighestScore())
			{
				teleToLocation(TeleportWhereType.TOWN);
				setIsIn7sDungeon(false);
				sendMessage("You have been teleported to the nearest town due to the beginning of the Seal Validation period.");
			}
		}
		else
		{
			if (!isGM() && isIn7sDungeon() && SevenSigns.getInstance().getPlayerCabal(getObjectId()) == SevenSigns.CABAL_NULL)
			{
				teleToLocation(TeleportWhereType.TOWN);
				setIsIn7sDungeon(false);
				sendMessage("You have been teleported to the nearest town because you have not signed for any cabal.");
			}
		}

		if (isGM())
		{
			if (isInvul())
			{
				sendMessage("Entering world in Invulnerable mode.");
			}

			if (isInvisible())
			{
				sendMessage("Entering world in Invisible mode.");
			}

			if (isSilenceMode())
			{
				sendMessage("Entering world in Silence mode.");
			}
		}

		if (Config.STORE_SKILL_COOLTIME)
		{
			restoreEffects();
		}

		if (!isDead())
		{
			setCurrentCp(_originalCp);
			setCurrentHp(_originalHp);
			setCurrentMp(_originalMp);
		}

		revalidateZone(true);

		notifyFriends();

		if (!canOverrideCond(PcCondOverride.SKILL_CONDITIONS) && Config.DECREASE_SKILL_LEVEL)
		{
			checkPlayerSkills();
		}

		try
		{
			for (final L2ZoneType zone : ZoneManager.getInstance().getZones(this))
			{
				zone.onPlayerLoginInside(this);
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "", e);
		}

		EventInterface.getInstance().onLogin(this);

		DailyMissionData.getInstance().notifyEventAsync(new OnMissionEventLogin(this), this);

		EventDispatcher.getInstance().notifyEventAsync(new OnPlayerLogin(this), this);

		GameTimeController.getInstance().applyTimeEffect(this);

		updatePvPColorAndSkill();
	}

	public long getLastAccess()
	{
		return _lastAccess;
	}

	@Override
	public void doRevive()
	{
		super.doRevive();

		updateEffectIcons();
		sendPacket(new EtcStatusUpdate(this));

		_revivePet = false;
		_reviveRequested = 0;
		_revivePower = 0;

		if (isMounted())
		{
			startFeed(_mountNpcId);
		}

		if (isInParty() && getParty().isInDimensionalRift())
		{
			if (!DimensionalRiftManager.getInstance().checkIfInPeaceZone(getX(), getY(), getZ()))
			{
				getParty().getDimensionalRift().memberRessurected(this);
			}
		}

		if (getInstanceId() > 0)
		{
			final Instance instance = InstanceManager.getInstance().getInstance(getInstanceId());

			if (instance != null)
			{
				instance.cancelEjectDeadPlayer(this);
			}
		}
	}

	@Override
	public void setName(final String value)
	{
		super.setName(value);

		if (Config.CACHE_CHAR_NAMES)
		{
			CharNameTable.getInstance().addName(this);
		}
	}

	@Override
	public void doRevive(final double revivePower)
	{
		restoreExp(revivePower);
		doRevive();
	}

	public void reviveRequest(final L2PcInstance reviver, final Skill skill, final boolean Pet, final int power)
	{
		if (isResurrectionBlocked())
		{
			return;
		}

		if (_reviveRequested == 1)
		{
			if (_revivePet == Pet)
			{
				reviver.sendPacket(SystemMessageId.RES_HAS_ALREADY_BEEN_PROPOSED); // Resurrection is already been proposed.
			}
			else
			{
				if (Pet)
				{
					reviver.sendPacket(SystemMessageId.CANNOT_RES_PET2); // A pet cannot be resurrected while it's owner is in the process of resurrecting.
				}
				else
				{
					reviver.sendPacket(SystemMessageId.MASTER_CANNOT_RES); // While a pet is attempting to resurrect, it cannot help in resurrecting its master.
				}
			}
			return;
		}
		if (Pet && hasPet() && getSummon().isDead() || !Pet && isDead())
		{
			_reviveRequested = 1;

			int restoreExp = 0;

			_revivePower = Formulas.calculateSkillResurrectRestorePercent(power, reviver);
			restoreExp = (int) Math.round((getExpBeforeDeath() - getExp()) * _revivePower / 100);
			_revivePet = Pet;

			if (hasCharmOfCourage())
			{
				final ConfirmDlg dlg = new ConfirmDlg(SystemMessageId.RESURRECT_USING_CHARM_OF_COURAGE.getId());
				dlg.addTime(60000);
				sendPacket(dlg);
				return;
			}

			final ConfirmDlg dlg = new ConfirmDlg(SystemMessageId.RESURRECTION_REQUEST_BY_C1_FOR_S2_XP.getId());
			dlg.addPcName(reviver);
			dlg.addString(Integer.toString(restoreExp));
			sendPacket(dlg);
		}
	}

	public void reviveAnswer(final int answer)
	{
		if (_reviveRequested != 1 || !isDead() && !_revivePet || _revivePet && hasPet() && !getSummon().isDead())
		{
			return;
		}

		if (answer == 1)
		{
			if (!_revivePet)
			{
				if (_revivePower != 0)
				{
					doRevive(_revivePower);
				}
				else
				{
					doRevive();
				}
			}
			else if (hasPet())
			{
				if (_revivePower != 0)
				{
					getSummon().doRevive(_revivePower);
				}
				else
				{
					getSummon().doRevive();
				}
			}
		}
		_revivePet = false;
		_reviveRequested = 0;
		_revivePower = 0;
	}

	public boolean isReviveRequested()
	{
		return _reviveRequested == 1;
	}

	public boolean isRevivingPet()
	{
		return _revivePet;
	}

	public void removeReviving()
	{
		_reviveRequested = 0;
		_revivePower = 0;
	}

	public void onActionRequest()
	{
		if (isSpawnProtected())
		{
			sendPacket(SystemMessageId.YOU_ARE_NO_LONGER_PROTECTED_FROM_AGGRESSIVE_MONSTERS);

			if (Config.RESTORE_SERVITOR_ON_RECONNECT && !hasSummon() && CharSummonTable.getInstance().getServitors().containsKey(getObjectId()))
			{
				CharSummonTable.getInstance().restoreServitor(this);
			}

			if (Config.RESTORE_PET_ON_RECONNECT && !hasSummon() && CharSummonTable.getInstance().getPets().containsKey(getObjectId()))
			{
				CharSummonTable.getInstance().restorePet(this);
			}
		}

		if (isTeleportProtected())
		{
			sendMessage("Teleport spawn protection ended.");
		}

		setProtection(false);
		setTeleportProtection(false);
	}

	/**
	 * Expertise of the L2PcInstance (None=0, D=1, C=2, B=3, A=4, S=5, S80=6, S84=7)
	 *
	 * @return int Expertise skill level.
	 */
	public int getExpertiseLevel()
	{
		int level = getSkillLevel(239);

		if (level < 0)
		{
			level = 0;
		}

		return level;
	}

	@Override
	public void teleToLocation(final ILocational loc, final boolean allowRandomOffset)
	{
		if (getVehicle() != null && !getVehicle().isTeleporting())
		{
			setVehicle(null);
		}

		if (isFlyingMounted() && loc.getZ() < -1005)
		{
			super.teleToLocation(loc.getX(), loc.getY(), -1005, loc.getHeading(), loc.getInstanceId());
		}

		super.teleToLocation(loc, allowRandomOffset);
	}

	@Override
	public final void onTeleported()
	{
		super.onTeleported();

		if (isInAirShip())
		{
			getAirShip().sendInfo(this);
		}

		revalidateZone(true);

		checkItemRestriction();

		if (Config.PLAYER_TELEPORT_PROTECTION > 0 && !isInOlympiadMode())
		{
			setTeleportProtection(true);
		}

		if (hasTamedBeasts())
		{
			for (final L2TamedBeastInstance tamedBeast : _tamedBeasts)
			{
				tamedBeast.deleteMe();
			}

			_tamedBeasts.clear();
		}

		final L2Summon summon = getSummon();

		if (summon != null)
		{
			summon.setFollowStatus(false);
			summon.teleToLocation(getLocation(), false);
			((L2SummonAI) summon.getAI()).setStartFollowController(true);
			summon.setFollowStatus(true);
			summon.updateAndBroadcastStatus(0);
		}
	}

	@Override
	public void setIsTeleporting(final boolean teleport)
	{
		setIsTeleporting(teleport, true);
	}

	public void setIsTeleporting(final boolean teleport, final boolean useWatchDog)
	{
		super.setIsTeleporting(teleport);

		if (!useWatchDog)
		{
			return;
		}

		if (teleport)
		{
			if (_teleportWatchdog == null && Config.TELEPORT_WATCHDOG_TIMEOUT > 0)
			{
				synchronized (this)
				{
					if (_teleportWatchdog == null)
					{
						_teleportWatchdog = ThreadPoolManager.getInstance().scheduleGeneral(new TeleportWatchdogTask(this), Config.TELEPORT_WATCHDOG_TIMEOUT * 1000);
					}
				}
			}
		}
		else
		{
			if (_teleportWatchdog != null)
			{
				_teleportWatchdog.cancel(false);
				_teleportWatchdog = null;
			}
		}
	}

	public void setLastServerPosition(final int x, final int y, final int z)
	{
		_lastServerPosition.setXYZ(x, y, z);
	}

	public Location getLastServerPosition()
	{
		return _lastServerPosition;
	}

	public int getLastServerDistance(final int x, final int y, final int z)
	{
		return (int) Util.calculateDistance(x, y, z, _lastServerPosition.getX(), _lastServerPosition.getY(), _lastServerPosition.getZ(), true, false);
	}

	@Override
	public void addExpAndSp(final long addToExp, final int addToSp)
	{
		getStat().addExpAndSp(addToExp, addToSp, false, true);
	}

	public void addExpAndSp(final long addToExp, final int addToSp, final boolean useVitality, final boolean useCollector)
	{
		getStat().addExpAndSp(addToExp, addToSp, useVitality, useCollector);
	}

	public void removeExpAndSp(final long removeExp, final int removeSp)
	{
		getStat().removeExpAndSp(removeExp, removeSp, true);
	}

	public void removeExpAndSp(final long removeExp, final int removeSp, final boolean sendMessage)
	{
		getStat().removeExpAndSp(removeExp, removeSp, sendMessage);
	}

	@Override
	public void reduceCurrentHp(final double value, final L2Character attacker, final boolean awake, final boolean isDOT, final Skill skill)
	{
		if (skill != null)
		{
			getStatus().reduceHp(value, attacker, awake, isDOT, skill.isToggle(), skill.getDmgDirectlyToHP());
		}
		else
		{
			getStatus().reduceHp(value, attacker, awake, isDOT, false, false);
		}

		if (hasTamedBeasts())
		{
			for (final L2TamedBeastInstance tamedBeast : _tamedBeasts)
			{
				tamedBeast.onOwnerGotAttacked(attacker);
			}
		}
	}

	public void broadcastSnoop(final int type, final String name, final String _text)
	{
		if (!_snoopListener.isEmpty())
		{
			final Snoop sn = new Snoop(getObjectId(), getName(), type, name, _text);

			for (final L2PcInstance pci : _snoopListener)
			{
				if (pci != null)
				{
					pci.sendPacket(sn);
				}
			}
		}
	}

	public void addSnooper(final L2PcInstance pci)
	{
		_snoopListener.add(pci);
	}

	public void removeSnooper(final L2PcInstance pci)
	{
		_snoopListener.remove(pci);
	}

	public void addSnooped(final L2PcInstance pci)
	{
		_snoopedPlayer.add(pci);
	}

	public void removeSnooped(final L2PcInstance pci)
	{
		_snoopedPlayer.remove(pci);
	}

	public void addHtmlAction(final HtmlActionScope scope, final String action)
	{
		_htmlActionCaches[scope.ordinal()].add(action);
	}

	public void clearHtmlActions(final HtmlActionScope scope)
	{
		_htmlActionCaches[scope.ordinal()].clear();
	}

	public void setHtmlActionOriginObjectId(final HtmlActionScope scope, final int npcObjId)
	{
		if (npcObjId < 0)
		{
			throw new IllegalArgumentException();
		}

		_htmlActionOriginObjectIds[scope.ordinal()] = npcObjId;
	}

	public int getLastHtmlActionOriginId()
	{
		return _lastHtmlActionOriginObjId;
	}

	private boolean validateHtmlAction(final Iterable<String> actionIter, final String action)
	{
		for (final String cachedAction : actionIter)
		{
			if (cachedAction.charAt(cachedAction.length() - 1) == AbstractHtmlPacket.VAR_PARAM_START_CHAR)
			{
				if (action.startsWith(cachedAction.substring(0, cachedAction.length() - 1).trim()))
				{
					return true;
				}
			}
			else if (cachedAction.equals(action))
			{
				return true;
			}
		}

		return false;
	}

	/**
	 * Check if the HTML action was sent in a HTML packet.<br>
	 * If the HTML action was not sent for whatever reason, -1 is returned.<br>
	 * Otherwise, the NPC object ID or 0 is returned.<br>
	 * 0 means the HTML action was not bound to an NPC<br>
	 * and no range checks need to be made.
	 *
	 * @param action the HTML action to check
	 * @return NPC object ID, 0 or -1
	 */
	public int validateHtmlAction(final String action)
	{
		for (int i = 0; i < _htmlActionCaches.length; ++i)
		{
			if (validateHtmlAction(_htmlActionCaches[i], action))
			{
				_lastHtmlActionOriginObjId = _htmlActionOriginObjectIds[i];
				return _lastHtmlActionOriginObjId;
			}
		}

		return -1;
	}

	/**
	 * Performs following tests:
	 * <ul>
	 * <li>Inventory contains item</li>
	 * <li>Item owner id == owner id</li>
	 * <li>It isnt pet control item while mounting pet or pet summoned</li>
	 * <li>It isnt active enchant item</li>
	 * <li>It isnt cursed weapon/item</li>
	 * <li>It isnt wear item</li>
	 * </ul>
	 *
	 * @param objectId item object id
	 * @param action   just for login porpouse
	 * @return
	 */
	public boolean validateItemManipulation(final int objectId, final String action)
	{
		final L2ItemInstance item = getInventory().getItemByObjectId(objectId);

		if (item == null || item.getOwnerId() != getObjectId())
		{
			_log.finest(getObjectId() + ": player tried to " + action + " item he is not owner of");
			return false;
		}

		if (hasSummon() && getSummon().getControlObjectId() == objectId || getMountObjectID() == objectId)
		{
			if (Config.DEBUG)
			{
				_log.finest(getObjectId() + ": player tried to " + action + " item controling pet");
			}

			return false;
		}

		if (getActiveEnchantItemId() == objectId)
		{
			if (Config.DEBUG)
			{
				_log.finest(getObjectId() + ":player tried to " + action + " an enchant scroll he was using");
			}

			return false;
		}

		if (CursedWeaponsManager.getInstance().isCursed(item.getId()))
		{
			return false;
		}

		return true;
	}

	/**
	 * @return Returns the inBoat.
	 */
	public boolean isInBoat()
	{
		return _vehicle != null && _vehicle.isBoat();
	}

	/**
	 * @return
	 */
	public L2BoatInstance getBoat()
	{
		return (L2BoatInstance) _vehicle;
	}

	/**
	 * @return Returns the inAirShip.
	 */
	public boolean isInAirShip()
	{
		return _vehicle != null && _vehicle.isAirShip();
	}

	/**
	 * @return
	 */
	public L2AirShipInstance getAirShip()
	{
		return (L2AirShipInstance) _vehicle;
	}

	public L2Vehicle getVehicle()
	{
		return _vehicle;
	}

	public void setVehicle(final L2Vehicle v)
	{
		if (v == null && _vehicle != null)
		{
			_vehicle.removePassenger(this);
		}

		_vehicle = v;
	}

	public boolean isInVehicle()
	{
		return _vehicle != null;
	}

	public void setInCrystallize(final boolean inCrystallize)
	{
		_inCrystallize = inCrystallize;
	}

	public boolean isInCrystallize()
	{
		return _inCrystallize;
	}

	/**
	 * @return
	 */
	public Location getInVehiclePosition()
	{
		return _inVehiclePosition;
	}

	public void setInVehiclePosition(final Location pt)
	{
		_inVehiclePosition = pt;
	}

	/**
	 * Manage the delete task of a L2PcInstance (Leave Party, Unsummon pet, Save its inventory in the database, Remove it from the world...).<br>
	 * <B><U>Actions</U>:</B>
	 * <ul>
	 * <li>If the L2PcInstance is in observer mode, set its position to its position before entering in observer mode</li>
	 * <li>Set the online Flag to True or False and update the characters table of the database with online status and lastAccess</li>
	 * <li>Stop the HP/MP/CP Regeneration task</li>
	 * <li>Cancel Crafting, Attak or Cast</li>
	 * <li>Remove the L2PcInstance from the world</li>
	 * <li>Stop Party and Unsummon Pet</li>
	 * <li>Update database with items in its inventory and remove them from the world</li>
	 * <li>Remove all L2Object from _knownObjects and _knownPlayer of the L2Character then cancel Attak or Cast and notify AI</li>
	 * <li>Close the connection with the client</li>
	 * </ul>
	 */
	@Override
	public boolean deleteMe()
	{
		cleanup();
		storeMe();

		return super.deleteMe();
	}

	private synchronized void cleanup()
	{
		EventDispatcher.getInstance().notifyEventAsync(new OnPlayerLogout(this), this);

		try
		{
			for (final L2ZoneType zone : ZoneManager.getInstance().getZones(this))
			{
				zone.onPlayerLogoutInside(this);
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}

		try
		{
			EventInterface.getInstance().onDisconnect(this);
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}

		try
		{
			if (Config.FACTION_ENABLED && Config.FACTION_ON_LOGIN_TO_HOME && !getFactionPlayer().isInsideBase())
			{
				setXYZ(getFactionPlayer().getRespawnLocation());
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}

		try
		{
			if (!isOnline())
			{
				_log.log(Level.SEVERE, "deleteMe() called on offline character " + this, new RuntimeException());
			}

			setOnlineStatus(false, true);
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}

		try
		{
			if (Config.ENABLE_BLOCK_CHECKER_EVENT && getBlockCheckerArena() != -1)
			{
				HandysBlockCheckerManager.getInstance().onDisconnect(this);
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}

		try
		{
			_isOnline = false;

			abortAttack();
			abortCast();
			stopMove(null);
			setDebug(null);
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}

		try
		{
			if (getInventory().getItemByItemId(9819) != null)
			{
				final Fort fort = FortManager.getInstance().getFort(this);

				if (fort != null)
				{
					FortSiegeManager.getInstance().dropCombatFlag(this, fort.getResidenceId());
				}
				else
				{
					getInventory().unEquipItemInBodySlot(getInventory().getSlotFromItem(getInventory().getItemByItemId(9819)));
					destroyItem("CombatFlag", getInventory().getItemByItemId(9819), null, true);
				}
			}
			else if (isCombatFlagEquipped())
			{
				TerritoryWarManager.getInstance().dropCombatFlag(this, false, false);
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}

		try
		{
			DuelManager.getInstance().doSurrender(this);
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}

		try
		{
			PartyMatchWaitingList.getInstance().removePlayer(this);

			if (_partyroom != 0)
			{
				final PartyMatchRoom room = PartyMatchRoomList.getInstance().getRoom(_partyroom);

				if (room != null)
				{
					room.deleteMember(this);
				}
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}

		try
		{
			if (isFlying())
			{
				removeSkill(SkillData.getInstance().getSkill(4289, 1));
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}

		try
		{
			stopAllTimers();
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}

		try
		{
			setIsTeleporting(false);
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}

		try
		{
			RecipeController.getInstance().requestMakeItemAbort(this);
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}

		try
		{
			setTarget(null);
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}

		if (isChannelized())
		{
			getSkillChannelized().abortChannelization();
		}

		getEffectList().stopAllToggles();

		final L2WorldRegion oldRegion = getWorldRegion();

		if (oldRegion != null)
		{
			oldRegion.removeFromZones(this);
		}

		try
		{
			decayMe();
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}

		if (isInParty())
		{
			try
			{
				leaveParty();
			}
			catch (final Exception e)
			{
				_log.log(Level.SEVERE, "deleteMe()", e);
			}
		}

		if (OlympiadManager.getInstance().isRegistered(this) || getOlympiadGameId() != -1)
		{
			OlympiadManager.getInstance().removeDisconnectedCompetitor(this);
		}

		if (hasSummon())
		{
			try
			{
				getSummon().setRestoreSummon(true);
				getSummon().unSummon(this);

				if (hasSummon())
				{
					getSummon().broadcastNpcInfo(0);
				}
			}
			catch (final Exception e)
			{
				_log.log(Level.SEVERE, "deleteMe()", e);
			}
		}

		if (getClan() != null)
		{
			try
			{
				final L2ClanMember clanMember = getClan().getClanMember(getObjectId());

				if (clanMember != null)
				{
					clanMember.setPlayerInstance(null);
				}

			}
			catch (final Exception e)
			{
				_log.log(Level.SEVERE, "deleteMe()", e);
			}
		}

		if (getActiveRequester() != null)
		{
			setActiveRequester(null);
			cancelActiveTrade();
		}

		if (isGM())
		{
			try
			{
				AdminData.getInstance().deleteGm(this);
			}
			catch (final Exception e)
			{
				_log.log(Level.SEVERE, "deleteMe()", e);
			}
		}

		try
		{
			if (inObserverMode())
			{
				setLocationInvisible(_savedLocation);
			}

			if (getVehicle() != null)
			{
				getVehicle().oustPlayer(this);
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}

		try
		{
			final int instanceId = getInstanceId();

			if (instanceId != 0 && !Config.RESTORE_PLAYER_INSTANCE)
			{
				final Instance inst = InstanceManager.getInstance().getInstance(instanceId);

				if (inst != null)
				{
					inst.removePlayer(getObjectId());

					final Location loc = inst.getExitLoc();

					if (loc != null)
					{
						final int x = loc.getX() + Rnd.get(-30, 30);
						final int y = loc.getY() + Rnd.get(-30, 30);

						setXYZInvisible(x, y, loc.getZ());

						if (hasSummon())
						{
							getSummon().teleToLocation(loc, true);
							getSummon().setInstanceId(0);
						}
					}
				}
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}

		try
		{
			getInventory().deleteMe();
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}

		try
		{
			clearWarehouse();
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}
		if (Config.WAREHOUSE_CACHE)
		{
			WarehouseCacheManager.getInstance().remCacheTask(this);
		}

		try
		{
			getFreight().deleteMe();
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}

		try
		{
			clearRefund();
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}

		if (isCursedWeaponEquipped())
		{
			try
			{
				CursedWeaponsManager.getInstance().getCursedWeapon(_cursedWeaponEquippedId).setPlayer(null);
			}
			catch (final Exception e)
			{
				_log.log(Level.SEVERE, "deleteMe()", e);
			}
		}

		try
		{
			getKnownList().removeAllKnownObjects();
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "deleteMe()", e);
		}

		if (getClanId() > 0)
		{
			getClan().broadcastToOtherOnlineMembers(new PledgeShowMemberListUpdate(this), this);
		}

		for (final L2PcInstance player : _snoopedPlayer)
		{
			player.removeSnooper(this);
		}

		for (final L2PcInstance player : _snoopListener)
		{
			player.removeSnooped(this);
		}

		L2World.getInstance().removeObject(this);
		L2World.getInstance().removeFromAllPlayers(this);

		try
		{
			notifyFriends();
			getBlockList().playerLogout();
		}
		catch (final Exception e)
		{
			_log.log(Level.WARNING, "Exception on deleteMe() notifyFriends: " + e.getMessage(), e);
		}
	}

	private L2Fish _fish;

	public void startFishing(final int _x, final int _y, final int _z)
	{
		stopMove(null);
		setIsImmobilized(true);

		_fishing = true;
		_fishx = _x;
		_fishy = _y;
		_fishz = _z;

		final int lvl = getRandomFishLvl();
		final int grade = getRandomFishGrade();
		final int group = getRandomFishGroup(grade);

		final List<L2Fish> fish = FishData.getInstance().getFish(lvl, group, grade);

		if (fish == null || fish.isEmpty())
		{
			sendMessage("Error - Fish are not defined");
			endFishing(false);
			return;
		}

		_fish = fish.get(Rnd.get(fish.size())).clone();
		fish.clear();

		sendPacket(SystemMessageId.CAST_LINE_AND_START_FISHING);

		if (!GameTimeController.getInstance().isNight() && _lure.isNightLure())
		{
			_fish.setFishGroup(-1);
		}

		broadcastPacket(new ExFishingStart(this, _fish.getFishGroup(), _x, _y, _z, _lure.isNightLure()));
		sendPacket(Music.SF_P_01.getPacket());
		startLookingForFishTask();
	}

	public void stopLookingForFishTask()
	{
		if (_taskforfish != null)
		{
			_taskforfish.cancel(false);
			_taskforfish = null;
		}
	}

	public void startLookingForFishTask()
	{
		if (!isDead() && _taskforfish == null)
		{
			int checkDelay = 0;
			boolean isNoob = false;
			boolean isUpperGrade = false;

			if (_lure != null)
			{
				final int lureid = _lure.getId();
				isNoob = _fish.getFishGrade() == 0;
				isUpperGrade = _fish.getFishGrade() == 2;

				if (lureid == 6519 || lureid == 6522 || lureid == 6525 || lureid == 8505 || lureid == 8508 || lureid == 8511)
				{
					checkDelay = _fish.getGutsCheckTime() * 133;
				}
				else if (lureid == 6520 || lureid == 6523 || lureid == 6526 || lureid >= 8505 && lureid <= 8513 || lureid >= 7610 && lureid <= 7613 || lureid >= 7807 && lureid <= 7809 || lureid >= 8484 && lureid <= 8486)
				{
					checkDelay = _fish.getGutsCheckTime() * 100;
				}
				else if (lureid == 6521 || lureid == 6524 || lureid == 6527 || lureid == 8507 || lureid == 8510 || lureid == 8513)
				{
					checkDelay = _fish.getGutsCheckTime() * 66;
				}
			}

			_taskforfish = ThreadPoolManager.getInstance().scheduleEffectAtFixedRate(new LookingForFishTask(this, _fish.getStartCombatTime(), _fish.getFishGuts(), _fish.getFishGroup(), isNoob, isUpperGrade), 10000, checkDelay);
		}
	}

	private int getRandomFishGrade()
	{
		switch (_lure.getId())
		{
			case 7807: // green for beginners
			case 7808: // purple for beginners
			case 7809: // yellow for beginners
			case 8486: // prize-winning for beginners
				return 0;
			case 8485: // prize-winning luminous
			case 8506: // green luminous
			case 8509: // purple luminous
			case 8512: // yellow luminous
				return 2;
			default:
				return 1;
		}
	}

	private int getRandomFishGroup(final int group)
	{
		final int check = Rnd.get(100);
		int type = 1;

		switch (group)
		{
			case 0: // fish for novices
				switch (_lure.getId())
				{
					case 7807: // green lure, preferred by fast-moving (nimble) fish (type 5)
						if (check <= 54)
						{
							type = 5;
						}
						else if (check <= 77)
						{
							type = 4;
						}
						else
						{
							type = 6;
						}
						break;
					case 7808: // purple lure, preferred by fat fish (type 4)
						if (check <= 54)
						{
							type = 4;
						}
						else if (check <= 77)
						{
							type = 6;
						}
						else
						{
							type = 5;
						}
						break;
					case 7809: // yellow lure, preferred by ugly fish (type 6)
						if (check <= 54)
						{
							type = 6;
						}
						else if (check <= 77)
						{
							type = 5;
						}
						else
						{
							type = 4;
						}
						break;
					case 8486: // prize-winning fishing lure for beginners
						if (check <= 33)
						{
							type = 4;
						}
						else if (check <= 66)
						{
							type = 5;
						}
						else
						{
							type = 6;
						}
						break;
				}
				break;
			case 1: // normal fish
				switch (_lure.getId())
				{
					case 7610:
					case 7611:
					case 7612:
					case 7613:
						type = 3;
						break;
					case 6519: // all theese lures (green) are prefered by fast-moving (nimble) fish (type 1)
					case 8505:
					case 6520:
					case 6521:
					case 8507:
						if (check <= 54)
						{
							type = 1;
						}
						else if (check <= 74)
						{
							type = 0;
						}
						else if (check <= 94)
						{
							type = 2;
						}
						else
						{
							type = 3;
						}
						break;
					case 6522: // all theese lures (purple) are prefered by fat fish (type 0)
					case 8508:
					case 6523:
					case 6524:
					case 8510:
						if (check <= 54)
						{
							type = 0;
						}
						else if (check <= 74)
						{
							type = 1;
						}
						else if (check <= 94)
						{
							type = 2;
						}
						else
						{
							type = 3;
						}
						break;
					case 6525: // all theese lures (yellow) are prefered by ugly fish (type 2)
					case 8511:
					case 6526:
					case 6527:
					case 8513:
						if (check <= 55)
						{
							type = 2;
						}
						else if (check <= 74)
						{
							type = 1;
						}
						else if (check <= 94)
						{
							type = 0;
						}
						else
						{
							type = 3;
						}
						break;
					case 8484: // prize-winning fishing lure
						if (check <= 33)
						{
							type = 0;
						}
						else if (check <= 66)
						{
							type = 1;
						}
						else
						{
							type = 2;
						}
						break;
				}
				break;
			case 2: // upper grade fish, luminous lure
				switch (_lure.getId())
				{
					case 8506: // green lure, preferred by fast-moving (nimble) fish (type 8)
						if (check <= 54)
						{
							type = 8;
						}
						else if (check <= 77)
						{
							type = 7;
						}
						else
						{
							type = 9;
						}
						break;
					case 8509: // purple lure, preferred by fat fish (type 7)
						if (check <= 54)
						{
							type = 7;
						}
						else if (check <= 77)
						{
							type = 9;
						}
						else
						{
							type = 8;
						}
						break;
					case 8512: // yellow lure, preferred by ugly fish (type 9)
						if (check <= 54)
						{
							type = 9;
						}
						else if (check <= 77)
						{
							type = 8;
						}
						else
						{
							type = 7;
						}
						break;
					case 8485: // prize-winning fishing lure
						if (check <= 33)
						{
							type = 7;
						}
						else if (check <= 66)
						{
							type = 8;
						}
						else
						{
							type = 9;
						}
						break;
				}
		}

		return type;
	}

	private int getRandomFishLvl()
	{
		int skilllvl = getSkillLevel(1315);

		final BuffInfo info = getEffectList().getBuffInfoBySkillId(2274);

		if (info != null)
		{
			skilllvl = (int) info.getSkill().getPower();
		}

		if (skilllvl <= 0)
		{
			return 1;
		}

		int randomlvl;
		final int check = Rnd.get(100);

		if (check <= 50)
		{
			randomlvl = skilllvl;
		}
		else if (check <= 85)
		{
			randomlvl = skilllvl - 1;

			if (randomlvl <= 0)
			{
				randomlvl = 1;
			}
		}
		else
		{
			randomlvl = skilllvl + 1;
			if (randomlvl > 27)
			{
				randomlvl = 27;
			}
		}

		return randomlvl;
	}

	public void startFishCombat(final boolean isNoob, final boolean isUpperGrade)
	{
		_fishCombat = new L2Fishing(this, _fish, isNoob, isUpperGrade);
	}

	public void endFishing(final boolean win)
	{
		_fishing = false;

		_fishx = 0;
		_fishy = 0;
		_fishz = 0;

		if (_fishCombat == null)
		{
			sendPacket(SystemMessageId.BAIT_LOST_FISH_GOT_AWAY);
		}

		_fishCombat = null;
		_lure = null;

		broadcastPacket(new ExFishingEnd(win, this));
		sendPacket(SystemMessageId.REEL_LINE_AND_STOP_FISHING);
		setIsImmobilized(false);

		stopLookingForFishTask();
	}

	public L2Fishing getFishCombat()
	{
		return _fishCombat;
	}

	public int getFishX()
	{
		return _fishx;
	}

	public int getFishY()
	{
		return _fishy;
	}

	public int getFishZ()
	{
		return _fishz;
	}

	public void setLure(final L2ItemInstance lure)
	{
		_lure = lure;
	}

	public L2ItemInstance getLure()
	{
		return _lure;
	}

	public int getInventoryLimit()
	{
		int ivlim;

		if (isGM())
		{
			ivlim = Config.INVENTORY_MAXIMUM_GM;
		}
		else if (getRace() == Race.DWARF)
		{
			ivlim = Config.INVENTORY_MAXIMUM_DWARF;
		}
		else
		{
			ivlim = Config.INVENTORY_MAXIMUM_NO_DWARF;
		}

		return ivlim += (int) getStat().calcStat(Stats.INV_LIM, 0, null, null);
	}

	public int getWareHouseLimit()
	{
		int whlim;

		if (getRace() == Race.DWARF)
		{
			whlim = Config.WAREHOUSE_SLOTS_DWARF;
		}
		else
		{
			whlim = Config.WAREHOUSE_SLOTS_NO_DWARF;
		}

		return whlim += (int) getStat().calcStat(Stats.WH_LIM, 0, null, null);
	}

	public int getPrivateSellStoreLimit()
	{
		int pslim;

		if (getRace() == Race.DWARF)
		{
			pslim = Config.MAX_PVTSTORESELL_SLOTS_DWARF;
		}
		else
		{
			pslim = Config.MAX_PVTSTORESELL_SLOTS_OTHER;
		}

		return pslim += (int) getStat().calcStat(Stats.P_SELL_LIM, 0, null, null);
	}

	public int getPrivateBuyStoreLimit()
	{
		int pblim;

		if (getRace() == Race.DWARF)
		{
			pblim = Config.MAX_PVTSTOREBUY_SLOTS_DWARF;
		}
		else
		{
			pblim = Config.MAX_PVTSTOREBUY_SLOTS_OTHER;
		}

		return pblim += (int) getStat().calcStat(Stats.P_BUY_LIM, 0, null, null);
	}

	public int getDwarfRecipeLimit()
	{
		int recdlim = Config.DWARF_RECIPE_LIMIT;
		recdlim += (int) getStat().calcStat(Stats.REC_D_LIM, 0, null, null);
		return recdlim;
	}

	public int getCommonRecipeLimit()
	{
		int recclim = Config.COMMON_RECIPE_LIMIT;
		recclim += (int) getStat().calcStat(Stats.REC_C_LIM, 0, null, null);
		return recclim;
	}

	/**
	 * @return Returns the mountNpcId.
	 */
	public int getMountNpcId()
	{
		return _mountNpcId;
	}

	/**
	 * @return Returns the mountLevel.
	 */
	public int getMountLevel()
	{
		return _mountLevel;
	}

	public void setMountObjectID(final int newID)
	{
		_mountObjectID = newID;
	}

	public int getMountObjectID()
	{
		return _mountObjectID;
	}

	/**
	 * @return the current skill in use or return null.
	 */
	public SkillUseHolder getCurrentSkill()
	{
		return _currentSkill;
	}

	/**
	 * Create a new SkillDat object and set the player _currentSkill.
	 *
	 * @param currentSkill
	 * @param ctrlPressed
	 * @param shiftPressed
	 */
	public void setCurrentSkill(final Skill currentSkill, final boolean ctrlPressed, final boolean shiftPressed)
	{
		if (currentSkill == null)
		{
			_currentSkill = null;
			return;
		}

		_currentSkill = new SkillUseHolder(currentSkill, ctrlPressed, shiftPressed);
	}

	/**
	 * @return the current pet skill in use or return null.
	 */
	public SkillUseHolder getCurrentPetSkill()
	{
		return _currentPetSkill;
	}

	/**
	 * Create a new SkillDat object and set the player _currentPetSkill.
	 *
	 * @param currentSkill
	 * @param ctrlPressed
	 * @param shiftPressed
	 */
	public void setCurrentPetSkill(final Skill currentSkill, final boolean ctrlPressed, final boolean shiftPressed)
	{
		if (currentSkill == null)
		{
			_currentPetSkill = null;
			return;
		}

		_currentPetSkill = new SkillUseHolder(currentSkill, ctrlPressed, shiftPressed);
	}

	public SkillUseHolder getQueuedSkill()
	{
		return _queuedSkill;
	}

	/**
	 * Create a new SkillDat object and queue it in the player _queuedSkill.
	 *
	 * @param queuedSkill
	 * @param ctrlPressed
	 * @param shiftPressed
	 */
	public void setQueuedSkill(final Skill queuedSkill, final boolean ctrlPressed, final boolean shiftPressed)
	{
		if (queuedSkill == null)
		{
			_queuedSkill = null;
			return;
		}

		_queuedSkill = new SkillUseHolder(queuedSkill, ctrlPressed, shiftPressed);
	}

	/**
	 * @return {@code true} if player is jailed, {@code false} otherwise.
	 */
	public boolean isJailed()
	{
		return PunishmentManager.getInstance().hasPunishment(getObjectId(), PunishmentAffect.CHARACTER, PunishmentType.JAIL) || PunishmentManager.getInstance().hasPunishment(getAccountName(), PunishmentAffect.ACCOUNT, PunishmentType.JAIL) || PunishmentManager.getInstance().hasPunishment(getIPAddress(), PunishmentAffect.IP, PunishmentType.JAIL);
	}

	/**
	 * @return {@code true} if player is chat banned, {@code false} otherwise.
	 */
	public boolean isChatBanned()
	{
		return PunishmentManager.getInstance().hasPunishment(getObjectId(), PunishmentAffect.CHARACTER, PunishmentType.CHAT_BAN) || PunishmentManager.getInstance().hasPunishment(getAccountName(), PunishmentAffect.ACCOUNT, PunishmentType.CHAT_BAN) || PunishmentManager.getInstance().hasPunishment(getIPAddress(), PunishmentAffect.IP, PunishmentType.CHAT_BAN);
	}

	public void startFameTask(final long delay, final int fameFixRate)
	{
		if (getLevel() < 40 || getClassId().level() < 2)
		{
			return;
		}

		if (_fameTask == null)
		{
			_fameTask = ThreadPoolManager.getInstance().scheduleGeneralAtFixedRate(new FameTask(this, fameFixRate), delay, delay);
		}
	}

	public void stopFameTask()
	{
		if (_fameTask != null)
		{
			_fameTask.cancel(false);
			_fameTask = null;
		}
	}

	public void startVitalityTask()
	{
		if (Config.ENABLE_VITALITY && _vitalityTask == null)
		{
			_vitalityTask = ThreadPoolManager.getInstance().scheduleGeneralAtFixedRate(new VitalityTask(this), 1000, 60000);
		}
	}

	public void stopVitalityTask()
	{
		if (_vitalityTask != null)
		{
			_vitalityTask.cancel(false);
			_vitalityTask = null;
		}
	}

	public int getPowerGrade()
	{
		return _powerGrade;
	}

	public void setPowerGrade(final int power)
	{
		_powerGrade = power;
	}

	public boolean isCursedWeaponEquipped()
	{
		return _cursedWeaponEquippedId != 0;
	}

	public void setCursedWeaponEquippedId(final int value)
	{
		_cursedWeaponEquippedId = value;
	}

	public int getCursedWeaponEquippedId()
	{
		return _cursedWeaponEquippedId;
	}

	public boolean isCombatFlagEquipped()
	{
		return _combatFlagEquippedId;
	}

	public void setCombatFlagEquipped(final boolean value)
	{
		_combatFlagEquippedId = value;
	}

	/**
	 * Returns the Number of Souls this L2PcInstance got.
	 *
	 * @return
	 */
	public int getChargedSouls()
	{
		return _souls;
	}

	/**
	 * Increase Souls
	 *
	 * @param count
	 */
	public void increaseSouls(final int count)
	{
		_souls += count;
		final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.YOUR_SOUL_HAS_INCREASED_BY_S1_SO_IT_IS_NOW_AT_S2);
		sm.addInt(count);
		sm.addInt(_souls);
		sendPacket(sm);
		restartSoulTask();
		sendPacket(new EtcStatusUpdate(this));
	}

	/**
	 * Decreases existing Souls.
	 *
	 * @param count
	 * @param skill
	 * @return
	 */
	public boolean decreaseSouls(final int count, final Skill skill)
	{
		_souls -= count;

		if (getChargedSouls() < 0)
		{
			_souls = 0;
		}

		if (getChargedSouls() == 0)
		{
			stopSoulTask();
		}
		else
		{
			restartSoulTask();
		}

		sendPacket(new EtcStatusUpdate(this));
		return true;
	}

	/**
	 * Clear out all Souls from this L2PcInstance
	 */
	public void clearSouls()
	{
		_souls = 0;
		stopSoulTask();
		sendPacket(new EtcStatusUpdate(this));
	}

	/**
	 * Starts/Restarts the SoulTask to Clear Souls after 10 Mins.
	 */
	private void restartSoulTask()
	{
		if (_soulTask != null)
		{
			_soulTask.cancel(false);
			_soulTask = null;
		}
		_soulTask = ThreadPoolManager.getInstance().scheduleGeneral(new ResetSoulsTask(this), 600000);

	}

	/**
	 * Stops the Clearing Task.
	 */
	public void stopSoulTask()
	{
		if (_soulTask != null)
		{
			_soulTask.cancel(false);
			_soulTask = null;
		}
	}

	public int getDeathPenaltyBuffLevel()
	{
		return _deathPenaltyBuffLevel;
	}

	public void setDeathPenaltyBuffLevel(final int level)
	{
		_deathPenaltyBuffLevel = level;
	}

	public void calculateDeathPenaltyBuffLevel(final L2Character killer)
	{
		if (killer == null)
		{
			_log.warning(this + " called calculateDeathPenaltyBuffLevel with killer null!");
			return;
		}

		if (isResurrectSpecialAffected() || isLucky() || isBlockingDeathPenalty() || isInsideZone(ZoneId.PVP) || isInsideZone(ZoneId.SHIFT) || isInsideZone(ZoneId.SIEGE) || canOverrideCond(PcCondOverride.DEATH_PENALTY))
		{
			return;
		}

		double percent = 1.0;

		if (killer.isRaid())
		{
			percent *= calcStat(Stats.REDUCE_DEATH_PENALTY_BY_RAID, 1);
		}
		else if (killer.isMonster())
		{
			percent *= calcStat(Stats.REDUCE_DEATH_PENALTY_BY_MOB, 1);
		}
		else if (killer.isPlayable())
		{
			percent *= calcStat(Stats.REDUCE_DEATH_PENALTY_BY_PVP, 1);
		}

		if (Rnd.get(1, 100) <= Config.DEATH_PENALTY_CHANCE * percent)
		{
			if (!killer.isPlayable() || getKarma() > 0)
			{
				increaseDeathPenaltyBuffLevel();
			}
		}
	}

	public void increaseDeathPenaltyBuffLevel()
	{
		if (getDeathPenaltyBuffLevel() >= 15)
		{
			return;
		}

		if (getDeathPenaltyBuffLevel() != 0)
		{
			final Skill skill = SkillData.getInstance().getSkill(5076, getDeathPenaltyBuffLevel());

			if (skill != null)
			{
				removeSkill(skill, true);
			}
		}

		_deathPenaltyBuffLevel++;

		addSkill(SkillData.getInstance().getSkill(5076, getDeathPenaltyBuffLevel()), false);

		sendPacket(new EtcStatusUpdate(this));
		final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.DEATH_PENALTY_LEVEL_S1_ADDED);
		sm.addInt(getDeathPenaltyBuffLevel());
		sendPacket(sm);
	}

	public void reduceDeathPenaltyBuffLevel()
	{
		if (getDeathPenaltyBuffLevel() <= 0)
		{
			return;
		}

		final Skill skill = SkillData.getInstance().getSkill(5076, getDeathPenaltyBuffLevel());

		if (skill != null)
		{
			removeSkill(skill, true);
		}

		_deathPenaltyBuffLevel--;

		if (getDeathPenaltyBuffLevel() > 0)
		{
			addSkill(SkillData.getInstance().getSkill(5076, getDeathPenaltyBuffLevel()), false);
			sendPacket(new EtcStatusUpdate(this));

			final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.DEATH_PENALTY_LEVEL_S1_ADDED);
			sm.addInt(getDeathPenaltyBuffLevel());
			sendPacket(sm);
		}
		else
		{
			sendPacket(new EtcStatusUpdate(this));
			sendPacket(SystemMessageId.DEATH_PENALTY_LIFTED);
		}
	}

	public void restoreDeathPenaltyBuffLevel()
	{
		if (getDeathPenaltyBuffLevel() > 0)
		{
			addSkill(SkillData.getInstance().getSkill(5076, getDeathPenaltyBuffLevel()), false);
		}
	}

	@Override
	public L2PcInstance getActingPlayer()
	{
		return this;
	}

	@Override
	public final void sendDamageMessage(final L2Character target, final int damage, final boolean mcrit, final boolean pcrit, final boolean miss)
	{
		if (miss)
		{
			if (target.isPlayer())
			{
				final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.C1_EVADED_C2_ATTACK);
				sm.addPcName(target.getActingPlayer());
				sm.addCharName(this);
				target.sendPacket(sm);
			}

			final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.C1_ATTACK_WENT_ASTRAY);
			sm.addPcName(this);
			sendPacket(sm);
			return;
		}

		if (pcrit)
		{
			final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.C1_HAD_CRITICAL_HIT);
			sm.addPcName(this);
			sendPacket(sm);
		}

		if (mcrit)
		{
			sendPacket(SystemMessageId.CRITICAL_HIT_MAGIC);
		}

		if (isInOlympiadMode() && target.isPlayer() && target.getActingPlayer().isInOlympiadMode() && target.getActingPlayer().getOlympiadGameId() == getOlympiadGameId())
		{
			OlympiadGameManager.getInstance().notifyCompetitorDamage(this, damage);
		}

		final SystemMessage sm;

		if (target.isInvul() && !target.isNpc())
		{
			sm = SystemMessage.getSystemMessage(SystemMessageId.ATTACK_WAS_BLOCKED);
		}
		else if (target.isDoor() || target instanceof L2ControlTowerInstance)
		{
			sm = SystemMessage.getSystemMessage(SystemMessageId.YOU_DID_S1_DMG);
			sm.addInt(damage);
		}
		else
		{
			sm = SystemMessage.getSystemMessage(SystemMessageId.C1_DONE_S3_DAMAGE_TO_C2);
			sm.addPcName(this);
			sm.addCharName(target);
			sm.addInt(damage);
		}

		sendPacket(sm);
	}

	public void setAgathionId(final int npcId)
	{
		_agathionId = npcId;
	}

	public int getAgathionId()
	{
		return _agathionId;
	}

	public int getVitalityPoints()
	{
		return getStat().getVitalityPoints();
	}

	public int getVitalityLevel()
	{
		return getStat().getVitalityLevel();
	}

	public void setVitalityPoints(final int points, final boolean quiet)
	{
		getStat().setVitalityPoints(points, quiet);
	}

	public void updateVitalityPoints(final float points, final boolean useRates, final boolean quiet)
	{
		getStat().updateVitalityPoints(points, useRates, quiet);
	}

	public void checkItemRestriction()
	{
		for (int i = 0; i < Inventory.PAPERDOLL_TOTALSLOTS; i++)
		{
			final L2ItemInstance equippedItem = getInventory().getPaperdollItem(i);

			if (equippedItem != null && !equippedItem.getItem().checkCondition(this, this, false))
			{
				getInventory().unEquipItemInSlot(i);

				final InventoryUpdate iu = new InventoryUpdate();
				iu.addModifiedItem(equippedItem);
				sendPacket(iu);

				SystemMessage sm = null;

				if (equippedItem.getItem().getBodyPart() == L2Item.SLOT_BACK)
				{
					sendPacket(SystemMessageId.CLOAK_REMOVED_BECAUSE_ARMOR_SET_REMOVED);
					return;
				}

				if (equippedItem.getEnchantLevel() > 0)
				{
					sm = SystemMessage.getSystemMessage(SystemMessageId.EQUIPMENT_S1_S2_REMOVED);
					sm.addInt(equippedItem.getEnchantLevel());
					sm.addItemName(equippedItem);
				}
				else
				{
					sm = SystemMessage.getSystemMessage(SystemMessageId.S1_DISARMED);
					sm.addItemName(equippedItem);
				}

				sendPacket(sm);
			}
		}
	}

	public void addTransformSkill(final Skill sk)
	{
		if (_transformSkills == null)
		{
			synchronized (this)
			{
				if (_transformSkills == null)
				{
					_transformSkills = new HashMap<>();
				}
			}
		}

		_transformSkills.put(sk.getId(), sk);
	}

	public Skill getTransformSkill(final int id)
	{
		if (_transformSkills == null)
		{
			return null;
		}

		return _transformSkills.get(id);
	}

	public boolean hasTransformSkill(final int id)
	{
		if (_transformSkills == null)
		{
			return false;
		}

		return _transformSkills.containsKey(id);
	}

	public synchronized void removeAllTransformSkills()
	{
		_transformSkills = null;
	}

	protected void startFeed(final int npcId)
	{
		_canFeed = npcId > 0;

		if (!isMounted())
		{
			return;
		}

		if (hasSummon())
		{
			setCurrentFeed(((L2PetInstance) getSummon()).getCurrentFed());
			_controlItemId = getSummon().getControlObjectId();

			sendPacket(new SetupGauge(3, getCurrentFeed() * 10000 / getFeedConsume(), getMaxFeed() * 10000 / getFeedConsume()));

			if (!isDead())
			{
				_mountFeedTask = ThreadPoolManager.getInstance().scheduleGeneralAtFixedRate(new PetFeedTask(this), 10000, 10000);
			}
		}
		else if (_canFeed)
		{
			setCurrentFeed(getMaxFeed());

			final SetupGauge sg = new SetupGauge(3, getCurrentFeed() * 10000 / getFeedConsume(), getMaxFeed() * 10000 / getFeedConsume());
			sendPacket(sg);

			if (!isDead())
			{
				_mountFeedTask = ThreadPoolManager.getInstance().scheduleGeneralAtFixedRate(new PetFeedTask(this), 10000, 10000);
			}
		}
	}

	public void stopFeed()
	{
		if (_mountFeedTask != null)
		{
			_mountFeedTask.cancel(false);
			_mountFeedTask = null;
		}
	}

	private final void clearPetData()
	{
		_data = null;
	}

	public final L2PetData getPetData(final int npcId)
	{
		if (_data == null)
		{
			_data = PetDataTable.getInstance().getPetData(npcId);
		}

		return _data;
	}

	private final L2PetLevelData getPetLevelData(final int npcId)
	{
		if (_leveldata == null)
		{
			_leveldata = PetDataTable.getInstance().getPetData(npcId).getPetLevelData(getMountLevel());
		}

		return _leveldata;
	}

	public int getCurrentFeed()
	{
		return _curFeed;
	}

	public int getFeedConsume()
	{
		if (isAttackingNow())
		{
			return getPetLevelData(_mountNpcId).getPetFeedBattle();
		}

		return getPetLevelData(_mountNpcId).getPetFeedNormal();
	}

	public void setCurrentFeed(final int num)
	{
		final boolean lastHungryState = isHungry();
		_curFeed = num > getMaxFeed() ? getMaxFeed() : num;

		final SetupGauge sg = new SetupGauge(3, getCurrentFeed() * 10000 / getFeedConsume(), getMaxFeed() * 10000 / getFeedConsume());
		sendPacket(sg);

		if (lastHungryState != isHungry())
		{
			broadcastUserInfo();
		}
	}

	private int getMaxFeed()
	{
		return getPetLevelData(_mountNpcId).getPetMaxFeed();
	}

	public boolean isHungry()
	{
		return _canFeed ? getCurrentFeed() < getPetData(getMountNpcId()).getHungryLimit() / 100f * getPetLevelData(getMountNpcId()).getPetMaxFeed() : false;
	}

	public void enteredNoLanding(final int delay)
	{
		_dismountTask = ThreadPoolManager.getInstance().scheduleGeneral(new DismountTask(this), delay * 1000);
	}

	public void exitedNoLanding()
	{
		if (_dismountTask != null)
		{
			_dismountTask.cancel(true);
			_dismountTask = null;
		}
	}

	public void storePetFood(final int petId)
	{
		if (_controlItemId != 0 && petId != 0)
		{
			final String req = "UPDATE pets SET fed=? WHERE item_obj_id = ?";

			try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement(req))
			{
				statement.setInt(1, getCurrentFeed());
				statement.setInt(2, _controlItemId);
				statement.executeUpdate();
				_controlItemId = 0;
			}
			catch (final Exception e)
			{
				_log.log(Level.SEVERE, "Failed to store Pet [NpcId: " + petId + "] data", e);
			}
		}
	}

	public void setIsInSiege(final boolean b)
	{
		_isInSiege = b;
	}

	public boolean isInSiege()
	{
		return _isInSiege;
	}

	/**
	 * @param isInHideoutSiege sets the value of {@link #_isInHideoutSiege}.
	 */
	public void setIsInHideoutSiege(final boolean isInHideoutSiege)
	{
		_isInHideoutSiege = isInHideoutSiege;
	}

	/**
	 * @return the value of {@link #_isInHideoutSiege}, {@code true} if the player is participing on a Hideout Siege, otherwise {@code false}.
	 */
	public boolean isInHideoutSiege()
	{
		return _isInHideoutSiege;
	}

	public FloodProtectors getFloodProtectors()
	{
		return getClient().getFloodProtectors();
	}

	public boolean isFlyingMounted()
	{
		return isTransformed() && getTransformation().isFlying();
	}

	/**
	 * Returns the Number of Charges this L2PcInstance got.
	 *
	 * @return
	 */
	public int getCharges()
	{
		return _charges.get();
	}

	public void increaseCharges(final int count, final int max)
	{
		if (_charges.get() >= max)
		{
			sendPacket(SystemMessageId.FORCE_MAXLEVEL_REACHED);
			return;
		}

		restartChargeTask();

		if (_charges.addAndGet(count) >= max)
		{
			_charges.set(max);
			sendPacket(SystemMessageId.FORCE_MAXLEVEL_REACHED);
		}
		else
		{
			final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.FORCE_INCREASED_TO_S1);
			sm.addInt(_charges.get());
			sendPacket(sm);
		}

		sendPacket(new EtcStatusUpdate(this));
	}

	public boolean decreaseCharges(final int count)
	{
		if (_charges.get() < count)
		{
			return false;
		}

		if (_charges.addAndGet(-count) == 0)
		{
			stopChargeTask();
		}
		else
		{
			restartChargeTask();
		}

		sendPacket(new EtcStatusUpdate(this));
		return true;
	}

	public void clearCharges()
	{
		_charges.set(0);
		sendPacket(new EtcStatusUpdate(this));
	}

	/**
	 * Starts/Restarts the ChargeTask to Clear Charges after 10 Mins.
	 */
	private void restartChargeTask()
	{
		if (_chargeTask != null)
		{
			_chargeTask.cancel(false);
			_chargeTask = null;
		}

		_chargeTask = ThreadPoolManager.getInstance().scheduleGeneral(new ResetChargesTask(this), 600000);
	}

	/**
	 * Stops the Charges Clearing Task.
	 */
	public void stopChargeTask()
	{
		if (_chargeTask != null)
		{
			_chargeTask.cancel(false);
			_chargeTask = null;
		}
	}

	public void teleportBookmarkModify(final int id, final int icon, final String tag, final String name)
	{
		final TeleportBookmark bookmark = _tpbookmarks.get(id);

		if (bookmark != null)
		{
			bookmark.setIcon(icon);
			bookmark.setTag(tag);
			bookmark.setName(name);

			try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement(UPDATE_TP_BOOKMARK))
			{
				statement.setInt(1, icon);
				statement.setString(2, tag);
				statement.setString(3, name);
				statement.setInt(4, getObjectId());
				statement.setInt(5, id);
				statement.execute();
			}
			catch (final Exception e)
			{
				_log.log(Level.WARNING, "Could not update character teleport bookmark data: " + e.getMessage(), e);
			}
		}

		sendPacket(new ExGetBookMarkInfoPacket(this));
	}

	public void teleportBookmarkDelete(final int id)
	{
		if (_tpbookmarks.remove(id) != null)
		{
			try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement(DELETE_TP_BOOKMARK))
			{
				statement.setInt(1, getObjectId());
				statement.setInt(2, id);
				statement.execute();
			}
			catch (final Exception e)
			{
				_log.log(Level.WARNING, "Could not delete character teleport bookmark data: " + e.getMessage(), e);
			}

			sendPacket(new ExGetBookMarkInfoPacket(this));
		}
	}

	public void teleportBookmarkGo(final int id)
	{
		if (!teleportBookmarkCondition(0))
		{
			return;
		}

		if (getInventory().getInventoryItemCount(13016, 0) == 0)
		{
			sendPacket(SystemMessageId.YOU_CANNOT_TELEPORT_BECAUSE_YOU_DO_NOT_HAVE_A_TELEPORT_ITEM);
			return;
		}

		final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.S1_DISAPPEARED);
		sm.addItemName(13016);
		sendPacket(sm);

		final TeleportBookmark bookmark = _tpbookmarks.get(id);

		if (bookmark != null)
		{
			destroyItem("Consume", getInventory().getItemByItemId(13016).getObjectId(), 1, null, false);
			teleToLocation(bookmark, false);
		}

		sendPacket(new ExGetBookMarkInfoPacket(this));
	}

	public boolean teleportBookmarkCondition(final int type)
	{
		if (isInCombat())
		{
			sendPacket(SystemMessageId.YOU_CANNOT_USE_MY_TELEPORTS_DURING_A_BATTLE);
			return false;
		}
		else if (isInSiege() || getSiegeState() != 0 || isInEvent() || isInTournament())
		{
			sendPacket(SystemMessageId.YOU_CANNOT_USE_MY_TELEPORTS_WHILE_PARTICIPATING);
			return false;
		}
		else if (isInDuel())
		{
			sendPacket(SystemMessageId.YOU_CANNOT_USE_MY_TELEPORTS_DURING_A_DUEL);
			return false;
		}
		else if (isFlying())
		{
			sendPacket(SystemMessageId.YOU_CANNOT_USE_MY_TELEPORTS_WHILE_FLYING);
			return false;
		}
		else if (isInOlympiadMode())
		{
			sendPacket(SystemMessageId.YOU_CANNOT_USE_MY_TELEPORTS_WHILE_PARTICIPATING_IN_AN_OLYMPIAD_MATCH);
			return false;
		}
		else if (isParalyzed())
		{
			sendPacket(SystemMessageId.YOU_CANNOT_USE_MY_TELEPORTS_WHILE_YOU_ARE_PARALYZED);
			return false;
		}
		else if (isDead())
		{
			sendPacket(SystemMessageId.YOU_CANNOT_USE_MY_TELEPORTS_WHILE_YOU_ARE_DEAD);
			return false;
		}
		else if (type == 1 && (isIn7sDungeon() || isInParty() && getParty().isInDimensionalRift()))
		{
			sendPacket(SystemMessageId.YOU_CANNOT_USE_MY_TELEPORTS_TO_REACH_THIS_AREA);
			return false;
		}
		else if (isInWater())
		{
			sendPacket(SystemMessageId.YOU_CANNOT_USE_MY_TELEPORTS_UNDERWATER);
			return false;
		}
		else if (type == 1 && (isInsideZone(ZoneId.SIEGE) || isInsideZone(ZoneId.CLAN_HALL) || isInsideZone(ZoneId.JAIL) || isInsideZone(ZoneId.CASTLE) || isInsideZone(ZoneId.NO_SUMMON_FRIEND) || isInsideZone(ZoneId.FORT)))
		{
			sendPacket(SystemMessageId.YOU_CANNOT_USE_MY_TELEPORTS_TO_REACH_THIS_AREA);
			return false;
		}
		else if (isInsideZone(ZoneId.NO_BOOKMARK) || isInBoat() || isInAirShip())
		{
			if (type == 0)
			{
				sendPacket(SystemMessageId.YOU_CANNOT_USE_MY_TELEPORTS_IN_THIS_AREA);
			}
			else if (type == 1)
			{
				sendPacket(SystemMessageId.YOU_CANNOT_USE_MY_TELEPORTS_TO_REACH_THIS_AREA);
			}

			return false;
		}
		else
		{
			return true;
		}
	}

	public void teleportBookmarkAdd(final int x, final int y, final int z, final int icon, final String tag, final String name)
	{
		if (!teleportBookmarkCondition(1))
		{
			return;
		}

		if (_tpbookmarks.size() >= _bookmarkslot)
		{
			sendPacket(SystemMessageId.YOU_HAVE_NO_SPACE_TO_SAVE_THE_TELEPORT_LOCATION);
			return;
		}

		if (getInventory().getInventoryItemCount(20033, 0) == 0)
		{
			sendPacket(SystemMessageId.YOU_CANNOT_BOOKMARK_THIS_LOCATION_BECAUSE_YOU_DO_NOT_HAVE_A_MY_TELEPORT_FLAG);
			return;
		}

		int id;

		for (id = 1; id <= _bookmarkslot; ++id)
		{
			if (!_tpbookmarks.containsKey(id))
			{
				break;
			}
		}

		_tpbookmarks.put(id, new TeleportBookmark(id, x, y, z, icon, tag, name));

		destroyItem("Consume", getInventory().getItemByItemId(20033).getObjectId(), 1, null, false);

		final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.S1_DISAPPEARED);
		sm.addItemName(20033);
		sendPacket(sm);

		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement(INSERT_TP_BOOKMARK))
		{
			statement.setInt(1, getObjectId());
			statement.setInt(2, id);
			statement.setInt(3, x);
			statement.setInt(4, y);
			statement.setInt(5, z);
			statement.setInt(6, icon);
			statement.setString(7, tag);
			statement.setString(8, name);
			statement.execute();
		}
		catch (final Exception e)
		{
			_log.log(Level.WARNING, "Could not insert character teleport bookmark data: " + e.getMessage(), e);
		}

		sendPacket(new ExGetBookMarkInfoPacket(this));
	}

	public void restoreTeleportBookmark()
	{
		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement(RESTORE_TP_BOOKMARK))
		{
			statement.setInt(1, getObjectId());

			try (ResultSet rset = statement.executeQuery())
			{
				while (rset.next())
				{
					_tpbookmarks.put(rset.getInt("Id"), new TeleportBookmark(rset.getInt("Id"), rset.getInt("x"), rset.getInt("y"), rset.getInt("z"), rset.getInt("icon"), rset.getString("tag"), rset.getString("name")));
				}
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "Failed restoing character teleport bookmark.", e);
		}
	}

	@Override
	public void sendInfo(final L2PcInstance activeChar)
	{
		if (isInBoat())
		{
			setXYZ(getBoat().getLocation());

			activeChar.sendPacket(new CharInfo(this));
			activeChar.sendPacket(new ExBrExtraUserInfo(this));

			final int relation1 = getRelation(activeChar);
			final int relation2 = activeChar.getRelation(this);

			Integer oldrelation = getKnownList().getKnownRelations().get(activeChar.getObjectId());

			if (oldrelation != null && oldrelation != relation1)
			{
				activeChar.sendPacket(new RelationChanged(this, relation1, isAutoAttackable(activeChar)));

				if (hasSummon())
				{
					activeChar.sendPacket(new RelationChanged(getSummon(), relation1, isAutoAttackable(activeChar)));
				}
			}

			oldrelation = activeChar.getKnownList().getKnownRelations().get(getObjectId());

			if (oldrelation != null && oldrelation != relation2)
			{
				sendPacket(new RelationChanged(activeChar, relation2, activeChar.isAutoAttackable(this)));

				if (activeChar.hasSummon())
				{
					sendPacket(new RelationChanged(activeChar.getSummon(), relation2, activeChar.isAutoAttackable(this)));
				}
			}

			activeChar.sendPacket(new GetOnVehicle(getObjectId(), getBoat().getObjectId(), getInVehiclePosition()));
		}
		else if (isInAirShip())
		{
			setXYZ(getAirShip().getLocation());

			activeChar.sendPacket(new CharInfo(this));
			activeChar.sendPacket(new ExBrExtraUserInfo(this));

			final int relation1 = getRelation(activeChar);
			final int relation2 = activeChar.getRelation(this);

			Integer oldrelation = getKnownList().getKnownRelations().get(activeChar.getObjectId());

			if (oldrelation != null && oldrelation != relation1)
			{
				activeChar.sendPacket(new RelationChanged(this, relation1, isAutoAttackable(activeChar)));

				if (hasSummon())
				{
					activeChar.sendPacket(new RelationChanged(getSummon(), relation1, isAutoAttackable(activeChar)));
				}
			}

			oldrelation = activeChar.getKnownList().getKnownRelations().get(getObjectId());

			if (oldrelation != null && oldrelation != relation2)
			{
				sendPacket(new RelationChanged(activeChar, relation2, activeChar.isAutoAttackable(this)));

				if (activeChar.hasSummon())
				{
					sendPacket(new RelationChanged(activeChar.getSummon(), relation2, activeChar.isAutoAttackable(this)));
				}
			}

			activeChar.sendPacket(new ExGetOnAirShip(this, getAirShip()));
		}
		else
		{
			activeChar.sendPacket(new CharInfo(this));
			activeChar.sendPacket(new ExBrExtraUserInfo(this));

			final int relation1 = getRelation(activeChar);
			final int relation2 = activeChar.getRelation(this);

			Integer oldrelation = getKnownList().getKnownRelations().get(activeChar.getObjectId());

			if (oldrelation != null && oldrelation != relation1)
			{
				activeChar.sendPacket(new RelationChanged(this, relation1, isAutoAttackable(activeChar)));

				if (hasSummon())
				{
					activeChar.sendPacket(new RelationChanged(getSummon(), relation1, isAutoAttackable(activeChar)));
				}
			}

			oldrelation = activeChar.getKnownList().getKnownRelations().get(getObjectId());

			if (oldrelation != null && oldrelation != relation2)
			{
				sendPacket(new RelationChanged(activeChar, relation2, activeChar.isAutoAttackable(this)));

				if (activeChar.hasSummon())
				{
					sendPacket(new RelationChanged(activeChar.getSummon(), relation2, activeChar.isAutoAttackable(this)));
				}
			}
		}

		switch (getPrivateStoreType())
		{
			case SELL:
				activeChar.sendPacket(new PrivateStoreMsgSell(this));
				break;
			case PACKAGE_SELL:
				activeChar.sendPacket(new ExPrivateStoreSetWholeMsg(this));
				break;
			case BUY:
				activeChar.sendPacket(new PrivateStoreMsgBuy(this));
				break;
			case MANUFACTURE:
				activeChar.sendPacket(new RecipeShopMsg(this));
				break;
		}

		if (isMounted())
		{
			sendPacket(new CharInfo(activeChar));
		}
	}

	public void showQuestMovie(final int id)
	{
		if (_movieId > 0)
		{
			return;
		}

		abortAttack();
		abortCast();
		stopMove(null);

		_movieId = id;

		sendPacket(new ExStartScenePlayer(id));
	}

	public boolean isAllowedToEnchantSkills()
	{
		if (isLocked())
		{
			return false;
		}

		if (isTransformed() || isInStance())
		{
			return false;
		}

		if (AttackStanceTaskManager.getInstance().hasAttackStanceTask(this))
		{
			return false;
		}

		if (isCastingNow() || isCastingSimultaneouslyNow())
		{
			return false;
		}

		if (isInBoat() || isInAirShip())
		{
			return false;
		}

		return true;
	}

	/**
	 * Set the _createDate of the L2PcInstance.
	 *
	 * @param createDate
	 */
	public void setCreateDate(final Calendar createDate)
	{
		_createDate = createDate;
	}

	/**
	 * @return the _createDate of the L2PcInstance.
	 */
	public Calendar getCreateDate()
	{
		return _createDate;
	}

	/**
	 * @return number of days to char birthday.
	 */
	public int checkBirthDay()
	{
		final Calendar now = Calendar.getInstance();

		if (_createDate.get(Calendar.DAY_OF_MONTH) == 29 && _createDate.get(Calendar.MONTH) == 1)
		{
			_createDate.add(Calendar.HOUR_OF_DAY, -24);
		}

		if (now.get(Calendar.MONTH) == _createDate.get(Calendar.MONTH) && now.get(Calendar.DAY_OF_MONTH) == _createDate.get(Calendar.DAY_OF_MONTH) && now.get(Calendar.YEAR) != _createDate.get(Calendar.YEAR))
		{
			return 0;
		}

		int i;

		for (i = 1; i < 6; i++)
		{
			now.add(Calendar.HOUR_OF_DAY, 24);

			if (now.get(Calendar.MONTH) == _createDate.get(Calendar.MONTH) && now.get(Calendar.DAY_OF_MONTH) == _createDate.get(Calendar.DAY_OF_MONTH) && now.get(Calendar.YEAR) != _createDate.get(Calendar.YEAR))
			{
				return i;
			}
		}

		return -1;
	}

	public void restoreFriendList()
	{
		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement("SELECT friendId FROM character_friends WHERE charId=? AND relation=0 AND friendId<>charId"))
		{
			statement.setInt(1, getObjectId());

			try (ResultSet rset = statement.executeQuery())
			{
				while (rset.next())
				{
					addFriend(rset.getInt("friendId"));
				}
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.WARNING, "Error found in " + getName() + "'s FriendList", e);
		}
	}

	public Set<Integer> getFriends()
	{
		if (_friends == null)
		{
			synchronized (this)
			{
				if (_friends == null)
				{
					_friends = ConcurrentHashMap.newKeySet(1);
				}
			}
		}

		return _friends;
	}

	public boolean hasFriends()
	{
		return _friends != null && !_friends.isEmpty();
	}

	public boolean isFriend(final int objectId)
	{
		return hasFriends() && _friends.contains(objectId);
	}

	public void addFriend(final int objectId)
	{
		getFriends().add(objectId);
	}

	public void removeFriend(final int objectId)
	{
		if (hasFriends())
		{
			_friends.remove(objectId);
		}
	}

	private void notifyFriends()
	{
		if (hasFriends())
		{
			final FriendStatusPacket pkt = new FriendStatusPacket(getObjectId());

			for (final int id : _friends)
			{
				final L2PcInstance friend = L2World.getInstance().getPlayer(id);

				if (friend != null)
				{
					friend.sendPacket(pkt);
				}
			}
		}
	}

	/**
	 * Verify if this player is in silence mode.
	 *
	 * @return the {@code true} if this player is in silence mode, {@code false} otherwise
	 */
	public boolean isSilenceMode()
	{
		return _silenceMode;
	}

	/**
	 * While at silenceMode, checks if this player blocks PMs for this user
	 *
	 * @param playerObjId the player object Id
	 * @return {@code true} if the given Id is not excluded and this player is in silence mode, {@code false} otherwise
	 */
	public boolean isSilenceMode(final int playerObjId)
	{
		if (Config.SILENCE_MODE_EXCLUDE && _silenceMode && _silenceModeExcluded != null)
		{
			return !_silenceModeExcluded.contains(playerObjId);
		}

		return _silenceMode;
	}

	/**
	 * Set the silence mode.
	 *
	 * @param mode the value
	 */
	public void setSilenceMode(final boolean mode)
	{
		_silenceMode = mode;

		if (_silenceModeExcluded != null)
		{
			_silenceModeExcluded.clear();
		}

		sendPacket(new EtcStatusUpdate(this));
	}

	/**
	 * Add a player to the "excluded silence mode" list.
	 *
	 * @param playerObjId the player's object Id
	 */
	public void addSilenceModeExcluded(final int playerObjId)
	{
		if (_silenceModeExcluded == null)
		{
			_silenceModeExcluded = new ArrayList<>(1);
		}

		_silenceModeExcluded.add(playerObjId);
	}

	private void storeRecipeShopList()
	{
		if (hasManufactureShop())
		{
			try (Connection con = L2DatabaseFactory.getInstance().getConnection())
			{
				try (PreparedStatement st = con.prepareStatement(DELETE_CHAR_RECIPE_SHOP))
				{
					st.setInt(1, getObjectId());
					st.execute();
				}

				try (PreparedStatement st = con.prepareStatement(INSERT_CHAR_RECIPE_SHOP))
				{
					final AtomicInteger slot = new AtomicInteger(1);
					con.setAutoCommit(false);

					for (final L2ManufactureItem item : _manufactureItems.values())
					{
						st.setInt(1, getObjectId());
						st.setInt(2, item.getRecipeId());
						st.setLong(3, item.getCost());
						st.setInt(4, slot.getAndIncrement());
						st.addBatch();
					}

					st.executeBatch();
					con.commit();
				}
			}
			catch (final Exception e)
			{
				_log.log(Level.SEVERE, "Could not store recipe shop for playerId " + getObjectId() + ": ", e);
			}
		}
	}

	private void restoreRecipeShopList()
	{
		if (_manufactureItems != null)
		{
			_manufactureItems.clear();
		}

		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement(RESTORE_CHAR_RECIPE_SHOP))
		{
			statement.setInt(1, getObjectId());

			try (ResultSet rset = statement.executeQuery())
			{
				while (rset.next())
				{
					getManufactureItems().put(rset.getInt("recipeId"), new L2ManufactureItem(rset.getInt("recipeId"), rset.getLong("price")));
				}
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "Could not restore recipe shop list data for playerId: " + getObjectId(), e);
		}
	}

	public double getCollisionRadius()
	{
		if (isMounted() && getMountNpcId() > 0)
		{
			return NpcData.getInstance().getTemplate(getMountNpcId()).getfCollisionRadius();
		}
		else if (isTransformed())
		{
			return getTransformation().getCollisionRadius(this);
		}

		return getAppearance().getSex() == Sex.FEMALE ? getBaseTemplate().getFCollisionRadiusFemale() : getBaseTemplate().getfCollisionRadius();
	}

	public double getCollisionHeight()
	{
		if (isMounted() && getMountNpcId() > 0)
		{
			return NpcData.getInstance().getTemplate(getMountNpcId()).getfCollisionHeight();
		}
		else if (isTransformed())
		{
			return getTransformation().getCollisionHeight(this);
		}

		return getAppearance().getSex() == Sex.FEMALE ? getBaseTemplate().getFCollisionHeightFemale() : getBaseTemplate().getfCollisionHeight();
	}

	public final int getClientX()
	{
		return _clientX;
	}

	public final int getClientY()
	{
		return _clientY;
	}

	public final int getClientZ()
	{
		return _clientZ;
	}

	public final int getClientHeading()
	{
		return _clientHeading;
	}

	public final void setClientX(final int val)
	{
		_clientX = val;
	}

	public final void setClientY(final int val)
	{
		_clientY = val;
	}

	public final void setClientZ(final int val)
	{
		_clientZ = val;
	}

	public final void setClientHeading(final int val)
	{
		_clientHeading = val;
	}

	/**
	 * @param z
	 * @return true if character falling now on the start of fall return false for correct coord sync!
	 */
	public final boolean isFalling(final int z)
	{
		if (isDead() || isFlying() || isFlyingMounted() || isInsideZone(ZoneId.WATER))
		{
			return false;
		}

		if (System.currentTimeMillis() < _fallingTimestamp)
		{
			return true;
		}

		final int deltaZ = getZ() - z;

		if (deltaZ <= getBaseTemplate().getSafeFallHeight())
		{
			return false;
		}

		if (!GeoData.getInstance().hasGeo(getX(), getY()))
		{
			return false;
		}

		final int damage = (int) Formulas.calcFallDam(this, deltaZ);

		if (damage > 0)
		{
			reduceCurrentHp(Math.min(damage, getCurrentHp() - 1), null, false, true, null);
			final SystemMessage sm = SystemMessage.getSystemMessage(SystemMessageId.FALL_DAMAGE_S1);
			sm.addInt(damage);
			sendPacket(sm);
		}

		setFalling();
		return false;
	}

	/**
	 * Set falling timestamp
	 */
	public final void setFalling()
	{
		_fallingTimestamp = System.currentTimeMillis() + FALLING_VALIDATION_DELAY;
	}

	/**
	 * @return the _movieId
	 */
	public int getMovieId()
	{
		return _movieId;
	}

	public void setMovieId(final int id)
	{
		_movieId = id;
	}

	/**
	 * Update last item auction request timestamp to current
	 */
	public void updateLastItemAuctionRequest()
	{
		_lastItemAuctionInfoRequest = System.currentTimeMillis();
	}

	/**
	 * @return true if receiving item auction requests<br>
	 *         (last request was in 2 seconds before)
	 */
	public boolean isItemAuctionPolling()
	{
		return System.currentTimeMillis() - _lastItemAuctionInfoRequest < 2000;
	}

	@Override
	public boolean isMovementDisabled()
	{
		return super.isMovementDisabled() || _movieId > 0;
	}

	private void restoreUISettings()
	{
		_uiKeySettings = new UIKeysSettings(getObjectId());
	}

	private void storeUISettings()
	{
		if (_uiKeySettings == null)
		{
			return;
		}

		if (!_uiKeySettings.isSaved())
		{
			_uiKeySettings.saveInDB();
		}
	}

	public UIKeysSettings getUISettings()
	{
		return _uiKeySettings;
	}

	public String getHtmlPrefix()
	{
		if (!Config.L2JMOD_MULTILANG_ENABLE)
		{
			return null;
		}

		return _htmlPrefix;
	}

	public String getLang()
	{
		return _lang;
	}

	public boolean setLang(final String lang)
	{
		boolean result = false;

		if (Config.L2JMOD_MULTILANG_ENABLE)
		{
			if (Config.L2JMOD_MULTILANG_ALLOWED.contains(lang))
			{
				_lang = lang;
				result = true;
			}
			else
			{
				_lang = Config.L2JMOD_MULTILANG_DEFAULT;
			}

			_htmlPrefix = "data/lang/" + _lang + "/";
		}
		else
		{
			_lang = null;
			_htmlPrefix = null;
		}

		return result;
	}

	public long getOfflineStartTime()
	{
		return _offlineShopStart;
	}

	public void setOfflineStartTime(final long time)
	{
		_offlineShopStart = time;
	}

	/**
	 * Remove player from BossZones (used on char logout/exit)
	 */
	public void removeFromBossZone()
	{
		try
		{
			for (final L2BossZone zone : GrandBossManager.getInstance().getZones())
			{
				zone.removePlayer(this);
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.WARNING, "Exception on removeFromBossZone(): " + e.getMessage(), e);
		}
	}

	/**
	 * Check all player skills for skill level. If player level is lower than skill learn level - 9, skill level is decreased to next possible level.
	 */
	public void checkPlayerSkills()
	{
		for (final Entry<Integer, Skill> e : getSkills().entrySet())
		{
			final L2SkillLearn learn = SkillTreesData.getInstance().getClassSkill(e.getKey(), e.getValue().getLevel() % 100, getClassId());

			if (learn != null)
			{
				final int lvlDiff = e.getKey() == CommonSkill.EXPERTISE.getId() ? 0 : 9;

				if (getLevel() < learn.getGetLevel() - lvlDiff)
				{
					deacreaseSkillLevel(e.getValue(), lvlDiff);
				}
			}
		}
	}

	private void deacreaseSkillLevel(final Skill skill, final int lvlDiff)
	{
		int nextLevel = -1;

		final Map<Integer, L2SkillLearn> skillTree = SkillTreesData.getInstance().getCompleteClassSkillTree(getClassId());

		for (final L2SkillLearn sl : skillTree.values())
		{
			if (sl.getSkillId() == skill.getId() && nextLevel < sl.getSkillLevel() && getLevel() >= sl.getGetLevel() - lvlDiff)
			{
				nextLevel = sl.getSkillLevel();
			}
		}

		if (nextLevel == -1)
		{
			_log.info("Removing skill " + skill + " from player " + toString());
			removeSkill(skill, true);
		}
		else
		{
			_log.info("Decreasing skill " + skill + " to " + nextLevel + " for player " + toString());
			addSkill(SkillData.getInstance().getSkill(skill.getId(), nextLevel), true); // replace with lower one
		}
	}

	public boolean canMakeSocialAction()
	{
		return getPrivateStoreType() == PrivateStoreType.NONE && getActiveRequester() == null && !isAlikeDead() && !isAllSkillsDisabled() && !isCastingNow() && !isCastingSimultaneouslyNow() && getAI().getIntention() == CtrlIntention.AI_INTENTION_IDLE;
	}

	public void setMultiSocialAction(final int id, final int targetId)
	{
		_multiSociaAction = id;
		_multiSocialTarget = targetId;
	}

	public int getMultiSociaAction()
	{
		return _multiSociaAction;
	}

	public int getMultiSocialTarget()
	{
		return _multiSocialTarget;
	}

	public Collection<TeleportBookmark> getTeleportBookmarks()
	{
		return _tpbookmarks.values();
	}

	public int getBookmarkslot()
	{
		return _bookmarkslot;
	}

	/**
	 * @return
	 */
	public int getQuestInventoryLimit()
	{
		return Config.INVENTORY_MAXIMUM_QUEST_ITEMS;
	}

	public boolean canAttackCharacter(final L2Character cha)
	{
		if (cha instanceof L2Attackable)
		{
			return true;
		}
		else if (cha instanceof L2Playable)
		{
			if (cha.isInsideZone(ZoneId.PVP) && !cha.isInsideZone(ZoneId.SIEGE))
			{
				return true;
			}

			L2PcInstance target;

			if (cha instanceof L2Summon)
			{
				target = ((L2Summon) cha).getOwner();
			}
			else
			{
				target = (L2PcInstance) cha;
			}

			if (isInDuel() && target.isInDuel() && target.getDuelId() == getDuelId())
			{
				return true;
			}
			else if (isInParty() && target.isInParty())
			{
				if (getParty() == target.getParty())
				{
					return false;
				}

				if ((getParty().getCommandChannel() != null || target.getParty().getCommandChannel() != null) && getParty().getCommandChannel() == target.getParty().getCommandChannel())
				{
					return false;
				}
			}
			else if (getClan() != null && target.getClan() != null)
			{
				if (getClanId() == target.getClanId())
				{
					return false;
				}

				if ((getAllyId() > 0 || target.getAllyId() > 0) && getAllyId() == target.getAllyId())
				{
					return false;
				}

				if (getClan().isAtWarWith(target.getClan().getId()) && target.getClan().isAtWarWith(getClan().getId()))
				{
					return true;
				}
			}
			else if (getClan() == null || target.getClan() == null)
			{
				if (target.getPvpFlag() == 0 && target.getKarma() == 0)
				{
					return false;
				}
			}
		}

		return true;
	}

	/**
	 * Test if player inventory is under 90% capacity
	 *
	 * @param includeQuestInv check also quest inventory
	 * @return
	 */
	public boolean isInventoryUnder90(final boolean includeQuestInv)
	{
		return getInventory().getSize(includeQuestInv) <= getInventoryLimit() * 0.9;
	}

	public boolean havePetInvItems()
	{
		return _petItems;
	}

	public void setPetInvItems(final boolean haveit)
	{
		_petItems = haveit;
	}

	/**
	 * Restore Pet's inventory items from database.
	 */
	private void restorePetInventoryItems()
	{
		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement("SELECT object_id FROM `items` WHERE `owner_id`=? AND (`loc`='PET' OR `loc`='PET_EQUIP') LIMIT 1;"))
		{
			statement.setInt(1, getObjectId());

			try (ResultSet rset = statement.executeQuery())
			{
				setPetInvItems(rset.next() && rset.getInt("object_id") > 0);
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "Could not check Items in Pet Inventory for playerId: " + getObjectId(), e);
		}
	}

	public String getAdminConfirmCmd()
	{
		return _adminConfirmCmd;
	}

	public void setAdminConfirmCmd(final String adminConfirmCmd)
	{
		_adminConfirmCmd = adminConfirmCmd;
	}

	public void setBlockCheckerArena(final byte arena)
	{
		_handysBlockCheckerEventArena = arena;
	}

	public int getBlockCheckerArena()
	{
		return _handysBlockCheckerEventArena;
	}

	/**
	 * @return remaining time of NevitHourglass task in seconds
	 */
	public int getNevitHourglassTime()
	{
		if (_nevitHourglassTask != null)
		{
			return (int) Math.max(0, _nevitHourglassTask.getDelay(TimeUnit.SECONDS));
		}

		return _recomBonusTime;
	}

	public void setNevitHourglassTime(final int val)
	{
		_recomBonusTime = val;
	}

	public boolean isNevitHourglassActive()
	{
		return getNevitHourglassTime() > 0 || getStat().hasPausedNevitHourglass();
	}

	public double getNevitHourglassMultiplier()
	{
		double multiplier = 1.0;

		if (isOnline() && getRecomHave() != 0 && isNevitHourglassActive())
		{
			final double bonus = getNevitHourglassBonus();

			if (bonus > 0)
			{
				multiplier += bonus / 100;
			}
		}

		return multiplier;
	}

	/**
	 * @return the bonus experience receive from NevitHourglass
	 */
	public int getNevitHourglassBonus()
	{
		if (isOnline() && getRecomHave() != 0 && isNevitHourglassActive())
		{
			final int lvl = getLevel() / 10;
			final int exp = (Math.min(100, getRecomHave()) - 1) / 10;

			return NEVIT_HOURGLASS_BONUS[lvl][exp];
		}

		return 0;
	}

	public int getNevitHourglassStatus()
	{
		if (getStat().hasPausedNevitHourglass())
		{
			return NEVIT_HOURGLASS_PAUSED;
		}

		if (getNevitHourglassTime() > 0)
		{
			return NEVIT_HOURGLASS_ACTIVE;
		}

		return NEVIT_HOURGLASS_MAINTAIN;
	}

	public void startNevitHourglassTask()
	{
		if (_nevitHourglassTask == null)
		{
			final int taskRemaining = getNevitHourglassTime();

			if (taskRemaining > 0)
			{
				if (getNevitHourglassStatus() == NEVIT_HOURGLASS_ACTIVE)
				{
					_nevitHourglassTask = ThreadPoolManager.getInstance().scheduleGeneral(new RecoBonusTaskEnd(this), TimeUnit.SECONDS.toMillis(taskRemaining));
					sendPacket(new ExVoteSystemInfo(this));
				}
			}
		}
	}

	/**
	 * Stop the NevitHourglass task and save time in {@code variable}
	 */
	public void stopNevitHourglassTask()
	{
		if (_nevitHourglassTask != null)
		{
			setNevitHourglassTime((int) Math.max(0, _nevitHourglassTask.getDelay(TimeUnit.SECONDS)));

			_nevitHourglassTask.cancel(false);
			_nevitHourglassTask = null;
		}
	}

	/**
	 * Load Recommendations data.
	 */
	public void loadRecommendations()
	{
		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement("SELECT rec_have, rec_left, time_left FROM character_reco_bonus WHERE charId=? LIMIT 1"))
		{
			statement.setInt(1, getObjectId());

			try (ResultSet rset = statement.executeQuery())
			{
				if (rset.next())
				{
					setRecomHave(rset.getInt("rec_have"));
					setRecomLeft(rset.getInt("rec_left"));
					setNevitHourglassTime(rset.getInt("time_left"));
				}
			}
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "Failed to restore Recommendations for player: " + this, e);
		}
	}

	/**
	 * Update Recommendations data.
	 */
	public void storeRecommendations()
	{
		try (Connection con = L2DatabaseFactory.getInstance().getConnection(); PreparedStatement statement = con.prepareStatement("REPLACE INTO character_reco_bonus (charId, rec_have, rec_left, time_left) VALUES (?,?,?,?)"))
		{
			statement.setInt(1, getObjectId());
			statement.setInt(2, getRecomHave());
			statement.setInt(3, getRecomLeft());
			statement.setLong(4, getNevitHourglassTime());
			statement.execute();
		}
		catch (final Exception e)
		{
			_log.log(Level.SEVERE, "Failed to update Recommendations for player: " + this, e);
		}
	}

	public void startRecoGiveTask()
	{
		_recoGiveTask = ThreadPoolManager.getInstance().scheduleGeneralAtFixedRate(new RecoGiveTask(this), 7200000, 3600000);
	}

	public void stopRecoGiveTask()
	{
		if (_recoGiveTask != null)
		{
			_recoGiveTask.cancel(false);
			_recoGiveTask = null;
		}
	}

	public boolean isRecoTwoHoursGiven()
	{
		return _recoTwoHoursGiven;
	}

	public void setRecoTwoHoursGiven(final boolean val)
	{
		_recoTwoHoursGiven = val;
	}

	public void setLastPetitionGmName(final String gmName)
	{
		_lastPetitionGmName = gmName;
	}

	public String getLastPetitionGmName()
	{
		return _lastPetitionGmName;
	}

	public L2ContactList getContactList()
	{
		return _contactList;
	}

	public long getNotMoveUntil()
	{
		return _notMoveUntil;
	}

	public void updateNotMoveUntil()
	{
		_notMoveUntil = System.currentTimeMillis() + Config.PLAYER_MOVEMENT_BLOCK_TIME;
	}

	@Override
	public boolean isPlayer()
	{
		return true;
	}

	@Override
	public boolean isChargedShot(final ShotType type)
	{
		final L2ItemInstance weapon = getActiveWeaponInstance();
		return weapon != null && weapon.isChargedShot(type);
	}

	@Override
	public void setChargedShot(final ShotType type, final boolean charged)
	{
		final L2ItemInstance weapon = getActiveWeaponInstance();

		if (weapon != null)
		{
			weapon.setChargedShot(type, charged);
		}
	}

	/**
	 * @param skillId the display skill Id
	 * @return the custom skill
	 */
	public final Skill getCustomSkill(final int skillId)
	{
		return _customSkills != null ? _customSkills.get(skillId) : null;
	}

	/**
	 * Add a skill level to the custom skills map.
	 *
	 * @param skill the skill to add
	 */
	private final void addCustomSkill(final Skill skill)
	{
		if (skill != null && skill.getDisplayId() != skill.getId())
		{
			if (_customSkills == null)
			{
				_customSkills = new ConcurrentHashMap<>();
			}

			_customSkills.put(skill.getDisplayId(), skill);
		}
	}

	/**
	 * Remove a skill level from the custom skill map.
	 *
	 * @param skill the skill to remove
	 */
	private final void removeCustomSkill(final Skill skill)
	{
		if (skill != null && _customSkills != null && skill.getDisplayId() != skill.getId())
		{
			_customSkills.remove(skill.getDisplayId());
		}
	}

	/**
	 * @return {@code true} if current player can exit game, {@code false} otherwise.
	 */
	@Override
	public boolean isBlockingExit()
	{
		return _blockingExit || isInTournament() || isInEvent();
	}

	/**
	 * This method can prevent exit from game
	 *
	 * @param val
	 */
	@Override
	public void setBlockingExit(final boolean val)
	{
		_blockingExit = val;
	}

	/**
	 * @return {@code true} if blocked from losing exp upon death, {@code false} otherwise.
	 */
	@Override
	public boolean isBlockingDeathExpPenalty()
	{
		return _blockingExpPenalty || isInTournament() || isInEvent();
	}

	/**
	 * This method can prevent death exp penalty upon death.
	 *
	 * @param val
	 */
	@Override
	public void setBlockingDeathExpPenalty(final boolean val)
	{
		_blockingExpPenalty = val;
	}

	/**
	 * @return {@code true} if blocked from receiving death penalty upon death, {@code false} otherwise.
	 */
	@Override
	public boolean isBlockingDeathPenalty()
	{
		return _blockingPenalty || isInTournament() || isInEvent();
	}

	/**
	 * This method can prevent death penalty upon death.
	 *
	 * @param val
	 */
	@Override
	public void setBlockingDeathPenalty(final boolean val)
	{
		_blockingPenalty = val;
	}

	/**
	 * @return {@code true} if current player can revive and shows 'To Village' button upon death, {@code false} otherwise.
	 */
	@Override
	public boolean canRevive()
	{
		return _canRevive && !isInTournament() && !isInEvent();
	}

	/**
	 * This method can prevent from displaying 'To Village' button upon death.
	 *
	 * @param val
	 */
	@Override
	public void setCanRevive(final boolean val)
	{
		_canRevive = val;
	}

	public void setOriginalCpHpMp(final double cp, final double hp, final double mp)
	{
		_originalCp = cp;
		_originalHp = hp;
		_originalMp = mp;
	}

	@Override
	public void addOverrideCond(final PcCondOverride... excs)
	{
		super.addOverrideCond(excs);
		getVariables().set(COND_OVERRIDE_KEY, Long.toString(_exceptions));
	}

	@Override
	public void removeOverridedCond(final PcCondOverride... excs)
	{
		super.removeOverridedCond(excs);
		getVariables().set(COND_OVERRIDE_KEY, Long.toString(_exceptions));
	}

	/**
	 * @return {@code true} if {@link PlayerVariables} instance is attached to current player's scripts, {@code false} otherwise.
	 */
	public boolean hasVariables()
	{
		return getScript(PlayerVariables.class) != null;
	}

	/**
	 * @return {@link PlayerVariables} instance containing parameters regarding player.
	 */
	public PlayerVariables getVariables()
	{
		final PlayerVariables vars = getScript(PlayerVariables.class);
		return vars != null ? vars : addScript(new PlayerVariables(getObjectId()));
	}

	/**
	 * @return {@code true} if {@link AccountVariables} instance is attached to current player's scripts, {@code false} otherwise.
	 */
	public boolean hasAccountVariables()
	{
		return getScript(AccountVariables.class) != null;
	}

	/**
	 * @return {@link AccountVariables} instance containing parameters regarding player.
	 */
	public AccountVariables getAccountVariables()
	{
		final AccountVariables vars = getScript(AccountVariables.class);
		return vars != null ? vars : addScript(new AccountVariables(getAccountName()));
	}

	/**
	 * @return {@code true} if {@link PreferenceVariables} instance is attached to current player's scripts, {@code false} otherwise.
	 */
	public boolean hasPreferenceVariables()
	{
		return getScript(PreferenceVariables.class) != null;
	}

	/**
	 * @return {@link PreferenceVariables} instance containing parameters regarding player.
	 */
	public PreferenceVariables getPreferenceVariables()
	{
		final PreferenceVariables vars = getScript(PreferenceVariables.class);
		return vars != null ? vars : addScript(new PreferenceVariables(getObjectId()));
	}

	@Override
	public int getId()
	{
		return getClassId().getId();
	}

	public boolean isPartyBanned()
	{
		return PunishmentManager.getInstance().hasPunishment(getObjectId(), PunishmentAffect.CHARACTER, PunishmentType.PARTY_BAN);
	}

	/**
	 * @param act
	 * @return {@code true} if action was added successfully, {@code false} otherwise.
	 */
	public boolean addAction(final PlayerAction act)
	{
		if (!hasAction(act))
		{
			_actionMask |= act.getMask();
			return true;
		}

		return false;
	}

	/**
	 * @param act
	 * @return {@code true} if action was removed successfully, {@code false} otherwise.
	 */
	public boolean removeAction(final PlayerAction act)
	{
		if (hasAction(act))
		{
			_actionMask &= ~act.getMask();
			return true;
		}

		return false;
	}

	/**
	 * @param act
	 * @return {@code true} if action is present, {@code false} otherwise.
	 */
	public boolean hasAction(final PlayerAction act)
	{
		return (_actionMask & act.getMask()) == act.getMask();
	}

	/**
	 * Set true/false if character got Charm of Courage
	 *
	 * @param val true/false
	 */
	public void setCharmOfCourage(final boolean val)
	{
		_hasCharmOfCourage = val;
	}

	/**
	 * @return {@code true} if effect is present, {@code false} otherwise.
	 */
	public boolean hasCharmOfCourage()
	{
		return _hasCharmOfCourage;
	}

	/**
	 * @param target the target
	 * @return {@code true} if this player got war with the target, {@code false} otherwise.
	 */
	public boolean isAtWarWith(final L2Character target)
	{
		if (target == null)
		{
			return false;
		}

		if (_clan != null && !isAcademyMember())
		{
			if (target.getClan() != null && !target.isAcademyMember())
			{
				return _clan.isAtWarWith(target.getClan());
			}
		}

		return false;
	}

	/**
	 * @param target the target
	 * @return {@code true} if this player in same party with the target, {@code false} otherwise.
	 */
	public boolean isInPartyWith(final L2Character target)
	{
		if (!isInParty() || !target.isInParty())
		{
			return false;
		}

		return getParty().getLeaderObjectId() == target.getParty().getLeaderObjectId();
	}

	/**
	 * @param target the target
	 * @return {@code true} if this player in same command channel with the target, {@code false} otherwise.
	 */
	public boolean isInCommandChannelWith(final L2Character target)
	{
		if (!isInParty() || !target.isInParty())
		{
			return false;
		}

		if (!getParty().isInCommandChannel() || !target.getParty().isInCommandChannel())
		{
			return false;
		}

		return getParty().getCommandChannel().getLeaderObjectId() == target.getParty().getCommandChannel().getLeaderObjectId();
	}

	/**
	 * @param target the target
	 * @return {@code true} if this player in same clan with the target, {@code false} otherwise.
	 */
	public boolean isInClanWith(final L2Character target)
	{
		if (getClanId() == 0 || target.getClanId() == 0)
		{
			return false;
		}

		return getClanId() == target.getClanId();
	}

	/**
	 * @param target the target
	 * @return {@code true} if this player in same ally with the target, {@code false} otherwise.
	 */
	public boolean isInAllyWith(final L2Character target)
	{
		if (getAllyId() == 0 || target.getAllyId() == 0)
		{
			return false;
		}

		return getAllyId() == target.getAllyId();
	}

	/**
	 * @param target the target
	 * @return {@code true} if this player at duel with the target, {@code false} otherwise.
	 */
	public boolean isInDuelWith(final L2Character target)
	{
		if (!isInDuel() || !target.isInDuel())
		{
			return false;
		}

		return getDuelId() == target.getDuelId();
	}

	/**
	 * @param target the target
	 * @return {@code true} if this player at same tournament with the target, {@code false} otherwise.
	 */
	public boolean isInTournamentWith(final L2Character target)
	{
		if (!target.isPlayable())
		{
			return false;
		}

		if (!isInTournament() || !target.getActingPlayer().isInTournament())
		{
			return false;
		}

		return getTournament().getId() == target.getActingPlayer().getTournament().getId();
	}

	/**
	 * @param target the target
	 * @return {@code true} if this player at same event with the target, {@code false} otherwise.
	 */
	public boolean isInEventWith(final L2Character target)
	{
		if (!target.isPlayable())
		{
			return false;
		}

		if (!isInEvent() || !target.isInEvent())
		{
			return false;
		}

		return EventContainer.getInstance().getObject(getObjectId()).getEvent().getObjectId() == EventContainer.getInstance().getObject(target.getActingPlayer().getObjectId()).getEvent().getObjectId();
	}

	/**
	 * @param target the target
	 * @return {@code true} if this player at same faction with the target, {@code false} otherwise.
	 */
	public boolean isInFactionWith(final L2Character target)
	{
		if (!target.isPlayable() || !Config.FACTION_ENABLED)
		{
			return false;
		}

		return getFactionPlayer().getFaction().getId() == target.getActingPlayer().getFactionPlayer().getFaction().getId();
	}

	/**
	 * @param target the target
	 * @return {@code true} if this player is on same siege side with the target, {@code false} otherwise.
	 */
	public boolean isOnSameSiegeSideWith(final L2Character target)
	{
		return getSiegeState() > 0 && isInsideZone(ZoneId.SIEGE) && getSiegeState() == target.getSiegeState() && getSiegeSide() == target.getSiegeSide();
	}

	/**
	 * @param target
	 * @return {@code true} if this player is on same party duel side with target, {@code false} otherwide.
	 */
	public boolean isOnSameSideDuelWith(final L2Character target)
	{
		if (target.isPlayable() && isInDuelWith(target) && getDuelState() == DuelState.DUELLING)
		{
			final Duel duel = DuelManager.getInstance().getDuel(getDuelId());

			if (duel.getTeamA().contains(this) && duel.getTeamA().contains(target) || duel.getTeamB().contains(this) && duel.getTeamB().contains(target))
			{
				return true;
			}
		}

		return false;
	}

	/**
	 * @param target
	 * @return {@code true} if this player is on same event side with target, {@code false} otherwise.
	 */
	public boolean isOnSameSideEventWith(final L2Character target)
	{
		if (!target.isPlayable())
		{
			return false;
		}

		return EventInterface.getInstance().areTeammates(this, target.getActingPlayer());
	}

	/**
	 * @param target
	 * @return {@code true} if this player is on same tournament side with target, {@code false} otherwise.
	 */
	public boolean isOnSameSideTournamentWith(final L2Character target)
	{
		if (!isInTournamentWith(target))
		{
			return false;
		}

		return getTeam() == target.getTeam();
	}

	/**
	 * @param target
	 * @return {@value true} if {@code L2PcInstance} target can be summoned
	 */
	public boolean canSummonTarget(final L2PcInstance target)
	{
		if (this == target)
		{
			return false;
		}

		if (target.isAlikeDead())
		{
			sendPacket(SystemMessage.getSystemMessage(SystemMessageId.C1_IS_DEAD_AT_THE_MOMENT_AND_CANNOT_BE_SUMMONED).addPcName(target));
			return false;
		}

		if (target.isInStoreMode())
		{
			sendPacket(SystemMessage.getSystemMessage(SystemMessageId.C1_CURRENTLY_TRADING_OR_OPERATING_PRIVATE_STORE_AND_CANNOT_BE_SUMMONED).addPcName(target));
			return false;
		}

		if (target.isRooted() || target.isInCombat())
		{
			sendPacket(SystemMessage.getSystemMessage(SystemMessageId.C1_IS_ENGAGED_IN_COMBAT_AND_CANNOT_BE_SUMMONED).addPcName(target));
			return false;
		}

		if (target.isInOlympiadMode())
		{
			sendPacket(SystemMessageId.YOU_CANNOT_SUMMON_PLAYERS_WHO_ARE_IN_OLYMPIAD);
			return false;
		}

		if (target.isFestivalParticipant() || target.isFlyingMounted() || target.isCombatFlagEquipped())
		{
			sendPacket(SystemMessageId.YOUR_TARGET_IS_IN_AN_AREA_WHICH_BLOCKS_SUMMONING);
			return false;
		}

		if (target.inObserverMode())
		{
			sendPacket(SystemMessage.getSystemMessage(SystemMessageId.C1_STATE_FORBIDS_SUMMONING).addCharName(target));
			return false;
		}

		if (target.isInsideZone(ZoneId.NO_SUMMON_FRIEND) || target.isInsideZone(ZoneId.JAIL))
		{
			sendPacket(SystemMessage.getSystemMessage(SystemMessageId.C1_IN_SUMMON_BLOCKING_AREA).addString(target.getName()));
			return false;
		}

		if (getInstanceId() > 0)
		{
			final Instance summonerInstance = InstanceManager.getInstance().getInstance(getInstanceId());

			if (!Config.ALLOW_SUMMON_IN_INSTANCE || !summonerInstance.isSummonAllowed())
			{
				sendPacket(SystemMessageId.YOU_MAY_NOT_SUMMON_FROM_YOUR_CURRENT_LOCATION);
				return false;
			}
		}

		if (isIn7sDungeon())
		{
			final int targetCabal = SevenSigns.getInstance().getPlayerCabal(target.getObjectId());

			if (SevenSigns.getInstance().isSealValidationPeriod())
			{
				if (targetCabal != SevenSigns.getInstance().getCabalHighestScore())
				{
					sendPacket(SystemMessageId.YOUR_TARGET_IS_IN_AN_AREA_WHICH_BLOCKS_SUMMONING);
					return false;
				}
			}
			else if (targetCabal == SevenSigns.CABAL_NULL)
			{
				sendPacket(SystemMessageId.YOUR_TARGET_IS_IN_AN_AREA_WHICH_BLOCKS_SUMMONING);
				return false;
			}
		}

		if (isInEvent() || isInTournament() || isInsideZone(ZoneId.SHIFT))
		{
			sendPacket(SystemMessageId.YOU_MAY_NOT_SUMMON_FROM_YOUR_CURRENT_LOCATION);
			return false;
		}

		if (target.isInEvent() || target.isInTournament() || target.isInsideZone(ZoneId.SHIFT))
		{
			sendPacket(SystemMessageId.YOUR_TARGET_IS_IN_AN_AREA_WHICH_BLOCKS_SUMMONING);
			return false;
		}

		return true;
	}

	public NevitAdvent getNevit()
	{
		return _nevit;
	}

	public void setForceSit(final boolean h)
	{
		_forceSit = h;
	}

	public boolean isForceSit()
	{
		return _forceSit;
	}

	public void setEventPoint(final int val)
	{
		getVariables().set("event_point", val);
	}

	public int getEventPoint()
	{
		return getVariables().getInt("event_point", 0);
	}

	public void setIsVoting(final boolean val)
	{
		_isVoting = val;
	}

	public boolean isVoting()
	{
		return _isVoting;
	}

	public Visual getVisual()
	{
		return _visual;
	}

	public Service getService()
	{
		return _service;
	}

	public Donate getDonate()
	{
		return _donate;
	}

	/**
	 * @return last {@code NpcHtmlMessage}
	 */
	public NpcHtmlMessage getLastNpcHtmlMessage()
	{
		return _lastNpcHtmlMessage;
	}

	public boolean hasAutoPotion(final int id)
	{
		return _autoPotion.containsKey(id);
	}

	public void setAutoPotion(final int id, final Future<?> task)
	{
		if (hasAutoPotion(id))
		{
			_autoPotion.remove(id).cancel(true);
		}

		if (Objects.nonNull(task))
		{
			_autoPotion.put(id, task);
		}
	}

	public void setProfil(final Profil profil)
	{
		_profil = profil;
	}

	public Profil getProfil()
	{
		return _profil;
	}

	public Scheme getScheme()
	{
		return _scheme;
	}

	public PlayerCounter getCounter()
	{
		return _counter;
	}

	public Achievement getAchievement()
	{
		return _achievement;
	}

	public BuffStore getBuffStore()
	{
		return _buffStore;
	}

	public boolean isInTournament()
	{
		return Objects.nonNull(getTournament()) && getTournament().isRunning();
	}

	public Tournament getTournament()
	{
		return _tournament;
	}

	public void setTournament(final Tournament tournament)
	{
		_tournament = tournament;
	}

	public void setPing(final int ping)
	{
		_ping = ping;
	}

	public int getPing()
	{
		return _ping;
	}

	public int getPcBangScore()
	{
		return _pcPoint;
	}

	public void reducePcBangScore(final int to)
	{
		_pcPoint -= to;
		updatePcBangWindow(to, false, false);
	}

	public void addPcBangScore(final int to)
	{
		_pcPoint += to;
	}

	public void updatePcBangWindow(final int point, final boolean isAdd, final boolean isDouble)
	{
		sendPacket(new ExPCCafePointInfo(this, point, isAdd, 24, isDouble));
	}

	public int getPrimeShopPoints()
	{
		return _primeShopPoints;
	}

	public void setPrimeShopPoints(final int val)
	{
		_primeShopPoints = val;
	}

	public void setCraftPoint(final int val)
	{
		_craftPoint = val;
	}

	public int getCraftPoint()
	{
		return _craftPoint;
	}

	public void addScheduledTask(final Class<?> clazz, final Future<?> task)
	{
		_scheduledTasks.computeIfAbsent(clazz, k -> new ArrayList<>()).add(task);
	}

	public void removeScheduledTask(final Class<?> clazz)
	{
		Optional.ofNullable(_scheduledTasks.remove(clazz)).ifPresent(s -> s.stream().filter(Objects::nonNull).forEach(k -> k.cancel(true)));
	}

	public void setFactionPlayer(final FactionPlayer factionPlayer)
	{
		_factionPlayer = factionPlayer;
	}

	public FactionPlayer getFactionPlayer()
	{
		return Objects.requireNonNullElse(_factionPlayer, _factionPlayer = new FactionPlayer(this, Faction.NEUTRAL));
	}

	public void setTraced(final boolean h)
	{
		_isTraced = h;
	}

	public boolean isTraced()
	{
		return _isTraced;
	}

	public void setCaptcha(final boolean val)
	{
		_isCaptcha = val;
	}

	public boolean isCaptcha()
	{
		return _isCaptcha;
	}

	public Farm getFarm()
	{
		return _farm;
	}

	public PlayerMission getMission()
	{
		return _mission;
	}

	public int getExperienceCollectorObjectId()
	{
		return _experienceCollectorObjectId;
	}

	public void setExperienceCollectorObjectId(final int val)
	{
		_experienceCollectorObjectId = val;
	}

	public void setIsAutoEnchanting(final boolean val)
	{
		_isAutoEnchanting = val;
	}

	public boolean isAutoEnchanting()
	{
		return _isAutoEnchanting;
	}

	public void setIsFakeStore(final boolean val)
	{
		_isFakeStore = val;
	}

	public boolean isFakeStore()
	{
		return _isFakeStore;
	}

	private long _deathTime;

	public void setDeathTime(final long val)
	{
		_deathTime = val;
	}

	public long getDeathTime()
	{
		return _deathTime;
	}

	public void updatePvPColorAndSkill()
	{
		final Entry<Integer, Integer> nameColorEntry = Config.PVP_NAME_COLOR.entrySet().stream().sorted(Map.Entry.<Integer, Integer>comparingByKey().reversed()).filter(s -> s.getKey() <= getPvpKills()).findFirst().orElse(null);

		if (Objects.nonNull(nameColorEntry))
		{
			getAppearance().setNameColor(nameColorEntry.getValue());

			broadcastUserInfo();
		}

		final Entry<Integer, Integer> titleColorEntry = Config.PVP_TITLE_COLOR.entrySet().stream().sorted(Map.Entry.<Integer, Integer>comparingByKey().reversed()).filter(s -> s.getKey() <= getPvpKills()).findFirst().orElse(null);

		if (Objects.nonNull(titleColorEntry))
		{
			getAppearance().setTitleColor(titleColorEntry.getValue());

			broadcastTitleInfo();
		}

		//@formatter:off
		final List<Skill> list = Config.PVP_SKILL.entrySet().stream().filter(s -> s.getKey() <= getPvpKills() && Objects.isNull(getKnownSkill(s.getValue()))).
					map(s -> SkillData.getInstance().getSkill(s.getValue(), 1)).
						filter(Objects::nonNull).
							collect(Collectors.toList());
		//@formatter:on

		if (!list.isEmpty())
		{
			list.forEach(s -> addSkill(s, false));
			sendSkillList();
		}
	}

	private HideAccessoryType _hideAccessoryType = HideAccessoryType.NONE;

	public void setHideAccessoryType(final HideAccessoryType type)
	{
		_hideAccessoryType = type;
	}

	public HideAccessoryType getHideAccessoryType()
	{
		return _hideAccessoryType;
	}
}
